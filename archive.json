{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2025-10-07T00:32:03.828049+00:00",
  "repo": "oauth-wg/oauth-sd-jwt-vc",
  "labels": [
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "HAS PR",
      "description": "",
      "color": "1d76db"
    },
    {
      "name": "individual-00",
      "description": "Version individual 00",
      "color": "fbca04"
    },
    {
      "name": "individual-01",
      "description": "Version individual 01",
      "color": "260824"
    },
    {
      "name": "discuss",
      "description": "Discuss",
      "color": "6DBCE0"
    },
    {
      "name": "Ready-for-PR",
      "description": "Needs PR (typically after resolved discussion)",
      "color": "B71DC5"
    },
    {
      "name": "pending close",
      "description": "",
      "color": "D0A53E"
    },
    {
      "name": "individual-??",
      "description": "Agreed future feature",
      "color": "B4C852"
    },
    {
      "name": "individual-02",
      "description": "individual-02",
      "color": "fef2c0"
    },
    {
      "name": "DO NOT MERGE",
      "description": "",
      "color": "B60205"
    },
    {
      "name": "individual-03",
      "description": "individual-03",
      "color": "e99695"
    },
    {
      "name": "wg-01",
      "description": "wg-01 draft (target is October 23th, IETF 118 cutoff)",
      "color": "0e8a16"
    },
    {
      "name": "wg-02",
      "description": "wg-02",
      "color": "3B153E"
    },
    {
      "name": "wg-04",
      "description": "",
      "color": "525FF7"
    },
    {
      "name": "metadata",
      "description": "",
      "color": "02C876"
    },
    {
      "name": "PRIO",
      "description": "",
      "color": "35FD30"
    },
    {
      "name": "blocked",
      "description": "Blocked",
      "color": "d93f0b"
    },
    {
      "name": "editorial",
      "description": "",
      "color": "D94EE8"
    },
    {
      "name": "wg-05",
      "description": "",
      "color": "F72899"
    },
    {
      "name": "future-extension",
      "description": "",
      "color": "61DE90"
    },
    {
      "name": "schema",
      "description": "",
      "color": "fa4543"
    },
    {
      "name": "policy",
      "description": "",
      "color": "7d9616"
    },
    {
      "name": "version 1.0",
      "description": "",
      "color": "30844e"
    }
  ],
  "issues": [
    {
      "number": 2,
      "id": "I_kwDOJbVClc5kzo78",
      "title": "Support JSON-LD payload",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/2",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "discuss"
      ],
      "body": "would be good to normatively define both cases when payload is vanilla JSON and JSON-LD - IETF SD-JWT document only gives non-normative examples in 4a and 4b.",
      "createdAt": "2023-05-01T19:37:22Z",
      "updatedAt": "2023-05-31T09:00:38Z",
      "closedAt": "2023-05-31T09:00:37Z",
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Wouldn't JSON-LD be better suited for a separate spec?",
          "createdAt": "2023-05-05T17:31:46Z",
          "updatedAt": "2023-05-05T17:31:46Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "yes, agreed. this profile will focus only on JSON with a `typ` value `vc+sd-jwt`",
          "createdAt": "2023-05-05T22:38:49Z",
          "updatedAt": "2023-05-05T22:38:49Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Reopened this since I think we need to think through this again. ",
          "createdAt": "2023-05-25T12:46:43Z",
          "updatedAt": "2023-05-25T12:46:43Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "i disagre... especially if we will have one document how to sign vanilla JSON payload with SD-JWT and VC-JWT as proposed in issue #102, JSON-LD payload signed using SD-JWT VC being in the same draft will be very confusing. I agree that work is needed somewhere probably, but not in this draft.",
          "createdAt": "2023-05-26T20:15:58Z",
          "updatedAt": "2023-05-26T20:15:58Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree with Kristina. JWT and SD-JWT is more or less the same, that's the reason why (I think) we have consensus to a have single draft for it. JSON-LD is different (typing, claims names and semantics, processing) and deserves a dedicated spec. ",
          "createdAt": "2023-05-28T10:14:55Z",
          "updatedAt": "2023-05-28T10:14:55Z"
        },
        {
          "author": "mprorock",
          "authorAssociation": "NONE",
          "body": "This should definitely focus on normal JSON/JWTs/SD-JWTs etc",
          "createdAt": "2023-05-30T15:23:42Z",
          "updatedAt": "2023-05-30T15:23:42Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Okay, then perhaps it make sense to also set the `cty` header accordingly. So that the JSON-LD version can be distinguished from the JSON version.",
          "createdAt": "2023-05-30T15:29:57Z",
          "updatedAt": "2023-05-30T15:29:57Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The typ should suffice.",
          "createdAt": "2023-05-31T02:05:39Z",
          "updatedAt": "2023-05-31T02:05:39Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Ok, I think there is unanimous agreement. Closing this issue.",
          "createdAt": "2023-05-31T09:00:37Z",
          "updatedAt": "2023-05-31T09:00:37Z"
        }
      ]
    },
    {
      "number": 3,
      "id": "I_kwDOJbVClc5kzsXf",
      "title": "defining `type` claim to be usable beyond SD-JWT-VC",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/3",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "`type` JWT claim should be defined in a way that makes it usable not only with SD-JWT-VC, but any other JSON based Credential Format like JWT-VC.",
      "createdAt": "2023-05-01T19:51:36Z",
      "updatedAt": "2023-05-11T13:54:18Z",
      "closedAt": "2023-05-11T13:54:18Z",
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "that is done",
          "createdAt": "2023-05-11T13:54:18Z",
          "updatedAt": "2023-05-11T13:54:18Z"
        }
      ]
    },
    {
      "number": 4,
      "id": "I_kwDOJbVClc5kzuY5",
      "title": "Define transformation logic back to the base data model in W3C VCDM 2.0.",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/4",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "awoie"
      ],
      "labels": [
        "HAS PR",
        "individual-00"
      ],
      "body": "- omitting `type` claim in Presentation and treating it as a default value `VerifiablePresentations`",
      "createdAt": "2023-05-01T19:58:25Z",
      "updatedAt": "2023-05-23T09:12:25Z",
      "closedAt": "2023-05-23T09:12:25Z",
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "We will do the following:\r\n- Instead of pseudo code, we will use algorithmic description\r\n- Add algorithms for VPs and VCs.",
          "createdAt": "2023-05-16T08:51:50Z",
          "updatedAt": "2023-05-16T08:51:50Z"
        }
      ]
    },
    {
      "number": 5,
      "id": "I_kwDOJbVClc5k0NP6",
      "title": "guidance around the `sub` claim.",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/5",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "\u201dsub\u201d Claim MAY be supported by the Issuer. There is no requirement for a binding to exist between `sub` and `cnf` claims.",
      "createdAt": "2023-05-01T21:13:44Z",
      "updatedAt": "2023-05-10T14:06:41Z",
      "closedAt": "2023-05-10T14:06:41Z",
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "That makes sense.",
          "createdAt": "2023-05-02T05:48:00Z",
          "updatedAt": "2023-05-02T05:48:00Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "So, you are saying we need to define something like: if there is a `sub` and a `cnf`, then the `cnf` should authenticate the `sub`?",
          "createdAt": "2023-05-05T17:03:31Z",
          "updatedAt": "2023-05-05T17:03:31Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "I am saying that \r\n1. `cnf` is used for cryptographic holder binding.\r\n2. `sub` is used as the user's identifier within the Issuer's namespace.\r\n3. if Issuer chooses to establish a relationship between a `cnf` and a `sub` (such as sub is a JWK thumbprint of a JWK in a cnf claim), but it is not necessary (not sure this even needs to be mentioned in the spec, if so, probably implementation considerations) ",
          "createdAt": "2023-05-05T22:41:13Z",
          "updatedAt": "2023-05-05T22:41:13Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Ok, then we don't really need to say anything about the relationship between `cnf` and `sub` since there can be a relationship or there cannot be a relationship.",
          "createdAt": "2023-05-08T08:04:32Z",
          "updatedAt": "2023-05-08T08:04:32Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "fixed by PR #14 ",
          "createdAt": "2023-05-10T14:06:20Z",
          "updatedAt": "2023-05-10T14:06:20Z"
        }
      ]
    },
    {
      "number": 10,
      "id": "I_kwDOJbVClc5lNIdW",
      "title": "Define terminology of SD-JWT-VC, etc.",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/10",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "HAS PR"
      ],
      "body": "I think we need to define what the following \"things\" are.\r\n\r\n- What is the Verifiable Credential based on SD-JWTs?\r\n\r\nI believe it is the JWT that contains the `_sd`s. It is not any of the combined formats. This means that the Verifiable Credential MAY NOT contain any disclosable claims, e.g., `name`. Would you agree @tlodderstedt, @Sakurann, Daniel?\r\n\r\nThe VC based on SD-JWT will have the media type `application/vc+sd-jwt`.\r\n\r\n- What is the Verifiable Presentation based on SD-JWTs? It makes sense to define that since the HB JWT has some specific requirements. It also makes sense because protocol developers will need to refer to one term when they exchange presentations or verifiable presentations between issuer <-> holder <-> verifier.\r\n\r\nCan we call the Combined Format for Issuance AND Presentation the Presentation based on SD-JWTs, and if there is HB, then it is a Verifiable Presentation? \r\n\r\nThe VP based SD-JWT will have the media type `application/vp+sd-jwt` altough I'm not sure if this makes sense. Wouldn't it better to have `application/vp+vc+sd-jwt`? Any thoughts on that?",
      "createdAt": "2023-05-05T17:17:20Z",
      "updatedAt": "2023-05-10T14:29:51Z",
      "closedAt": "2023-05-10T14:29:51Z",
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Also it is important to note that for OIDC4VP we use Verifiable Presentations in vp_token and we use Verifiable Credentials in OIDC4VCI in the credential response.\r\n\r\nIt probably has the implication that for OIDC4VCI, we will put the VC based on SD-JWT into the credential response, or we define a format identifier for something else. Keep in mind we need to send the disclosures to the client as well. In that regards is the SD-JWT itself the SD-JWT-VC without disclosures, or is the combined format including disclosures the SD-JWT-VC? Or we follow the approach above and we return a combined presentation (no HB) in the credential response and define a credential identifier for that.\r\n\r\nIt probably also means that we would put the VP based on SD-JWT into the OIDC4VP vp_token. \r\n ",
          "createdAt": "2023-05-05T19:32:26Z",
          "updatedAt": "2023-05-05T19:39:55Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We (IDunion) put the combined presentation (+hb jwt) in the vp_token. What else would you expect?",
          "createdAt": "2023-05-05T19:46:10Z",
          "updatedAt": "2023-05-05T19:46:10Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "> We (IDunion) put the combined presentation (+hb jwt) in the vp_token. What else would you expect?\r\n\r\nThat makes sense, so the VP based on SD-JWT is the combined format for presentation including HB JWT.\r\n\r\nThen, there is the question what would the OIDC4VCI credential response return? And what would be a format identifier? I know that this doesn't have to be answered in this spec but it helps with answering the terminology question.",
          "createdAt": "2023-05-05T20:11:24Z",
          "updatedAt": "2023-05-05T20:11:24Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Suggest we not overcomplicate things and say:\n- what is returned in a VP Token in OID4VP is a combined Format for presentation with HB-JWT.\n- what is returned in Credential Response in Credential Response in VCI is combined format for issuance.\n- credential format identifier is 'vc+sd-jwt' for both.\n- Terminology-wise, SD-JWT in the IETF spec is defined as an issuer signed JWS without disclosures. For this profile, the payload of SD-JWT, can be mapped back to a VCDM2.0",
          "createdAt": "2023-05-05T23:49:15Z",
          "updatedAt": "2023-05-05T23:49:15Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "This is potentially fixed by PR #21 ",
          "createdAt": "2023-05-10T14:00:14Z",
          "updatedAt": "2023-05-10T14:00:14Z"
        }
      ]
    },
    {
      "number": 11,
      "id": "I_kwDOJbVClc5lNMAL",
      "title": "`type` is not selectively disclosable",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/11",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "awoie"
      ],
      "labels": [
        "Ready-for-PR",
        "individual-??"
      ],
      "body": "Currently, `type` is not one of the selectively disclosable claims. This might be ok but it might have some privacy implications if a VC has multiple types. Let's assume the following:\r\n\r\nA VC with the types: driver's-license, age-over-18.\r\n\r\nIf the holder discloses only the age, then based on the current specification, the verifier would also know that the age was disclosed from a DL which is probably unnecessary context info since all the verifier needs is to trust the issuer of the VC. Note, the issuer itself might also leak some contextual info as well, so the issue might not need to be mitigated or it might not be entirely possible anyways.\r\n\r\nShould we make `type` selectively disclosable per array entry? Is this even supported by SD-JWT?\r\n\r\n",
      "createdAt": "2023-05-05T17:31:04Z",
      "updatedAt": "2023-09-21T09:26:54Z",
      "closedAt": "2023-09-21T09:26:54Z",
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this issue since SD-JWT doesn't support selectively disclosing array elements.",
          "createdAt": "2023-05-05T18:18:34Z",
          "updatedAt": "2023-05-05T18:18:34Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "We might want to add something to privacy considerations about that.",
          "createdAt": "2023-05-05T18:19:02Z",
          "updatedAt": "2023-05-05T18:19:02Z"
        },
        {
          "author": "TakahikoKawasaki",
          "authorAssociation": "NONE",
          "body": "FYI: There is a discussion about Selective Disclosure for array elements.\r\n\r\nhttps://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/194#issuecomment-1487860648",
          "createdAt": "2023-05-08T01:15:44Z",
          "updatedAt": "2023-05-08T01:15:44Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "suggest to close as the type is a simple string now",
          "createdAt": "2023-05-16T11:00:19Z",
          "updatedAt": "2023-05-16T11:00:19Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "@peteraltmann raised an issue with me that \"if the type is always disclosed, what is the point of selective disclosure because the verifier will know what claims are in the credential\". I think we should consider making type selectively disclosable.",
          "createdAt": "2023-05-24T22:55:48Z",
          "updatedAt": "2023-05-24T22:55:48Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "NONE",
          "body": "I agree with Peter and I'm in favor of sd for type",
          "createdAt": "2023-05-25T06:23:38Z",
          "updatedAt": "2023-05-25T06:23:38Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "What is the value of a VC without type information? Or let me put it the other way around. If the Verifier is supposed to be able to process a VC without knowing the type (which also means it can request the VC presentation without specifying the type), why do we need the type at all?",
          "createdAt": "2023-05-25T06:53:14Z",
          "updatedAt": "2023-05-25T06:53:14Z"
        },
        {
          "author": "c2bo",
          "authorAssociation": "MEMBER",
          "body": "> What is the value of a VC without type information? Or let me put it the other way around. If the Verifier is supposed to be able to process a VC without knowing the type (which also means it can request the VC presentation without specifying the type), why do we need the type at all?\r\n\r\nI was wondering about that point as well - what is revealed information worth without information about credential type (and corresponding trust framework).",
          "createdAt": "2023-05-25T07:24:54Z",
          "updatedAt": "2023-05-25T07:24:54Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "It becomes valuable if all the verifier wants to know is a specific claim, e.g., `dob`, and trusts an issuer which could issue other credential types as well. The credential type can also make a difference, e.g., if somebody wants to know whether somebody has a driver's license but is not interested in the details. ",
          "createdAt": "2023-05-25T08:13:57Z",
          "updatedAt": "2023-05-25T08:13:57Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "My current assumption is that `type` is the primary selection criteria for credentials in a presentation request (as identifier for a pre-defined bundle of claims associated with certain policies for enrollment and issuance). Based on that assumption,  the Verifier always knows the type. So what would be the scenario to request a VC without knowing its type?",
          "createdAt": "2023-05-25T13:21:58Z",
          "updatedAt": "2023-05-25T13:21:58Z"
        },
        {
          "author": "AltmannPeter",
          "authorAssociation": "NONE",
          "body": "Having the type disclosable does not mean the user never shares it. If a verifier requests the type then the user can disclose it, no? \r\n\r\nThe issues with both the `@context` and the `type` is that they reveal what claims the user has, which is more than what is strictly required for a service. The privacy requirements from the Parliament, Council, and the Commission are strict. However, I cannot think of a scenario to justify type being disclosable.\r\n\r\nArguments for: As @awoie mentions, the verifier may require only a particular claim, e.g., age over 18, and should reasonable accept these from any trusted issuer without having to know what exact attestation type it came from. Some issuers may have multiple types that all contain the same attribute. And there are strong demands that the user should reveal only what is required for the service and absolutely nothing else (to the point where I am actively having to fight against people who want to put ZKP everywhere). Not revealing claim values is great; also hiding what claims you have is more privacy preserving.\r\n\r\nArguments against: Beside from those already mentioned, you could question the privacy benefits. As long as the individual Issuer's signature is included, it is likely not that hard to guess what the particular attestation may contain, particularly if the Issuer only issues few attestations.\r\n\r\nIn conclusion, given how there are no technical challenges to making type disclosable, and how the Verifier may just request a type and refuse to process a presented claim without type disclosed, I would argue for that the type MAY be disclosed.",
          "createdAt": "2023-05-25T14:46:20Z",
          "updatedAt": "2023-05-25T15:06:43Z"
        },
        {
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "body": "The `iss` field is always disclosed, hence not revealing the `type` only offers privacy if the same issuer with the same key offers multiple VCs that share the same claim name that is being requested. It seems like an unrealistic scenario that this is a privacy benefit. It seems to me the usecase would be merely a fillout help, where the verifier does not care about the origin of claims and handles those as self-attested",
          "createdAt": "2023-05-25T19:04:00Z",
          "updatedAt": "2023-05-25T19:04:00Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Let's create a PR and see how the spec will change and continue the discussion there.",
          "createdAt": "2023-06-22T09:46:23Z",
          "updatedAt": "2023-06-22T09:46:23Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Currently, the spec gives `type` the following function:\r\n> A type defines which claims may or must appear in the Unsecured Payload of the SD-JWT VC and whether they may, must, or must not be selectively disclosable.\r\n\r\nGiven that, I don't think it can be selectively disclosed. We should close this issue. ",
          "createdAt": "2023-09-13T10:34:26Z",
          "updatedAt": "2023-09-13T10:34:26Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "We should add something to the privacy considerations section that explains the risk of leaking more context info from the type in certain use cases.",
          "createdAt": "2023-09-13T11:01:17Z",
          "updatedAt": "2023-09-13T11:01:17Z"
        }
      ]
    },
    {
      "number": 13,
      "id": "I_kwDOJbVClc5lSjvT",
      "title": "non-selectively disclosable registered JWT claims",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/13",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "discuss"
      ],
      "body": "currenlty, iss, iat, nbf, exp, cnf, type, status are listed as \"non-selectively disclosable registered JWT claims\".\r\nWhat is the risk of selectively disclosing them? I do not have a strong opinion yet, but wanted to make sure we are making a conscious decision.\r\n",
      "createdAt": "2023-05-08T01:46:09Z",
      "updatedAt": "2023-05-23T08:21:15Z",
      "closedAt": "2023-05-23T08:21:15Z",
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "There is no risk but it is not possible to represent them with the VCDM 2.0 since certain properties are required. A verifier that receives a VP-SD-JWT without the mandatory fields would not be able to transform the VP-SD-JWT to a VP as per W3C. This might be ok but also might not be ok. It would be great if we didn't have breaking changes for interop reasons. Thoughts?",
          "createdAt": "2023-05-10T14:11:17Z",
          "updatedAt": "2023-05-10T14:11:17Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I think the values that define the validity of the token should be non-SD so that a verifier always gets the \"full picture\". Similar for `iss`, which is critical for checking the token. \r\n\r\nFor type, we have Issue #11 \r\n\r\nNot sure about status, but I think it should also be non-SD.",
          "createdAt": "2023-05-16T08:17:28Z",
          "updatedAt": "2023-05-16T08:17:28Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think every claim that is needed to evaluate the security/status of the credential must always be disclosed. For example, if the holder could omit the status, the verifier would never learn the credential was revoked by the issuer. I guess it is the issuer who should determine what must always be disclosed.  ",
          "createdAt": "2023-05-16T11:02:13Z",
          "updatedAt": "2023-05-16T11:02:13Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "I would agree with @tlodderstedt ",
          "createdAt": "2023-05-23T08:20:18Z",
          "updatedAt": "2023-05-23T08:20:18Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this issue since nothing have to be changed. Current spec requires security-related claims to be always present in the SD-JWT.",
          "createdAt": "2023-05-23T08:21:15Z",
          "updatedAt": "2023-05-23T08:21:15Z"
        }
      ]
    },
    {
      "number": 19,
      "id": "I_kwDOJbVClc5liFbX",
      "title": "Fix all references to external documents",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/19",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "danielfett"
      ],
      "labels": [
        "HAS PR",
        "individual-00"
      ],
      "body": "Fix references to OAuth SD-JWT",
      "createdAt": "2023-05-10T08:57:12Z",
      "updatedAt": "2023-05-22T13:57:53Z",
      "closedAt": "2023-05-22T13:57:53Z",
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Fix references to RFCs, standards etc.",
          "createdAt": "2023-05-16T08:16:53Z",
          "updatedAt": "2023-05-16T08:16:53Z"
        }
      ]
    },
    {
      "number": 23,
      "id": "I_kwDOJbVClc5lkTuk",
      "title": "Add media type registration info",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/23",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "HAS PR"
      ],
      "body": "Add media type registration info",
      "createdAt": "2023-05-10T14:07:34Z",
      "updatedAt": "2023-05-10T14:15:26Z",
      "closedAt": "2023-05-10T14:15:25Z",
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Potentially fixed by #22 ",
          "createdAt": "2023-05-10T14:07:46Z",
          "updatedAt": "2023-05-10T14:07:46Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "#22 got merged, closing",
          "createdAt": "2023-05-10T14:15:25Z",
          "updatedAt": "2023-05-10T14:15:25Z"
        }
      ]
    },
    {
      "number": 24,
      "id": "I_kwDOJbVClc5lkUFI",
      "title": "Add more info to intro",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/24",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "HAS PR"
      ],
      "body": "- explain three-party-model\r\n- explain JSON payload",
      "createdAt": "2023-05-10T14:08:18Z",
      "updatedAt": "2023-05-10T14:19:20Z",
      "closedAt": "2023-05-10T14:19:20Z",
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Potentially fixed by #20 ",
          "createdAt": "2023-05-10T14:08:32Z",
          "updatedAt": "2023-05-10T14:08:32Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "#20 merged, closing this issue",
          "createdAt": "2023-05-10T14:19:20Z",
          "updatedAt": "2023-05-10T14:19:20Z"
        }
      ]
    },
    {
      "number": 25,
      "id": "I_kwDOJbVClc5lkUsy",
      "title": "Complete VC and VP example",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/25",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "danielfett"
      ],
      "labels": [
        "individual-00"
      ],
      "body": "- VC-SD-JWT\r\n- VP-SD-JWT w/wo holder binding\r\n- with different payloads",
      "createdAt": "2023-05-10T14:09:39Z",
      "updatedAt": "2023-05-22T15:52:23Z",
      "closedAt": "2023-05-22T15:52:23Z",
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Some examples were added but they are not 100% complete.",
          "createdAt": "2023-05-10T16:42:31Z",
          "updatedAt": "2023-05-10T16:42:31Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "@danielfett can you provide the full example here?",
          "createdAt": "2023-05-16T08:18:54Z",
          "updatedAt": "2023-05-16T08:18:54Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Complete examples in section 5.2 Verifiable Credentials and 6.1 Verifiable Presentations.",
          "createdAt": "2023-05-16T08:47:24Z",
          "updatedAt": "2023-05-16T08:47:24Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "This was fixed in #67 ",
          "createdAt": "2023-05-22T15:52:22Z",
          "updatedAt": "2023-05-22T15:52:22Z"
        }
      ]
    },
    {
      "number": 27,
      "id": "I_kwDOJbVClc5lktYx",
      "title": "Review end-to-end with terminology in mind",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/27",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "danielfett",
        "awoie"
      ],
      "labels": [
        "individual-00"
      ],
      "body": "The distinction of VC-SD-JWT and VP-SD-JWT etc. is still not super clean also in terms of what the verifier receives.",
      "createdAt": "2023-05-10T14:54:44Z",
      "updatedAt": "2023-05-22T13:57:53Z",
      "closedAt": "2023-05-22T13:57:53Z",
      "comments": []
    },
    {
      "number": 29,
      "id": "I_kwDOJbVClc5llXf5",
      "title": "Add use case section",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/29",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "danielfett"
      ],
      "labels": [
        "individual-01"
      ],
      "body": "",
      "createdAt": "2023-05-10T16:42:54Z",
      "updatedAt": "2023-09-08T13:36:03Z",
      "closedAt": "2023-09-08T13:36:02Z",
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "As per SD-JWT VC editor call, we decided to remove this section for now.",
          "createdAt": "2023-09-08T13:34:46Z",
          "updatedAt": "2023-09-08T13:34:46Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "PR required to delete the use case section since it is not common practice in other IETF specs.",
          "createdAt": "2023-09-08T13:35:07Z",
          "updatedAt": "2023-09-08T13:35:07Z"
        }
      ]
    },
    {
      "number": 30,
      "id": "I_kwDOJbVClc5llXyg",
      "title": "Add scope section",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/30",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "awoie"
      ],
      "labels": [
        "individual-00"
      ],
      "body": "@tlodderstedt suggested to have a scope section and an overview section. Not sure if we need both.",
      "createdAt": "2023-05-10T16:43:52Z",
      "updatedAt": "2023-05-16T11:25:19Z",
      "closedAt": "2023-05-16T11:25:19Z",
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Move \"Overview\" section to \"Scope\" section and delete \"Overview\" section.",
          "createdAt": "2023-05-16T08:21:33Z",
          "updatedAt": "2023-05-16T08:21:33Z"
        }
      ]
    },
    {
      "number": 31,
      "id": "I_kwDOJbVClc5llX_Q",
      "title": "Add flow diagram",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/31",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "awoie"
      ],
      "labels": [
        "HAS PR",
        "individual-00"
      ],
      "body": "I guess that is missing although the flow diagram won't be much different from SD-JWT. Perhaps the status check could be added in addition.",
      "createdAt": "2023-05-10T16:44:31Z",
      "updatedAt": "2023-05-24T21:23:21Z",
      "closedAt": "2023-05-24T21:23:21Z",
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "closing this, #55 was merged",
          "createdAt": "2023-05-24T21:23:21Z",
          "updatedAt": "2023-05-24T21:23:21Z"
        }
      ]
    },
    {
      "number": 33,
      "id": "I_kwDOJbVClc5lpbS7",
      "title": "[Trust Model] validation of Metadata, jwks and not repudiable trust relationships",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/33",
      "state": "CLOSED",
      "author": "peppelinux",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "discuss"
      ],
      "body": "In https://github.com/vcstuff/draft-terbu-sd-jwt-vc/blob/main/draft-terbu-sd-jwt-vc.md#jwt-issuer-metadata-jwt-issuer-metadata\r\n\r\nMy concerns rely about the semantic of this `/.well-known/jwt-issuer`, since every participant in a identity (openid) or authorization (Oauth) infrastructure is in fact a jwt issuer, even the relying party issues JWT (authz request, private_key_jwt ...). I would like to stress our brains to get a solution re-using what we already have or specialized other wel-known(s) endpoint in relation at the new roles in the wallet ecosystem\r\n\r\nIn addition to this \"intellectual\" challenge, I propose to do a PR by introducing `.well-known/openid-federation` for secure trust establishment mechanisms that cannot be repudiated over time.\r\n\r\nIn particular the role of the `trust_chain` JWS header as shown in the example below\r\n\r\n````\r\n{\r\n \"alg\": \"ES256\",\r\n \"typ\": \"vc+sd-jwt\",\r\n \"kid\": \"4-available-in-the-trust-chain\",\r\n \"trust_chain\": [\r\n   \"fIIE3jCCA8agAwIBAgICAwEwT...TWVU\",\r\n   \"aiIE+zCCBGSgAwIBAgICAQ0wD...09VZ\",\r\n   \"fyIC5zCCAlACAQEwDQYJKoZIh...9ViH\"\r\n ]\r\n}\r\n.\r\n{\r\n \"iss\": \"https://credential-issuer.example.com/\",\r\n \"iat\": 1516239022,\r\n \"exp\": 1516247022,\r\n \"type\": \"Identity\",\r\n \"_sd\": [\r\n   \"UiuRGkTW7e_5UQauGeQRQdF8u3WYevS4Fs0IuB_DgYM\",\r\n   \"tmPlXq0MID-oRXbUNHyoVZrc9Qkm8cwJTohVyOVlUgQ\",\r\n   \"vTz0JI103v4k4pKIloT83Yzi33L1SdZlWBPmsfJBefk\"\r\n ],\r\n \"_sd_alg\": \"sha-256\",\r\n \"cnf\": {\r\n   \"jwk\": {\r\n     \"kty\": \"EC\",\r\n     \"crv\": \"P-256\",\r\n     \"x\": \"TCAER19Zvu3OHF4j4W4vfSVoHIP1ILilDls7vCeGemc\",\r\n     \"y\": \"ZxjiWWbZMQGHVWKVQ4hbSIirsVfuecCE6t4jT9F2HZQ\"\r\n   }\r\n }\r\n}\r\n````\r\nthe benefits of the federation trust chain are summarized below\r\n\r\n1. trust and protocol specific jwks are available in it\r\n2. the jwks and the metadata are verifiable having just the public key of a single trusted third party (Trust Anchor)\r\n3. the metadata of the issuer are subject of the policies of the trust chain, the trust chain may overload, add,remove, some elements from the final metadata by applying the policies contained in it. This allow us to remove the possibility that an entity may use a weak alg or defines unsupported scopes or any other property not allowed by the regulation implemented by Trust Anchor\r\n\r\nThis JWS header will be registered in the IANA registry and will be soon published in the OIDC Federation draft 29\r\n\r\nI can do the draft of the PR and ask to you a revision as usual, while regarding the first point I'd suggest more discussion on that\r\n",
      "createdAt": "2023-05-11T08:46:03Z",
      "updatedAt": "2023-05-23T17:55:27Z",
      "closedAt": "2023-05-23T08:23:34Z",
      "comments": [
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The way the spec is written now, the .well-known/jwt-issuer location can be used by anyone issuing JWTs (as long as the issuer value is a HTTPS URL). I think that is ok. If you want to tighten the scope or change the name, we can talk about it. .well-known/jwt-issuer just makes the OpenID Connect approach for key management available to the world of verifiable credentials and people seem to like the idea. \r\n\r\nYou are suggesting a completely different approach (along the lines of OpenID Federation). That's fine (and you know I like your passion about it) and implementers can use this mechanism with SD-JWT VCs (in the same way they can use OpenID Federation as alternative to the OpenID Connect Key resolution today). \r\n\r\nSo what is the issue?",
          "createdAt": "2023-05-16T10:59:14Z",
          "updatedAt": "2023-05-16T10:59:14Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "NONE",
          "body": "Yes, the scope of this instance should really be defined since it seems too much wide\r\n\r\nThis Issue wants place in the specs a clear statement, and non-normative example, about the key resolution following the approach of the trust relationships, then X509 certificate chain and OpenID Connect Federation Trust Chain\r\n\r\nthe requirement is that there are many cases where a decentralized infrastructure needs a trust delegation mechanism where the verifiable attestation of the trust relationship between the entities is represented as a \"chain\", made with linked claims, public keys and signature bindings \r\n\r\nIf the defining of the trust relationship verifiable attestations is out of scope for this specs, I suggest to not propose the sole OAuth2 connect approach but giving more non-normative example linked to external refs",
          "createdAt": "2023-05-17T08:46:33Z",
          "updatedAt": "2023-05-17T08:46:33Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The .well-known/jwt-issuer is a simple mechanism for key resolution and key rotation. Based on prospect implementers feedback, people like its simplicity and want to implement it. \r\n\r\nTrust management can be built on top. That's why it is out of scope.\r\n\r\nIf implementers want to use other ways to manage keys, fine - they can use other mechanisms. .well-known/jwt-issuer is an option not mandatory to implement. ",
          "createdAt": "2023-05-17T09:51:21Z",
          "updatedAt": "2023-05-17T09:53:37Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "NONE",
          "body": "My concerns is related to the missing requirements related to the trust model, that expose us in defining new specification following the hypes or the feedback taken along the road with the mechanism of the empathy or other experiences characterized by social exchanges, these are important but they may have distractions and distorsion due to enviromental conditions or individual inclinations.\r\n\r\nsince I believe that this is the right place to do the right things, I'd like to start over the requirements of the trust model and key attestation mechanisms as well\r\n\r\nIn this document me and other contributors are trying to define an agnostic approach in the definition of the trust model requirements and rules, given as granted the architectural requirements of decentralization\r\n\r\n[The eID Wallet Trust Model Rules](https://docs.google.com/document/d/1Dk_8UmytCI4VhCx5VMnXmEzdXRvgJozGeq1GNHZOQik/)\r\n\r\nI'm looking to non repudiation, decentralized historical registry of expired/revoked keys, selfconsistent VC/Attestation with verifiable keys, metadata and policies\r\n\r\nthat's why I propose a PR including .well-known/openid-federation as endpoint or the way we may define to integrate jwt-issuer with the federation trust chains, since these give the full coverage of the requirements\r\n\r\nthe prerequisite is then the cryptographic verifiability, so jwt-issuer response should or must be signed\r\n\r\nthen I've noted that in the text is written that only x509 and .well-known/jwt-issuer MUST be supported, this would exclude the current and the future specification that brings an higher level of assurance on the attestations. I'd remove that \"only\" :-)\r\n\r\n\r\n",
          "createdAt": "2023-05-21T00:47:29Z",
          "updatedAt": "2023-05-21T00:47:29Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hi Giuseppe, it seems you are mixing up the scope of vc-sd-jwt and the high assurance profile. This is the repo of vc-sd-jwt. It won't define mandatory to implement requirements for key resolution & issuer identification/authentication. It just introduces a simple mechanism for this purpose. Mandatory to implement requirement are stated in the high assurance profile. \r\nPS: I don't see why .well-known/jwt-issuer must be signed as pre-requisite to use it with trust management mechanisms, including federation. .well-known/jwt-issuer is intended to be super simple. Application level encryption adds complexity (itself and through key management) and does not add security for an API based model. It makes sense in a mode where all data is carried in a chain structure, but that is a different story. ",
          "createdAt": "2023-05-22T07:22:42Z",
          "updatedAt": "2023-05-22T07:22:42Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "NONE",
          "body": "Yes, I've mixed up many things just for giving an harmonic view on the requirements and assumptions I have in mind\r\n\r\nConsidering how we can work together to improve high assurance profile, I've raised the issue of having in sd-jwt-vc even openid-federation and not x5c and jwt-issuer alone, as raised in several other issues (and here my excuse for the noise)\r\n\r\nDuring the previous connect call there was the agreement that once Federation Draft 29 will be available, then we'll be able to include the Federation trust_chain JWS header parameter in all the OpenID4VC specs, so I'm looking forward to have this agreement also in sd-jwt-vc \r\n\r\nAs you know, mine is not just a request but a manifestation of willingness to contribute actively to introduce the Federation way to obtain attestations of key, metadata and policies related to these\r\n\r\n ",
          "createdAt": "2023-05-22T12:08:22Z",
          "updatedAt": "2023-05-22T12:19:35Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> During the previous connect call there was the agreement that once Federation Draft 29 will be available, then we'll be able to include the Federation trust_chain JWS header parameter in all the OpenID4VC specs, so I'm looking forward to have this agreement also in sd-jwt-vc\r\n\r\nThat's what the minutes say\r\n\r\n<img width=\"576\" alt=\"image\" src=\"https://github.com/vcstuff/draft-terbu-sd-jwt-vc/assets/328358/8e0d7028-8fd6-435f-bdbc-c602f7a320b4\">\r\n\r\nInterestingly, the issue was closed without any further comments. \r\n\r\nYou can certainly open an issue on this in the issue tracker and we will discuss this in the SIOP special calls (or the OID4VC calls) going forward. ",
          "createdAt": "2023-05-22T13:44:19Z",
          "updatedAt": "2023-05-22T13:44:19Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree with @tlodderstedt that this issue relates to the OpenID4VC hi-assurance profile. This spec is a general-purpose Verifiable Credentials representation based on SD-JWTs.\r\n\r\nClosing this issue. Please re-open if you disagree.",
          "createdAt": "2023-05-23T08:23:34Z",
          "updatedAt": "2023-05-23T08:23:34Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "NONE",
          "body": "draft 29 has its changelog with the fixed issues by id number, the review process has been completed in the PR, then this latter is referenced in the Issue\r\n\r\nhttps://bitbucket.org/openid/connect/issues/1921/trust_chain-as-jwt-header-claim\r\n\r\nok guys",
          "createdAt": "2023-05-23T17:55:26Z",
          "updatedAt": "2023-05-23T17:55:26Z"
        }
      ]
    },
    {
      "number": 34,
      "id": "I_kwDOJbVClc5lpshA",
      "title": "Intro section might be too broad",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/34",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "danielfett"
      ],
      "labels": [
        "individual-00"
      ],
      "body": "Feedback from @tlodderstedt :\r\n\r\n> \"However, JWTs do not support selective disclosure, i.e., the ability to disclose only a subset of the claims contained in the JWT. \" is to broad - Suggest to frame it like this  \"JWTs do not support selective disclosure in the issuer-holder-verifier model\"",
      "createdAt": "2023-05-11T09:28:19Z",
      "updatedAt": "2023-05-19T08:15:48Z",
      "closedAt": "2023-05-19T08:15:48Z",
      "comments": [
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "made a proposal in PR #52 ",
          "createdAt": "2023-05-16T10:47:44Z",
          "updatedAt": "2023-05-16T10:47:44Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Fixed in PR #52.",
          "createdAt": "2023-05-19T08:15:48Z",
          "updatedAt": "2023-05-19T08:15:48Z"
        }
      ]
    },
    {
      "number": 35,
      "id": "I_kwDOJbVClc5lptOL",
      "title": "Remove polymorphism from types attribute",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/35",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Pros:\r\n- selective disclosure of types possible to increase privacy and to reduce contextual info\r\n- more granular types possible\r\n- issuers don't have to issue multiple credentials\r\n\r\nCons:\r\n- polymorphism always is a challenge, we that with `aud`\r\n- no support in SD-JWT yet to selectively disclose array elements",
      "createdAt": "2023-05-11T09:30:01Z",
      "updatedAt": "2023-05-11T15:21:16Z",
      "closedAt": "2023-05-11T15:21:16Z",
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "After further discussions it seems that multiple types might cause difficulties with JSON schemas. If multiple types are required in the future (e.g. more implementer's feedback), we can update the specification.\r\n\r\nSo, let's make `types` a single string value.",
          "createdAt": "2023-05-11T13:52:29Z",
          "updatedAt": "2023-05-11T13:52:29Z"
        }
      ]
    },
    {
      "number": 36,
      "id": "I_kwDOJbVClc5lpteU",
      "title": "JWT Issuer Metadata should support paths",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/36",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "awoie"
      ],
      "labels": [
        "HAS PR",
        "individual-00"
      ],
      "body": "The rules for obtaining the issuer metadata needs to be extended to cope with paths as well. I suggest to use the text from https://www.rfc-editor.org/rfc/rfc8414.html#section-3.",
      "createdAt": "2023-05-11T09:30:34Z",
      "updatedAt": "2023-05-25T11:36:01Z",
      "closedAt": "2023-05-25T11:36:01Z",
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "The following example is already supported ...\r\n\r\n```\r\n\"iss\" = \"https://www.rp.com\"\r\n--> www.rp.com/.well-known/jwt-issuer\r\n\r\n\"iss\" = \"https://www.rp.com/user/1234\"\r\n--> www.rp.com/user/1234/.well-known/jwt-issuer \r\n```\r\n\r\n@tlodderstedt is this what you had in mind, or is there anything missing? In that case, we could add an example that makes it more visible that this use case is supported.\r\n",
          "createdAt": "2023-05-23T08:28:15Z",
          "updatedAt": "2023-05-23T08:28:15Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "https://example.com/user/1234/.well-known/jwt-issuer needs to be https://example.com/.well-known/jwt-issuer/user/1234/ \r\n\r\nhave a look at https://www.rfc-editor.org/rfc/rfc8414.html#section-3",
          "createdAt": "2023-05-23T14:53:14Z",
          "updatedAt": "2023-05-23T14:53:33Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Ok, makes sense. Will create a PR to fix that.",
          "createdAt": "2023-05-23T15:28:20Z",
          "updatedAt": "2023-05-23T15:28:20Z"
        }
      ]
    },
    {
      "number": 37,
      "id": "I_kwDOJbVClc5lrjLw",
      "title": "analyze and clarify the diff with vc-jwt?",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/37",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The usage of a Holder Binding JWT as defined in [IETF.SD-JWT] might be a different mechanism from Verifiable Presentation as defined in [W3C.VCDM2.0]/[vc-jwt], while achieving the same goal.\r\n\r\nmaybe not needed. not sure if this will bring clarify or more confusion",
      "createdAt": "2023-05-11T14:17:44Z",
      "updatedAt": "2023-05-13T13:00:34Z",
      "closedAt": "2023-05-13T13:00:34Z",
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "The current VC SD-JWT text should actually use Combined Format for Presentations (incl. Holder Binding) for VPs. So, it is already included and the only option to accomplish that. If the current text does not reflect that well enough, we should make the text more precise.\r\n\r\n@Sakurann which section of VC SD-JWT are you specifically referring to?",
          "createdAt": "2023-05-11T14:48:15Z",
          "updatedAt": "2023-05-11T14:48:15Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "The current text of VC SD-JWT has nothing to do with VC-JWT as per W3C.",
          "createdAt": "2023-05-11T14:48:52Z",
          "updatedAt": "2023-05-11T14:48:52Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Ok. Than we are not dependent on VC-JWT for nbf too (issue #12)",
          "createdAt": "2023-05-13T13:00:20Z",
          "updatedAt": "2023-05-13T13:00:20Z"
        }
      ]
    },
    {
      "number": 40,
      "id": "I_kwDOJbVClc5l10wF",
      "title": "Align and expand Scenarios/Business Requirements section",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/40",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-05-13T13:42:07Z",
      "updatedAt": "2023-05-13T13:42:32Z",
      "closedAt": "2023-05-13T13:42:31Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "sorry, wrong repo...",
          "createdAt": "2023-05-13T13:42:31Z",
          "updatedAt": "2023-05-13T13:42:31Z"
        }
      ]
    },
    {
      "number": 41,
      "id": "I_kwDOJbVClc5l1-X3",
      "title": "HTTPS URL and OIDC Federation?",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/41",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "discuss"
      ],
      "body": "per comment from @peppelinux, consider mention that an issuer URL used for /.well-known/jwks can also be used for OpenID Federation.",
      "createdAt": "2023-05-13T15:08:51Z",
      "updatedAt": "2023-05-23T08:33:03Z",
      "closedAt": "2023-05-23T08:33:03Z",
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "NONE",
          "body": "OIDC Federation is related to the technical implementation of the Trust Model and then to the infrastructure of Trust\r\n\r\nan HTTP URL should, or may, be inspected for Trust Assessment with the .well-known/openid-federation endpoint and then with the Federation Entity Discovery process.\r\n\r\nThe Federation Entity Discovery process is always required when the trust assessment method is OpenID Federation and its  Trust Chain contains all the verifiable trust relationships between the parties, the metadata with policy applied and everything about a subject\r\n\r\nIf the Trust Chain is statically available, it just only be validated and checked against the revocation methods of the participants in the infrastructure. This last statement considers the availability of the Trust Chain of every issuer of JWS, as introduced in the issue below:\r\n\r\nhttps://github.com/vcstuff/draft-terbu-sd-jwt-vc/issues/33\r\n\r\nA secure Trust Model requires \"signature everywhere\" to satisfy the requirement of non-repudiability or everything issued by an issuer. For this reason the JWKS in OpenID Connect federation are embedded in the signed metadata (Entity Configuration) or made available, and signed, in the signed_jwks_uri\r\n\r\ntoghether with the federation entity discovery and the provision of static trust chain in the JWS header, I'm working on these two DID resolution methods\r\n\r\n**did:openid:example.it:oidc:rp[#$kid-value]**\r\nthis URN is translated to https://example.it/oidc/rp/.well-known/openid-federation and requires a Federation Entity Discovery to build a valid Trust Chain. This doesn't preclude any other OpenID Connect trust resolution method in the present or in the future, giving to the trust resolver the freedom to decide which openid standard to use for the resolution of the keys. Kid value is optional depending to the scope of the did indetifier, if related to a subject or to a key\r\n\r\n**did:openid-trustchain:BASE64({\"kid\": 1, \"trust_chain\": [ ... ]})**\r\nthis URN is translated to a static OpenID Connect Federation Trust Chain, that gives a snapshot of the federation configuration and of the trust relationships between the subject and the Trust Anchor, its metadatas, the metadata policies, trust mark... Everything about the Trust Model, without any federation entity discovery process\r\n\r\nSo, HTTP or DID a Trust Model with OpenID Federation should be always supported in the specs\r\n\r\n",
          "createdAt": "2023-05-13T20:17:44Z",
          "updatedAt": "2023-05-14T16:10:06Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The .well-known/jwt-issuer mechanism works with any other .well-known location. We should give a couple of examples.\r\n\r\nRegarding OpenID federation, I\u2019m not sure the current revision of the specification would work well with it, given it would require the issuer keys used to sign JWTs to turn up in the entity configuration again (which duplicates the data).\r\n\r\n@peppelinux can you please comment on that?",
          "createdAt": "2023-05-14T07:52:42Z",
          "updatedAt": "2023-05-14T07:52:42Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "NONE",
          "body": "I start over from the requirements I have regarding the long-lived and non-repudiable attestations.\r\n\r\na. An Attestation can be a VC or any kind of signed artifact issued according to a contract.\r\nb. The contract can be bilateral, between two organization or multilateral if we mix thousands of organizations and natural persons according to a defined Trust Model, since the architecture is decentralized I consider only multilateral relationships.\r\n\r\nThe Attestation must be verified in both online and offline flows, this requires that the following statements must be satisfied:\r\n\r\n1. The public key for verification must be attested as reliable by a Trusted Third Party. This implies that the public key MUST be contained in the Attestation together with the proof of its reliability. The reliability proof must be issued by a Trusted Third Party\r\n2. The verifier must verify the digital signature of the attestation, using the public key contained in it, since the public key is signed by a Trusted Third Party and made available in the signed attestation \r\n3. The state of the issuer must be contained in the attestation, since all the information about the issuer is available statically and signed by a Trusted Third Party\r\n4. The Policy regarding the issuer MUST be applied, to give evidence if the issuer behaved correctly at time of issuance\r\n5. even if the public keys may change in the future years, the state of the issuer at the time of the issuance, the applied policies, its jwks, must be always verifiable, since the attestation cannot be repudiated\r\n\r\nconsider that an issuer of an attestation can be one or more of all the following entities:\r\n\r\nI. Wallet Provider issuing a Wallet Instance Attestation\r\nII. Credential Issuer that issues a VC\r\nIII. RP that issues a presentation request\r\nIV. Wallet Instance that issue a signed presentation request or an id token\r\n\r\nAll these requirements are fully satisfied by OpenID Connect Federation Trust Chain, since the JWS trust_chain is going to be registered in the IANA JWS header parameter register.\r\n\r\nThe sole and particular exception is made for the Wallet Instance, since these are not andled by organization but by natural person. In this cases they must present the Wallet Instance Attestation where the Wallet Provider Trust Chain is contained in it. A verifier trusts the wallet instance using the instance attestation, since the trust to the Wallet Provider can be established, statically and in offline flows.\r\n\r\nThe Trust Chain contains all the components listed below:\r\n\r\n- Trust Relationship of the subject (one of the previously listed above entities) with a Trusted Third Party, considering all the entities along the path from the subject to a well-known Trust Anchor. If any available, these are called Trust Intermediates\r\n- The Metadata of the subject at time of the issuance\r\n- The Trust Marks/Compliance-attestations of the subject at time of the issuance\r\n- The Policies published by Trust Anchor and its Intermediates to be applied to the issuer Metadata\r\n- The public keys related to the issuance protocol\r\n- the public keys related to the Trust Model attesting the Trust Relationship and the non revocation of the issuer at time of the issuance\r\n\r\nIt can be validated using the sole public key of the Trust Anchor.\r\n\r\nAll this, that's a lot, is efficiently contained in the Trust Chain, that's a JSON Array of JWS. Each JWS is binded with its siblings by claims, public keys and signatures. Using JWS singed with EC, I still don't have a comparison with X509 in term of storage but it is not small at all. But the point is not the size, but the features and the capabilities we have in the Trust Chain instead of the X509 certificate chain.  \r\n\r\n**Finally the answer to your question is:**\r\n\r\n**Since the public keys are not duplicated because they are self contained in the Entity Configuration (.well-known/openid-federation) and validate through the Trust Chain, the data doesn't require to be duplicated elsewhere**\r\n\r\nAnd I want to continue discussing the requirement of external endpoints for JWKS, below.\r\n\r\nOpenID Connect Federation enables the signed_jwks_uri, then .well-known/jwks can be pointed by this claim, with the sole requirement that its response must be signed, for the highest level of security of the Trust Model\r\n\r\nThe traditional approach based on TLS doesn't give non-repudiability of the attestations, since the jwks may change in the future and since these endpoints are not available in offline flows\r\n\r\nWhile TLS alone may work fine in the traditional digital identity infrastructure, where the trust is prestablished between an RP and an IDP, differently the Identity Wallets requires other paradigms regarding the Trust Establishment, where the concept of scalability, distribution and decentralization should consider how fundamental are the long lived static attestation of trust and how the \"decentralized storage\" requires the trust attestation to avoid the architectural need of a single registry with the historical information about all the issuers\r\n\r\n\r\n\r\n",
          "createdAt": "2023-05-14T17:27:31Z",
          "updatedAt": "2023-05-14T22:34:32Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Since the public keys are not duplicated because they are self contained in the Entity Configuration (.well-known/openid-federation) and validate through the Trust Chain, the data doesn't require to be duplicated elsewhere\r\n\r\nIf I understand your answer correctly, you say that .well-known/openid-federation is an alternative to .well-known/jwt-issuer, right?",
          "createdAt": "2023-05-16T10:46:59Z",
          "updatedAt": "2023-05-16T10:46:59Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "NONE",
          "body": "Yes, definitively a different approach\r\n\r\nThe solution is the one that satisfies all the requirements and represents the best solution\r\n\r\nwhile the alternative should map the implications that entails in relation to the requirements",
          "createdAt": "2023-05-17T08:26:44Z",
          "updatedAt": "2023-05-17T08:26:44Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "After a discussion on the editor's call, we decided to close this issue.\r\n\r\nThe VC-SD-JWT spec does not define every possible mechanism how to obtain the public key to perform issuer authentication, i.e. verify the signature of the JWT. It intentionally says that other mechanisms are supported that are defined outside of this specification. One such mechanism is using OIDC Federation. If there is a need to define how OIDC Federation can be leveraged to verify the SD-JWT, then this should be done in the OpenID hi-assurance profile.",
          "createdAt": "2023-05-23T08:33:03Z",
          "updatedAt": "2023-05-23T08:33:03Z"
        }
      ]
    },
    {
      "number": 42,
      "id": "I_kwDOJbVClc5l-Sws",
      "title": "CWT proof requirements",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/42",
      "state": "CLOSED",
      "author": "TakahikoKawasaki",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "discuss"
      ],
      "body": "Regarding the proof in a credential request defined in OID4VCI. The \"[Proof Types](https://openid.bitbucket.io/connect/openid-4-verifiable-credential-issuance-1_0.html#name-proof-types)\" section in the current snapshot of the specification lists JWT proof requirements and CWT proof requirements as follows.\r\n\r\n### JWT proof requirements:\r\n\r\n- `typ`\r\n- `alg`\r\n- `kid`\r\n- `jwk`\r\n- `x5c`\r\n- `iss`\r\n- `aud`\r\n- `iat`\r\n- `nonce`\r\n\r\n### CWT proof requirements:\r\n\r\n- Label 1 (`alg`)\r\n- Label 3 (`content type`)\r\n- Label COSE_Key\r\n- Label 33 (`x5chain`)\r\n- Claim Key 3 (`aud`)\r\n- Claim Key 6 (`iat`)\r\n- Claim Key 10 (`Nonce`)\r\n\r\nThe CWT proof does not have requirements that correspond to `kid` and `iss` requirements for the JWT proof. Is this difference intentional?",
      "createdAt": "2023-05-15T21:06:02Z",
      "updatedAt": "2023-05-18T06:28:06Z",
      "closedAt": "2023-05-17T19:16:28Z",
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Can you clarify how this would relate to the VC-SD-JWT specification? Or does this relate to OpenID4VCI only?",
          "createdAt": "2023-05-16T08:30:09Z",
          "updatedAt": "2023-05-16T08:30:09Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@TakahikoKawasaki That is a good question. May I ask you to raise this issue on the OID4VCI spec?",
          "createdAt": "2023-05-16T10:44:15Z",
          "updatedAt": "2023-05-16T10:44:15Z"
        },
        {
          "author": "TakahikoKawasaki",
          "authorAssociation": "NONE",
          "body": "**openid/connect issue 1932: [OID4VCI] CWT proof requirements**\r\nhttps://bitbucket.org/openid/connect/issues/1932/oid4vci-cwt-proof-requirements",
          "createdAt": "2023-05-16T12:16:15Z",
          "updatedAt": "2023-05-16T12:16:15Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "will clarify in VCI",
          "createdAt": "2023-05-17T19:16:28Z",
          "updatedAt": "2023-05-17T19:16:28Z"
        },
        {
          "author": "TakahikoKawasaki",
          "authorAssociation": "NONE",
          "body": "Moving this topic to the AB/Connect WG.",
          "createdAt": "2023-05-18T06:28:05Z",
          "updatedAt": "2023-05-18T06:28:05Z"
        }
      ]
    },
    {
      "number": 43,
      "id": "I_kwDOJbVClc5mA7wr",
      "title": "Terms and definitions should refer to SD-JWT spec definitions",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/43",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "awoie"
      ],
      "labels": [
        "HAS PR",
        "individual-00"
      ],
      "body": "",
      "createdAt": "2023-05-16T08:31:57Z",
      "updatedAt": "2023-05-23T11:04:05Z",
      "closedAt": "2023-05-23T11:04:05Z",
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Add one sentence that terms such as Issuer, Holder, Verifier etc. are used in the same way as in SD-JWT.",
          "createdAt": "2023-05-23T08:35:01Z",
          "updatedAt": "2023-05-23T08:35:01Z"
        }
      ]
    },
    {
      "number": 44,
      "id": "I_kwDOJbVClc5mBAJ_",
      "title": "Fix media type declaration to include application/",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/44",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "awoie"
      ],
      "labels": [
        "individual-00"
      ],
      "body": "",
      "createdAt": "2023-05-16T08:39:40Z",
      "updatedAt": "2023-05-22T13:57:53Z",
      "closedAt": "2023-05-22T13:57:53Z",
      "comments": []
    },
    {
      "number": 45,
      "id": "I_kwDOJbVClc5mBB3A",
      "title": "Avoid and rename Credential based on SD-JWT",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/45",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "awoie"
      ],
      "labels": [
        "HAS PR",
        "individual-00"
      ],
      "body": "Try to find a new term.",
      "createdAt": "2023-05-16T08:43:38Z",
      "updatedAt": "2023-05-25T11:35:39Z",
      "closedAt": "2023-05-25T11:35:39Z",
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Introduce and use the term \"unsecured payload\" instead of payload or credential to refer to the input JSON document.\r\n\r\nWe cannot use payload because it would lead to confusion since the payload of the SD-JWT might not even contain all the claims and only the hashes.",
          "createdAt": "2023-05-23T08:39:32Z",
          "updatedAt": "2023-05-23T08:39:32Z"
        }
      ]
    },
    {
      "number": 46,
      "id": "I_kwDOJbVClc5mBD6T",
      "title": "Add validation rules and processing for VPs",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/46",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "awoie"
      ],
      "labels": [
        "individual-00"
      ],
      "body": "Section is empty atm",
      "createdAt": "2023-05-16T08:48:11Z",
      "updatedAt": "2023-05-22T13:57:52Z",
      "closedAt": "2023-05-22T13:57:52Z",
      "comments": []
    },
    {
      "number": 47,
      "id": "I_kwDOJbVClc5mBESF",
      "title": "Add first version of security considerations",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/47",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "danielfett"
      ],
      "labels": [
        "individual-??"
      ],
      "body": "",
      "createdAt": "2023-05-16T08:49:09Z",
      "updatedAt": "2023-09-13T11:03:01Z",
      "closedAt": "2023-09-13T11:03:01Z",
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Add reference to Security Considerations in SD-JWT\r\n",
          "createdAt": "2023-09-08T13:37:13Z",
          "updatedAt": "2023-09-08T13:37:13Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "E.g.:\r\n\r\n* SSRF with Issuer URI",
          "createdAt": "2023-09-08T13:37:37Z",
          "updatedAt": "2023-09-08T13:37:37Z"
        }
      ]
    },
    {
      "number": 48,
      "id": "I_kwDOJbVClc5mBEYJ",
      "title": "Add first version of privacy considerations",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/48",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "awoie"
      ],
      "labels": [
        "individual-01",
        "Ready-for-PR"
      ],
      "body": "",
      "createdAt": "2023-05-16T08:49:21Z",
      "updatedAt": "2023-09-21T09:28:00Z",
      "closedAt": "2023-09-21T09:27:59Z",
      "comments": [
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think this section should point out that VC SD-JWTs per se are linkable and what the suggested strategies are to cope with that (e.g. ephemeral SD-JWT VCs). ",
          "createdAt": "2023-05-28T10:12:38Z",
          "updatedAt": "2023-05-28T10:12:38Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #164 got merged",
          "createdAt": "2023-09-21T09:27:59Z",
          "updatedAt": "2023-09-21T09:27:59Z"
        }
      ]
    },
    {
      "number": 49,
      "id": "I_kwDOJbVClc5mBFvl",
      "title": "Add ack section",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/49",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "awoie"
      ],
      "labels": [
        "individual-00"
      ],
      "body": "",
      "createdAt": "2023-05-16T08:52:44Z",
      "updatedAt": "2023-05-16T11:21:31Z",
      "closedAt": "2023-05-16T11:21:30Z",
      "comments": []
    },
    {
      "number": 50,
      "id": "I_kwDOJbVClc5mBGD-",
      "title": "Add version section",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/50",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "awoie"
      ],
      "labels": [
        "individual-00"
      ],
      "body": "",
      "createdAt": "2023-05-16T08:53:30Z",
      "updatedAt": "2023-05-16T11:21:31Z",
      "closedAt": "2023-05-16T11:21:31Z",
      "comments": []
    },
    {
      "number": 51,
      "id": "I_kwDOJbVClc5mBGqg",
      "title": "Remove notices section",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/51",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "awoie"
      ],
      "labels": [
        "individual-00"
      ],
      "body": "",
      "createdAt": "2023-05-16T08:54:32Z",
      "updatedAt": "2023-05-16T11:21:31Z",
      "closedAt": "2023-05-16T11:21:31Z",
      "comments": []
    },
    {
      "number": 57,
      "id": "I_kwDOJbVClc5mVXSk",
      "title": "Support for multiple VCs in one VP",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/57",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "pending close"
      ],
      "body": "We should describe how multiple VCs and VPs can be combined in one VP.",
      "createdAt": "2023-05-19T08:46:19Z",
      "updatedAt": "2023-05-23T08:48:09Z",
      "closedAt": "2023-05-23T08:48:09Z",
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Would the following make sense?\r\n\r\n```\r\n{\r\n  \"@context\": [\r\n    \"https://www.w3.org/2018/credentials/v1\"\r\n  ],\r\n  \"type\": \u201cVerifiable\u201dPresentation,\r\n  \"verifiableCredential\": [ \r\n     \u201cb64-(sd-jwt-combined-format-4-persenation)-#1\u201d,\r\n     \u201cb64-(sd-jwt-combined-format-4-persenation)-#2\u201d \r\n  ]\r\n}\r\n```",
          "createdAt": "2023-05-19T08:53:15Z",
          "updatedAt": "2023-05-19T08:53:15Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "After thinking about this a bit more, I'd say that this doesn't have to be solved in the VC-SD-JWT spec. It should be solved at the protocol level, e.g., OpenID4VP where the `vp_token` would contain an array of VP-SD-JWTs.",
          "createdAt": "2023-05-19T09:26:04Z",
          "updatedAt": "2023-05-19T09:26:17Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "+1\n\nNo need for another envelope.\nOn 19. May 2023 at 11:26 +0200, Oliver Terbu ***@***.***>, wrote:\n> After thinking about this a bit more, I'd say that this doesn't have to be solved in the VC-SD-JWT spec. It should be solved at the protocol level, e.g., OpenID4VP where the vp_token would contain an array of VP-SD-JWTs.\n> \u2014\n> Reply to this email directly, view it on GitHub, or unsubscribe.\n> You are receiving this because you are subscribed to this thread.Message ID: ***@***.***>\n",
          "createdAt": "2023-05-19T18:10:49Z",
          "updatedAt": "2023-05-19T18:10:49Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "As discussed in our call, this should not be handled by our specification. ",
          "createdAt": "2023-05-22T09:05:46Z",
          "updatedAt": "2023-05-22T09:05:46Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "As discussed on the editor's call (5/23), closing this issue since no longer needed.",
          "createdAt": "2023-05-23T08:48:09Z",
          "updatedAt": "2023-05-23T08:48:09Z"
        }
      ]
    },
    {
      "number": 58,
      "id": "I_kwDOJbVClc5mVl8y",
      "title": "Describe HB-JWT for VPs",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/58",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The SD-JWT spec does not define how to construct the HB-JWT. It would be nice if the HB-JWT could bind the signature to the transaction, i.e., the rest of the SD-JWT combined format for presentation. I'd suggest, we define the following payload for the HB-JWT:\r\n\r\n```\r\n{\r\n  \"nonce\": \"123456\",\r\n  \"aud\": \"https://rp.com\",\r\n  \"iat\": 12345,\r\n  \"exp\": 123456,\r\n  \"_tx_hash\": sha256(<sd-jwt>~<d1>~...~<dn>)\r\n}\r\n```",
      "createdAt": "2023-05-19T09:29:54Z",
      "updatedAt": "2023-05-22T13:57:52Z",
      "closedAt": "2023-05-22T13:57:52Z",
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Because the HB-JWT does not sign any other disclosures, any non-repudiation attacks are not possible.",
          "createdAt": "2023-05-19T11:49:05Z",
          "updatedAt": "2023-05-19T11:49:05Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Note that also SD-JWT will be more specific on the HB JWT: https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/262",
          "createdAt": "2023-05-22T09:09:57Z",
          "updatedAt": "2023-05-22T09:09:57Z"
        }
      ]
    },
    {
      "number": 60,
      "id": "I_kwDOJbVClc5mWOEx",
      "title": "Add additional claims for validFrom / validUntil",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/60",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "pending close",
        "individual-??"
      ],
      "body": "Discuss whether this is needed.",
      "createdAt": "2023-05-19T11:31:57Z",
      "updatedAt": "2023-06-22T09:50:38Z",
      "closedAt": "2023-06-22T09:50:38Z",
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "NONE",
          "body": "I'd pose the attention to the requirement of non repudiation for long lived credentials\r\n\r\nin OIDC Federation we have defined the historical key registry with iat and exp but also revocation status \r\nhttps://openid.net/specs/openid-connect-federation-1_0.html#name-federation-historical-keys-re\r\n\r\nbut, if the response of .well-known/jwt-issuer is in plain application/json and not signed, it is impossibile have a proof that at time T-n that issuer has those key, unless a Trusted Third Party publishes all the historical keys of the participants and the response of the jwt-issuer endpoint should be signed\r\n\r\nthis give the proof that issuer X has that metadata and that jwks at time X, since there is a signed artifact that attests that and its signature is verifiable using the historical keys hosted by a trusted third party\r\n\r\nif non repudiation is a requirement also for you, I'd approach this problem asap  ",
          "createdAt": "2023-05-21T00:31:07Z",
          "updatedAt": "2023-05-21T00:31:07Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "historical keys is not a requirement yet, we want to keep .well-known/jwt-issuer as simple as possible (more or less bringing the OpenID Connect key resolution to VCs). ",
          "createdAt": "2023-05-22T07:25:43Z",
          "updatedAt": "2023-05-22T07:26:34Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Depending on the outcome of the W3C VCWG Miami resolution, we might actually just get rid of the translation algorithm. And then we will need to define `exp`, `iat` and `nbf` relating only to the signature (or proof) of the verifiable credential. Implementer's will then be able to use their own claims, e.g., issue_date, expiry_date (see mDL), to express the validity period of the underlying document.",
          "createdAt": "2023-05-25T08:33:51Z",
          "updatedAt": "2023-05-25T08:33:51Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this issue if no further discussion. Direction is that exp, iat, nbf are proof-specific claims. Document-specific claims may be introduced based on the type and is out of scope of this spec. ",
          "createdAt": "2023-06-22T09:50:38Z",
          "updatedAt": "2023-06-22T09:50:38Z"
        }
      ]
    },
    {
      "number": 62,
      "id": "I_kwDOJbVClc5mfx5b",
      "title": "Do we really need to explain that in lengths?",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/62",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "              Do we really need to explain that in lengths?\r\n\r\n_Originally posted by @tlodderstedt in https://github.com/vcstuff/draft-terbu-sd-jwt-vc/pull/61#discussion_r1200389171_\r\n            ",
      "createdAt": "2023-05-22T12:38:26Z",
      "updatedAt": "2023-05-22T12:39:08Z",
      "closedAt": "2023-05-22T12:38:59Z",
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "accidentally created",
          "createdAt": "2023-05-22T12:39:07Z",
          "updatedAt": "2023-05-22T12:39:07Z"
        }
      ]
    },
    {
      "number": 63,
      "id": "I_kwDOJbVClc5mfyCi",
      "title": "Shorten intro section",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/63",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "danielfett"
      ],
      "labels": [
        "HAS PR",
        "individual-00"
      ],
      "body": "> in the JWT, in the three-party-model as described above. This is a common problem\r\nin the three-party model: An Issuer creates a Verifiable Credential for\r\nsome End-User (Holder), who then presents this credential to multiple Verifiers.\r\nA Verifiable Credential might contain a large number of claims, but the Holder\r\n\r\nWe should short this as suggested by @tlodderstedt \r\n\r\n _Originally posted by @tlodderstedt in https://github.com/vcstuff/draft-terbu-sd-jwt-vc/pull/61#discussion_r1200389171_",
      "createdAt": "2023-05-22T12:38:50Z",
      "updatedAt": "2023-05-25T08:37:33Z",
      "closedAt": "2023-05-25T08:37:33Z",
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Relates to #71 ",
          "createdAt": "2023-05-23T09:51:09Z",
          "updatedAt": "2023-05-23T09:51:09Z"
        }
      ]
    },
    {
      "number": 64,
      "id": "I_kwDOJbVClc5mf2mP",
      "title": "Rename VP-SD-JWTs",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/64",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "awoie"
      ],
      "labels": [
        "HAS PR",
        "individual-00"
      ],
      "body": "> presentation of VC-SD-JWTs\r\n\r\nDiscuss better term than VP-SD-JWTs. VP-SD-JWTs could be an acronym for the above.",
      "createdAt": "2023-05-22T12:51:02Z",
      "updatedAt": "2023-05-25T13:41:12Z",
      "closedAt": "2023-05-25T13:41:12Z",
      "comments": [
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think the term VP-SD-JWT and especially the media type vp+sd-jwt are not appropriate there is no distinct element in SD-JWT that is \"THE\" VP. I suggest to change the wording to \"presentation of a vc-sd-jwt\" and drop the media type.",
          "createdAt": "2023-05-22T12:58:59Z",
          "updatedAt": "2023-05-22T12:58:59Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "The OpenID4VP spec refers to Verifiable Presentations in the vp_token. Wouldn't it make sense to stick to that terminology? This will allow us to use VP-SD-JWTs more seamlessly with other specs. Would you agree?",
          "createdAt": "2023-05-22T15:47:41Z",
          "updatedAt": "2023-05-22T15:47:41Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "That's a good question. I just checked and we don't use the term Verifiable Presentation in conjunction with mdoc. So I think we don't need to use it here either. ",
          "createdAt": "2023-05-23T07:39:29Z",
          "updatedAt": "2023-05-23T07:39:29Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Perhaps we should create an issue in OpenID4VP to make it more clear what can be included in the vp_token?",
          "createdAt": "2023-05-23T07:51:06Z",
          "updatedAt": "2023-05-23T07:51:06Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "So, this means we will not focus on verifiable presentations at all. We would only speak about presentations of VCs. Is this correct?",
          "createdAt": "2023-05-25T09:43:44Z",
          "updatedAt": "2023-05-25T09:43:44Z"
        }
      ]
    },
    {
      "number": 65,
      "id": "I_kwDOJbVClc5mf5ou",
      "title": "change wording around presentation of VC-SD-JWT",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/65",
      "state": "CLOSED",
      "author": "tlodderstedt",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I think the term VP-SD-JWT and especially the media type `vp+sd-jwt` are not appropriate there is no distinct element in SD-JWT that is \"THE\" VP. I suggest to change the wording to \"presentation of a vc-sd-jwt\" and drop the media type.  ",
      "createdAt": "2023-05-22T12:58:11Z",
      "updatedAt": "2023-05-23T08:52:59Z",
      "closedAt": "2023-05-23T08:52:59Z",
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this issue since duplicate of #64 ",
          "createdAt": "2023-05-23T08:52:59Z",
          "updatedAt": "2023-05-23T08:52:59Z"
        }
      ]
    },
    {
      "number": 66,
      "id": "I_kwDOJbVClc5mgZeK",
      "title": "Do we have to limit potential cnf values?",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/66",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "@Sakurann suggested the following text:\r\n> It MUST contain a JWK as defined in Section 3.2 of [@!RFC7800]. Other representations of the key MUST NOT be used. \"kid\" (Key ID) member MUST be present in the JWK. Holder Binding JWT in the Combined Format for Presentation MUST be signed by the key identified in this claim.\r\n\r\nIMO, a limitation is not needed. The hi-assurance profile can introduce such a limitation though.",
      "createdAt": "2023-05-22T14:02:51Z",
      "updatedAt": "2023-05-25T11:50:50Z",
      "closedAt": "2023-05-25T11:50:50Z",
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Waiting for your feedback in PR #15 conversation. We can then close this issue.",
          "createdAt": "2023-05-23T08:53:45Z",
          "updatedAt": "2023-05-23T08:53:45Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "We can close this because completed due to PR #15 ",
          "createdAt": "2023-05-25T11:50:50Z",
          "updatedAt": "2023-05-25T11:50:50Z"
        }
      ]
    },
    {
      "number": 69,
      "id": "I_kwDOJbVClc5mm0PJ",
      "title": "Fix how three-party-model relates to VCDM 2.0 in intro section",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/69",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "awoie"
      ],
      "labels": [
        "HAS PR",
        "individual-00"
      ],
      "body": "",
      "createdAt": "2023-05-23T07:54:37Z",
      "updatedAt": "2023-05-25T08:40:54Z",
      "closedAt": "2023-05-25T08:40:54Z",
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "As agreed on the editor's call (5/23), the following ...\r\n\r\n> The three-party-model, i.e., actors, Verifiable Credentials and Verifiable Presentations, are further described in [VCDM2.0]. However, this specification focuses on a specific version of the three-party-model which can have different features but will provide a representation of the model described in [VCDM2.0].\r\n\r\nshould become ...\r\n\r\n> The three-party-model, i.e., actors, Verifiable Credentials and Verifiable Presentations, is also described in [VCDM2.0]. However, this specification provides a specific format of Verifiable Credentials which deviates from the format described in [VCDM2.0] to create Verifiable Credentials based on SD-JWT and JSON payloads but a translation algorithm is provided in this specification.\r\n\r\n",
          "createdAt": "2023-05-23T09:00:03Z",
          "updatedAt": "2023-05-23T09:00:03Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm still confused why we need this text at all. What people will basically get is \"this spec **deviates** from the VCDM 2.0\".",
          "createdAt": "2023-05-23T19:14:22Z",
          "updatedAt": "2023-05-23T19:14:22Z"
        }
      ]
    },
    {
      "number": 70,
      "id": "I_kwDOJbVClc5mm2IA",
      "title": "Is VC-SD-JWT the right term?",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/70",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "awoie"
      ],
      "labels": [
        "HAS PR",
        "individual-00"
      ],
      "body": "The current spec defines the following:\r\n\r\n> Verifiable Credential based on SD-JWT (VC-SD-JWT):\r\n> A Verifiable Credential encoded using the Issuance format defined in SD-JWT\r\n\r\nVC-SD-JWT seems like the logical acronym and since it is an acronym similar to SD-JWT, why wouldn't we use VC-SD-JWT as the short term in the spec?\r\n\r\n@Sakurann would you agree? You raised this concern in this PR #68 \r\n\r\n",
      "createdAt": "2023-05-23T07:59:09Z",
      "updatedAt": "2023-05-23T11:04:06Z",
      "closedAt": "2023-05-23T11:04:06Z",
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "As discussed on the editor's call (5/23) we will rename VC-SD-JWT in \"Selective Disclosure JWT-based Verifiable Credentials\" or short (SD-JWT VC)",
          "createdAt": "2023-05-23T09:02:52Z",
          "updatedAt": "2023-05-23T09:02:52Z"
        }
      ]
    },
    {
      "number": 71,
      "id": "I_kwDOJbVClc5mm9vu",
      "title": "Can we make the introduction more concise?",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/71",
      "state": "CLOSED",
      "author": "tlodderstedt",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "danielfett"
      ],
      "labels": [
        "individual-00"
      ],
      "body": "I'm not sure whether we really need a comprehensive description of the issuer-holder-verifier model. I think what is needed is a description why JWT is not suitable and why SD-JWT is to motivate VC-SD-JWT. \r\n\r\nNote: we also have a duplication of term definitions between intro and terminology section",
      "createdAt": "2023-05-23T08:17:40Z",
      "updatedAt": "2023-05-25T11:32:02Z",
      "closedAt": "2023-05-25T11:32:02Z",
      "comments": []
    },
    {
      "number": 73,
      "id": "I_kwDOJbVClc5mnq5l",
      "title": "Fix format of transformation algo",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/73",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "individual-00"
      ],
      "body": "In the rendered HTML, the entire algo appears in one paragraph. The mmark is probably broken and has to be fixed.",
      "createdAt": "2023-05-23T09:52:36Z",
      "updatedAt": "2023-05-23T11:18:23Z",
      "closedAt": "2023-05-23T11:18:23Z",
      "comments": []
    },
    {
      "number": 75,
      "id": "I_kwDOJbVClc5mopEU",
      "title": "Example for JWT Issuer Metadata should contain kid as recommended",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/75",
      "state": "CLOSED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [
        "awoie"
      ],
      "labels": [
        "individual-00"
      ],
      "body": "",
      "createdAt": "2023-05-23T12:08:48Z",
      "updatedAt": "2023-05-25T11:47:19Z",
      "closedAt": "2023-05-25T11:47:19Z",
      "comments": []
    },
    {
      "number": 81,
      "id": "I_kwDOJbVClc5mzaM0",
      "title": "Move flow diagram to intro section",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/81",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "awoie"
      ],
      "labels": [
        "HAS PR",
        "individual-00"
      ],
      "body": "",
      "createdAt": "2023-05-24T21:18:46Z",
      "updatedAt": "2023-05-24T21:25:24Z",
      "closedAt": "2023-05-24T21:25:24Z",
      "comments": []
    },
    {
      "number": 89,
      "id": "I_kwDOJbVClc5m3NbB",
      "title": "Require `cnf` when holder binding is needed",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/89",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "awoie"
      ],
      "labels": [
        "HAS PR",
        "individual-00"
      ],
      "body": "The current language is not precise enough",
      "createdAt": "2023-05-25T12:41:28Z",
      "updatedAt": "2023-05-25T13:44:42Z",
      "closedAt": "2023-05-25T13:44:41Z",
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "closing this because #91 got mergd",
          "createdAt": "2023-05-25T13:44:41Z",
          "updatedAt": "2023-05-25T13:44:41Z"
        }
      ]
    },
    {
      "number": 93,
      "id": "I_kwDOJbVClc5m4T03",
      "title": "Introduction description on Status Provider",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/93",
      "state": "CLOSED",
      "author": "paulbastian",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "individual-03"
      ],
      "body": "The spec says:\r\n\r\n> To support revocation of Verifiable Credentials, an optional fourth party can be involved, a Status Provider, who delivers revocation information to Verifiers. (The Verifier can also serve as the Status Provider.)\r\n\r\nI think this is not optimal, as\r\n1. revocation is just an example of status\r\n2. Status Providers do not need to be a fourth party\r\n3. Verifiers are usually not the status provider but the issuer?\r\n\r\nI would suggest:\r\n\"To make status information of a Verifiable Credential after its issuance available, an optional Status Provider can provide status data, e.g. revocation. The role of the Status Provider can be assigned to the Issuer or an optional fourth party.\"",
      "createdAt": "2023-05-25T15:22:33Z",
      "updatedAt": "2023-06-22T09:50:58Z",
      "closedAt": "2023-06-22T09:50:58Z",
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "@paulbastian Since we merge https://github.com/vcstuff/draft-terbu-sd-jwt-vc/pull/122, can we close this issue?",
          "createdAt": "2023-06-21T13:59:44Z",
          "updatedAt": "2023-06-21T13:59:44Z"
        },
        {
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes",
          "createdAt": "2023-06-21T16:22:57Z",
          "updatedAt": "2023-06-21T16:22:57Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing since #122 got merged.",
          "createdAt": "2023-06-22T09:50:58Z",
          "updatedAt": "2023-06-22T09:50:58Z"
        }
      ]
    },
    {
      "number": 94,
      "id": "I_kwDOJbVClc5m4Vnz",
      "title": "Introduction description on Rationale",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/94",
      "state": "CLOSED",
      "author": "paulbastian",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "paulbastian"
      ],
      "labels": [
        "individual-01"
      ],
      "body": "The spec says:\r\n\r\n> However, JWT-based credentials do not support selective disclosure, i.e., the ability for a Holder to disclose only a subset of the claims contained in the JWT, which is a requirement to implement the three-party-model efficiently.\r\n\r\nIn my opinion this is not correct, because the text basically says: \"JWT-based credentials do not support selective disclosure [...] which is a requirement to implement the three-party-model efficiently\". Imo the need for SD-JWT comes from the shift from IdP to three-party-model.\r\n\r\nMy proposal:\r\n\"While JWT-based credentials enable selective disclosure, i.e., the ability for a holder to disclose only a subset of the contained claims, in an Identity Provider ecosystem by issuing new JWTs to the Verifier for every presentation, this approach does not work in the three-party-model.\"\r\n",
      "createdAt": "2023-05-25T15:26:11Z",
      "updatedAt": "2023-05-26T09:31:56Z",
      "closedAt": "2023-05-26T09:31:56Z",
      "comments": [
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "+1",
          "createdAt": "2023-05-25T15:32:32Z",
          "updatedAt": "2023-05-25T15:32:32Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "@paulbastian do you want to create the PR? Or should I create the PR?",
          "createdAt": "2023-05-25T15:36:09Z",
          "updatedAt": "2023-05-25T15:36:09Z"
        },
        {
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "body": "I can do, just wanted to make sure its not for waste. Issue is less effort ;P",
          "createdAt": "2023-05-25T15:46:04Z",
          "updatedAt": "2023-05-25T15:46:04Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #95 got merged, closing this.",
          "createdAt": "2023-05-26T09:09:54Z",
          "updatedAt": "2023-05-26T09:09:54Z"
        }
      ]
    },
    {
      "number": 96,
      "id": "I_kwDOJbVClc5m4lTY",
      "title": "Editorial change of headers/text regarding Data Format",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/96",
      "state": "CLOSED",
      "author": "paulbastian",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "individual-01",
        "Ready-for-PR"
      ],
      "body": "I found several minor issues here:\r\n\r\nThe spec has the following headlines:\r\n\r\n>  4.2.1. Header Parameters\r\n    4.2.2 Claims\r\n\r\nComparing this to RFC7519 JWT these should be:\r\n4.2.1 JOSE Header\r\n4.2.2 JWT Claims Set\r\n\r\nAlso, in 4.2.2.1 type claim `StringOrURI` is never explained. This should be added to the Terminology. Its also missing a link to the Annex A.1.",
      "createdAt": "2023-05-25T16:07:36Z",
      "updatedAt": "2023-09-08T13:47:21Z",
      "closedAt": "2023-09-08T13:47:20Z",
      "comments": [
        {
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "body": "Additionally, headline 4.2.2.1 would better fit saying \"New JWT Claims\"?",
          "createdAt": "2023-05-25T16:15:07Z",
          "updatedAt": "2023-05-25T16:15:07Z"
        }
      ]
    },
    {
      "number": 97,
      "id": "I_kwDOJbVClc5m4pfO",
      "title": "Why is kid mandatory for cnf claims?",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/97",
      "state": "CLOSED",
      "author": "paulbastian",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Ready-for-PR",
        "individual-03"
      ],
      "body": "The spec says:\r\n\r\n> cnf\r\nREQUIRED when Cryptographic Holder Binding is to be supported. Contains the confirmation method as defined in [[RFC7800](https://vcstuff.github.io/draft-terbu-sd-jwt-vc/draft-terbu-sd-jwt-vc.html#RFC7800)]. It SHOULD contain a JWK as defined in Section 3.2 of [[RFC7800](https://vcstuff.github.io/draft-terbu-sd-jwt-vc/draft-terbu-sd-jwt-vc.html#RFC7800)] and in this case, the kid (Key ID) member MUST be present in the JWK. For Cryptographic Holder Binding, the Holder Binding JWT in the Combined Format for Presentation MUST be signed by the key identified in this claim.\r\n\r\nI don't see why `kid` is a MUST.\r\nMoreover, the example in 4.3 does not include the `kid`, so either the text or the exampel is wrong.",
      "createdAt": "2023-05-25T16:19:05Z",
      "updatedAt": "2023-07-03T14:48:33Z",
      "closedAt": "2023-07-03T14:48:33Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Yeah, the `kid` member in the cnf JWK shouldn't be a MUST. It probably shouldn't be mentioned at all. ",
          "createdAt": "2023-05-26T21:36:36Z",
          "updatedAt": "2023-05-26T21:36:36Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "@bc-pi @paulbastian The reason why it is there is to avoid ambiguities between the key that signs the key binding (holder binding) JWT and the potential inclusion of a cnf `kid`. If you think that there is no issue, we can remove this requirement from the spec. IMO, RFC7800 doesn't say that this is the case but I might be missing something.\r\n\r\nAlternatively, we could say, that `kid` and `jwk` SHOULD be present.",
          "createdAt": "2023-06-21T14:19:14Z",
          "updatedAt": "2023-06-21T14:19:14Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I honestly don't follow what ambiguity there might be...\r\n\r\nA `cnf` claim with the `jwk` member (having only the required parameters) unambiguously has the whole public key that corresponds to the private key that signs the Key Binding JWT. That's it. And that's sufficient. That's what all the examples in SD-JWT have (like [this one](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-04.html#section-5.2-4)) by the way. And as @paulbastian pointed out, the [example in SD-JWT VC](https://datatracker.ietf.org/doc/html/draft-terbu-sd-jwt-vc-02#section-4.3-4) is the same (a `cnf` with a `jwk` having only the required parameters). \r\n\r\nThe text, \"and in this case, the kid (Key ID) member MUST be present in the JWK\" can just be removed from the spec. \r\n",
          "createdAt": "2023-06-21T16:13:09Z",
          "updatedAt": "2023-06-21T19:21:27Z"
        },
        {
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "body": "@awoie I don't understand your concerns. Can you provide examples?",
          "createdAt": "2023-06-21T19:17:49Z",
          "updatedAt": "2023-06-21T19:17:49Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "I think we are good here and we should remove the `kid` requirement as @bc-pi suggested. \r\n\r\nEspecially because we have the following requirement...\r\n\r\n> Holder Binding, the Holder Binding JWT in the Combined Format for Presentation MUST be signed by the key identified in this claim.\r\n\r\nMy concern was that technically the following is possible as well:\r\n\r\n```\r\n\"cnf\": {\r\n  \"kid\": \"some-kid-1\",\r\n  \"jwk\": {\r\n    \"kid\": \"another-kid-2\",\r\n    ....\r\n  }\r\n}\r\n```\r\n\r\nThat could lead to ambiguities and the verifier might need to test both confirmation method to verify the key binding JWT. If this is not possible by another requirement in either RFC7800 or the SD-JWT draft, then I might have overlooked that.",
          "createdAt": "2023-06-22T08:47:00Z",
          "updatedAt": "2023-06-22T08:47:00Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Needs PR to remove requirements on `kid` in `cnf`.",
          "createdAt": "2023-06-22T09:54:50Z",
          "updatedAt": "2023-06-22T09:54:50Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #141 removes requirements to have kid in jwk in cnf\r\n\r\n@awoie I think you are right that RFC7800 doesn't strictly prohibit something like that but it seems generally understood and I've never encountered a cnf claim with more than one member in it  \r\n",
          "createdAt": "2023-06-23T21:51:00Z",
          "updatedAt": "2023-06-23T21:51:00Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't think RFC7800 allows for multiple JWKs in one `cnf` claim: https://www.rfc-editor.org/rfc/rfc7800#section-3.2\r\n\r\nand I think it indirectly prohibits the following example Oliver is concerned with because section 3.2 limits cnf claim with only jwk member and only mentions that that jwk member may contain a `kid`:\r\n```\r\n\"cnf\": {\r\n  \"kid\": \"some-kid-1\",\r\n  \"jwk\": {\r\n    \"kid\": \"another-kid-2\",\r\n    ....\r\n  }\r\n}\r\n```\r\n\r\nso all good removing kid requirement with jwk member in cnf claim",
          "createdAt": "2023-06-28T18:02:23Z",
          "updatedAt": "2023-06-28T18:02:23Z"
        }
      ]
    },
    {
      "number": 98,
      "id": "I_kwDOJbVClc5m4s-p",
      "title": "Are we missing a chapter on creation?",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/98",
      "state": "CLOSED",
      "author": "paulbastian",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "discuss"
      ],
      "body": "While RFC7519 on JWTs has a chapter on Creation of JWTs, the SD-JWT and this spec jump right to Examples on continue with guideline for presentation/verification. Do you see any need for such a Creation chapter/section?",
      "createdAt": "2023-05-25T16:30:24Z",
      "updatedAt": "2023-06-22T09:56:24Z",
      "closedAt": "2023-06-22T09:56:24Z",
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "IMO, it is not needed. \r\n\r\nWe have the following language already:\r\n> SD-JWT VCs MUST be encoded using the SD-JWT Combined Format for Issuance as defined in Section 5.3. of [I-D.ietf-oauth-selective-disclosure-jwt].\r\n\r\n> A presentation of an SD-JWT VC MUST be encoded using the SD-JWT Combined Format for Presentation as defined in Section 5.4. of [I-D.ietf-oauth-selective-disclosure-jwt].\r\n\r\nAdding that section is not adding anything valuable in my mind, it would really just be something like \"create an SD-JWT according to I-D.ietf-oauth-selective-disclosure-jwt, which is already implicitly contained in the statements above. If other people really feel strongly about requiring that extra guidance, I'm happy to add those sections, otherwise, I'd say it is not needed.",
          "createdAt": "2023-06-21T14:27:55Z",
          "updatedAt": "2023-06-21T14:27:55Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "How SD-JWTs are created is well defined in the SD-JWT spec. There is no need to have a section on creating SD-jWTs here.",
          "createdAt": "2023-06-22T09:56:24Z",
          "updatedAt": "2023-06-22T09:56:24Z"
        }
      ]
    },
    {
      "number": 99,
      "id": "I_kwDOJbVClc5m40I4",
      "title": "Header Section kid parameter",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/99",
      "state": "CLOSED",
      "author": "paulbastian",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "danielfett"
      ],
      "labels": [
        "individual-01",
        "Ready-for-PR"
      ],
      "body": "Section 5 describes how to use `iss` and well-known directory to fetch the issuer key and verify the VC.\r\nIn my opinion it makes sense to name the `kid` parameter as a SHOULD or MAY in section 4.2.1 and make a link to Section 5.",
      "createdAt": "2023-05-25T16:54:00Z",
      "updatedAt": "2023-09-21T09:27:41Z",
      "closedAt": "2023-09-21T09:27:41Z",
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "NONE",
          "body": "the kid allows an easy lookup of the key, since it should not collide to any other kid value, it should be created according to rfc7638\r\nit is like a primary key in a sql schema, better having it and by default with a non colliding value",
          "createdAt": "2023-05-25T22:41:03Z",
          "updatedAt": "2023-05-25T22:41:03Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "There are different ways to convey key material in an SD-JWT VC. I thus would not add text specific to JWT Issuer Metadata in Section 4.2.1.. \r\n\r\nI would prefer if the metadata section would state something like \"if this mechanism is used, the issuer MAY need to add a kid to the signed VCs\". Otherwise, it is a back and force. ",
          "createdAt": "2023-05-28T10:10:00Z",
          "updatedAt": "2023-05-28T10:10:00Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "I think we should add an example to Section 5 that shows the header of an SD-JWT VC with a `kid`. There is no need to fix the example in Section 4.2.1 since the `kid` is only RECOMMENDED when using the JWT (VC) Issuer Metadata which is an OPTIONAL feature. \r\n\r\nFrom Section 5:\r\n>    It is RECOMMENDED that the JWT contains a kid JWT header parameter\r\n   that can be used to lookup the public key in the JWK Set included by\r\n   value or referenced in the JWT Issuer Metadata.",
          "createdAt": "2023-06-21T14:36:52Z",
          "updatedAt": "2023-06-21T14:36:52Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "As discussed on the SD-JWT VC editor's call today, we will add `kid` to the SD-JWT VC example. To do that, we would need to change the sd-jwt script since we cannot set JWT header params in the script config yet.\r\n\r\n@danielfett can you change that? We would need to add:\r\n\r\n```\r\n            \"kid\":\"doc-signer-05-25-2022\",\r\n```",
          "createdAt": "2023-09-08T13:58:18Z",
          "updatedAt": "2023-09-08T13:58:18Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Fixed by PR #167 ",
          "createdAt": "2023-09-21T09:27:41Z",
          "updatedAt": "2023-09-21T09:27:41Z"
        }
      ]
    },
    {
      "number": 101,
      "id": "I_kwDOJbVClc5m6VTu",
      "title": "jwt-issuer renamed to vc-jwt-issuer ",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/101",
      "state": "CLOSED",
      "author": "peppelinux",
      "authorAssociation": "NONE",
      "assignees": [
        "awoie"
      ],
      "labels": [
        "HAS PR",
        "pending close",
        "wg-02"
      ],
      "body": "Every entity in the OAuth/OpenID is potentially a JWT issuer, then I found the name of this endpoint misleading.\r\n\r\nConsidering that this brand new specification defines a profile for SD JWT verifiable credentials, I'd propose to change the pathname to\r\n\r\n.well-known/vc-jwt-issuer\r\n ",
      "createdAt": "2023-05-25T22:30:38Z",
      "updatedAt": "2023-11-29T21:18:57Z",
      "closedAt": "2023-11-29T21:18:57Z",
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "The idea is that the JWT Issuer could be used with any JWT, not necessarily VCs only. ",
          "createdAt": "2023-05-26T09:03:45Z",
          "updatedAt": "2023-05-26T09:03:45Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "@tlodderstedt what do you think?",
          "createdAt": "2023-05-26T09:03:53Z",
          "updatedAt": "2023-05-26T09:03:53Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "@peppelinux is there a reason the JWT Issuer should not be used with something else than VCs?",
          "createdAt": "2023-05-26T09:04:23Z",
          "updatedAt": "2023-05-26T09:04:23Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "NONE",
          "body": "There are well known endpoints like openid-configuration or openid-federation that publish entities metadata, including jwks\r\n\r\nSince this specs Is related to VC based on sd-jwt,  this specs should not be in conflict to pre existing Oauth2/OpenID ecosystem\r\n\r\nSD-JWT-VC should define only the resources needed for the solution It defines",
          "createdAt": "2023-05-26T23:01:28Z",
          "updatedAt": "2023-05-26T23:01:28Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm ok with the proposed change. I anyway assume we will add VC issuance specific metadata in the future (it is not limited to key distribution). ",
          "createdAt": "2023-05-28T10:02:39Z",
          "updatedAt": "2023-05-28T10:03:36Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "NONE",
          "body": "I agree @tlodderstedt, \r\n\r\nKey attestation alone Is not enough, this endpoint deserves a proper identity with a specialized protocol metadata\r\n\r\nAlso the verifiable attestations related to the entity may be available in it",
          "createdAt": "2023-05-28T14:13:38Z",
          "updatedAt": "2023-05-28T14:13:38Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "To me this sounds reasonable. I will update the spec accordingly. ",
          "createdAt": "2023-06-08T14:43:18Z",
          "updatedAt": "2023-06-08T14:43:18Z"
        },
        {
          "author": "TakahikoKawasaki",
          "authorAssociation": "NONE",
          "body": "(As a record, I repeat my question I made elsewhere in the past.)\r\n\r\nWhy is it necessary to introduce a new `/.well-known` path, especially if the expected content is just like below (excerpt from \"[5.2. JWT Issuer Metadata Response](https://www.ietf.org/archive/id/draft-terbu-sd-jwt-vc-02.html#name-jwt-issuer-metadata-response-3)\")?\r\n\r\n```json\r\n{\r\n   \"issuer\":\"https://example.com/\",\r\n   \"jwks_uri\":\"https://jwt-issuer.example.org/my_public_keys.jwks\"\r\n}\r\n```\r\n\r\nIsn't the `jku` JWS header parameter (RFC 7515 [Section 4.1.2](https://www.rfc-editor.org/rfc/rfc7515.html#section-4.1.2)) like below sufficient?\r\n\r\n```json\r\n{\r\n  \"alg\": \"ES256\",\r\n  \"typ\": \"vc+sd-jwt\",\r\n  \"jku\": \"https://jwt-issuer.example.org/my_public_keys.jwks\"\r\n}\r\n```",
          "createdAt": "2023-06-08T15:14:48Z",
          "updatedAt": "2023-06-08T15:14:48Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "(For the record, I repeat my answer I gave on Slack and add more context)\r\n\r\nThe jku header is not sufficient for the intended purpose. The purpose of the well-know endpoint is to establish a stable issuer identifier independent of the jwks location. This issuer identifier can be used in other structures to establish trust, e.g. it can be added to trusted lists (verifier end or trusted 3rd party). Additionally, it fits nicely with the other well-known locations, like openid-credential-issuer and oauth-authorization-server. So the issuer can distribute the role specific metadata in different location residing under the same issuer identifier. And not to forget, this well-known location also could work well with openid-federation.\r\n\r\nMoreover, any additional VC issuer metadata we will come across can be added to this endpoint.\r\n\r\nBTW: I think a dedicated issue would be the better place for this discussion.",
          "createdAt": "2023-06-08T15:45:57Z",
          "updatedAt": "2023-06-09T00:50:56Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "I am actually in favor of `jwt-issuer`. This mechanism is meant to be general enough to be used with not just a 'verifiable credential'. and I don't think anyone would think to use `.well-known/jwt-issuer` with ID Tokens and Access Tokens, UserInfo responses , etc. that are JWTs.",
          "createdAt": "2023-06-09T01:58:59Z",
          "updatedAt": "2023-06-09T01:58:59Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "NONE",
          "body": "I understand your point @Sakurann, below my thoughts\r\n\r\n1. Why defining jwt-issuer for general purpose in a spec that's specialized for VC? Requirement: definition of a specs in IETF for general purpose JWT Issuer metadata (enabling client metadata, that today is only available in openid-federation...)\r\n\r\n2. I agree that jwt-vc-issuer semantically collides with credential-issuer, and we should not do collisions\r\n\r\n3. why we can't use .well-known/openid-federation? Federation entity discovery is required for the entities that builds trust chain according to the federation specs, nothing prevent to publish all the metadata of all thw \"JWT-role\" in a single metadata, that should not be signed if request (content-type) asks it in plain text\r\n\r\nI suggest to use `.well-known/openid-federation` to consolidate a unique way to publish all the metadata types and roles of an entity.\r\n\r\ncoming back to the name change proposal. Why we use the term `issuer` since the metadata contains also general capabilities not related to the issuance?\r\n\r\nin a more general purpose way, wouldn't it be a `.well-known/oauth-entity`?\r\nthen the question: if that entity has more functionalities and roles, being at the same time a RP and a AS, how the metadata should be organized?\r\n\r\nWe've resolved this issue in openid-federation, with the below schema, where a RP can be also a OP, AS, Client, credential-issuer and so on:\r\nhttps://github.com/italia/spid-cie-oidc-docs/blob/versione-corrente/docs/common/common_examples.rst#en-11-entity-configuration-response-relying-party",
          "createdAt": "2023-06-09T10:27:12Z",
          "updatedAt": "2023-06-09T10:28:38Z"
        },
        {
          "author": "TakahikoKawasaki",
          "authorAssociation": "NONE",
          "body": "I'm a little embarrassed, but to be honest, I still don't understand the reasoning. \"A stable issuer identifier\" is represented by the `iss` claim, not by the URL of the well-known endpoint, isn't it?\r\n\r\nA possible reason for necessity of a well-known path I guess is _\"to make sure that the host identified by the issuer identifier actually exists and is accessible, by forcing JWT verifiers to access a path under the domain.\"_\r\n\r\nAn example with concrete values would be _\"to make sure that the host `example.com` identified by the issuer identifier `https://example.com` actually exists and is accessible, by forcing JWT verifiers to access a path (`/.well-known/{whatever}`) under the domain (`example.com`).\"_\r\n\r\nIt might be beneficial to define `/.well-known/jwt-issuer` as the ultimate fallback general-purpose option for locating the public key required to verify the JWT's signature (not as the sole rule for every VC to follow), especially when it is challenging to reach a consensus on a single method within a limited timeframe among the following.\r\n\r\n1. `jwk`\r\n1. `x5c`\r\n1. `kid` starting with `did:`\r\n1. `jku`\r\n1. `trust_chain`\r\n1. `/.well-known/openid-configuration`\r\n1. `/.well-known/openid-federation`\r\n1. `/.well-known/vc-jwt-issuer`\r\n1. `./well-known/openid-credential-issuer`\r\n1. `/.well-known/jwt-issuer`\r\n1. Others\r\n\r\nHowever, maybe I'm still missing something, sorry.",
          "createdAt": "2023-06-15T07:10:38Z",
          "updatedAt": "2023-06-15T07:10:38Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The well-known endpoint is indeed also a stable identifier. But it depends on a certain well-known location, i.e. different well-known locations are different identifiers. \r\n\r\nI'm looking for a stable identifier for the issuer that works across .well-known locations and is not bound to a certain key. That's pretty simple with well-known locations as the iss value can be extended by several different .well-known locations, but the identifier is still the same, right?\r\n\r\nSo for example, the issuer could use the jwt-issuer mechanism share keys and (at the same time) be part of an OpenID Federation as shown in the following:\r\n\r\n<iss>/.well-known/jwt-issuer\r\n<iss>/.well-known/openid-federation\r\n\r\nThe same issuer's URL could also at the same time used in an external data structure at the verifier or at a trusted 3rd party. \r\n\r\nEffect: I can establish trust in a certain issuer/entity/server that works across different roles/perspectives.  \r\n\r\nI hope that explains better. ",
          "createdAt": "2023-06-15T16:23:55Z",
          "updatedAt": "2023-06-15T16:23:55Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "> I'm looking for a stable identifier for the issuer that works across .well-known locations and is not bound to a certain key\r\n\r\nthis would allow an entity to use different keys to sign ID Tokens, VCs, access tokens, etc.",
          "createdAt": "2023-06-17T07:02:03Z",
          "updatedAt": "2023-06-17T07:02:03Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "NONE",
          "body": "my question is\r\n\r\nhow to specify different capabilities for different metadata protocols?\r\n\r\nthis is an example in oidc federation\r\nhttps://github.com/italia/eidas-it-wallet-docs/pull/14/files#diff-f44e126e298004564899b4b86fc1f5e074b5ca6a96e9f546b7a1ed8987e61735R542\r\n\r\nhere we're saying, this is the wallet provider metadata, where multiple metadata/roles cohexists in a single .well-known\r\n\r\nhow jwt-issuer endpoint achieves this?",
          "createdAt": "2023-06-17T12:52:24Z",
          "updatedAt": "2023-06-17T12:57:09Z"
        },
        {
          "author": "TakahikoKawasaki",
          "authorAssociation": "NONE",
          "body": "If the `typ` JWS header indicates that the JWT is a VC (e.g. `\"typ\":\"vc+sd-jwt\"`), the following paths also can work.\r\n\r\n- `/.well-known/openid-credential-issuer` (defined in OID4VCI)\r\n- `/.well-known/vc-jwt-issuer` (proposed by this issue)\r\n\r\nI'd like to understand why the generic name `jwt-issuer` is chosen. The generic name is subject to interpretation where authorization servers, relying parties and any JWT-issuing systems should provide `/.well-known/jwt-issuer` to expose their metadata (at least `jwks_uri` or `jwks`) as the last resort. What if one server behaves as both an authorization server and a credential issuer? Should the authorization server publish the same content at both `/.well-known/openid-configuration` and `/.well-known/jwt-issuer`? Should intermediate authorities and trust anchors of OIDC Federation also provide `/.well-known/jwt-issuer`? Such a conflict is what I'm (and ordinary server implementers will be) concerned about.\r\n\r\nThe latest draft of \"[SD-JWT-based Verifiable Credentials with JSON payloads (SD-JWT VC)](https://datatracker.ietf.org/doc/draft-terbu-sd-jwt-vc/)\" defines `jwks_uri` and `jwks` jwt-issuer metadata. If so, there is no reason to prevent adding the same metadata to OID4VCI [Credential Issuer Metadata](https://openid.net/specs/openid-4-verifiable-credential-issuance-1_0.html#name-credential-issuer-metadata) as well. Basically, I believe the metadata should be added to OID4VCI regardless of the discussion about jwt-issuer.",
          "createdAt": "2023-06-17T18:43:09Z",
          "updatedAt": "2023-06-17T18:43:09Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Potentially fixed by #118 ",
          "createdAt": "2023-06-21T14:38:23Z",
          "updatedAt": "2023-06-21T14:38:23Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "@TakahikoKawasaki raises an important question that we need to address, at least by giving guidance. I don't have a good answer to that at the moment.\r\n\r\nBesides that, I don't see a need to rename to `jwt-vc-issuer`.",
          "createdAt": "2023-06-22T09:18:45Z",
          "updatedAt": "2023-06-22T09:18:45Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@TakahikoKawasaki correct me if I'm wrong. I understand you prefer `vc-jwt-issuer` over `jwt-issuer`, right? And whether the key data will be added to the `openid-credential-issuer` is a different topic (that's how I read your last statement). \r\nPlease conform. ",
          "createdAt": "2023-06-27T13:39:47Z",
          "updatedAt": "2023-06-27T13:39:47Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "We will need more discussions on that topic. Potentially at IETF 117. This means, we won't be able to resolve this issue for our individual draft 03.",
          "createdAt": "2023-06-27T20:03:24Z",
          "updatedAt": "2023-06-27T20:03:24Z"
        },
        {
          "author": "c2bo",
          "authorAssociation": "MEMBER",
          "body": "> @TakahikoKawasaki raises an important question that we need to address, at least by giving guidance. I don't have a good answer to that at the moment.\r\n> \r\n> Besides that, I don't see a need to rename to `jwt-vc-issuer`.\r\n\r\nWe had a small discussion on this and I created a new issue #143 so we can separate between the 2 discussions overlapping here (name of the endpoint and intended usage). ",
          "createdAt": "2023-06-27T20:37:59Z",
          "updatedAt": "2023-06-27T20:37:59Z"
        },
        {
          "author": "TakahikoKawasaki",
          "authorAssociation": "NONE",
          "body": "Regarding the `/.well-known/jwt-issuer` path, I have been losing confidence in my own opinion. As an implementer who has implemented numerous OAuth/OIDC specifications and been leading development of Authlete that holds the most OpenID certifications in the world, my intuition told me _\"The `/.well-known/jwt-issuer` path should be avoided due to possible conflicts with other specifications.\"_ However, I haven't received as much support for my opinion as I expected. For now, I will implement my OID4VCI implementation using the `/.well-known/jwt-issuer` path. Please let me withdraw my opinion.",
          "createdAt": "2023-06-27T20:40:17Z",
          "updatedAt": "2023-06-27T20:40:17Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "NONE",
          "body": "I agree the position of @TakahikoKawasaki, while in the italian solution we're implementing **openid-credential-issuer** as metadata within the .well-known/openid-federation endpoint, according to OpenID Federation 1.0.\r\n\r\nThis doesn't prevent to include also a jwt-issuer metadata type but there's the decision by our side to wait and the same time give evidence of our implementation to help the consolidation of the vc-jwt-issuer specs",
          "createdAt": "2023-06-28T13:26:10Z",
          "updatedAt": "2023-06-28T13:27:16Z"
        },
        {
          "author": "TakahikoKawasaki",
          "authorAssociation": "NONE",
          "body": "@peppelinux\r\nAn off-topic question out of curiosity. If an authorization server / OpenID provider and a credential issuer are hosted on the same server, the payload of the entity configuration published at `/.well-known/openid-configuration` of the server contains the following, right?\r\n\r\n```json\r\n\"metadata\": {\r\n  \"openid_provider\": { \"...\":\"...\" },\r\n  \"openid-credential-issuer\": { \"...\":\"...\" }\r\n}\r\n```",
          "createdAt": "2023-06-28T14:42:52Z",
          "updatedAt": "2023-06-28T14:42:52Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "NONE",
          "body": "Hey @TakahikoKawasaki, I'm sure that you meant `openid-federation`\r\n\r\nThe answer Is yes, even if we have used a snake case like `openid_credential_issuer` here\r\n\r\nhttps://italia.github.io/eidas-it-wallet-docs/en/pid-issuing.html\r\n\r\nIt's still an initial draft without an official release, several editorials and implementation compromises needs to be resolved but the most of the work Is there, feelfree to open issue for discussion here\r\n\r\nhttps://github.com/italia/eidas-it-wallet-docs",
          "createdAt": "2023-06-28T17:54:18Z",
          "updatedAt": "2023-06-28T17:54:18Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "To make progress with this. \r\n\r\nAre folks comfortable with renaming \"JWT Issuer Metadata\"? And if so, would folks be fine with \"SD-JWT VC Issuer Metadata\" or \"VC Issuer Metadata\"? I like \"VC Issuer Metadata\" better because it is more future looking.\r\n\r\nWhat do folks think? cc @danielfett @Sakurann @tlodderstedt @TakahikoKawasaki @c2bo\r\n\r\nAfter we agreed on a new name I'd ask @peppelinux to update PR #118 .",
          "createdAt": "2023-10-24T19:30:42Z",
          "updatedAt": "2023-10-24T19:30:42Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Agree that \"jwt-issuer\" is too general and am in favor of a renaming.  ",
          "createdAt": "2023-11-08T20:35:41Z",
          "updatedAt": "2023-11-08T20:35:41Z"
        }
      ]
    },
    {
      "number": 102,
      "id": "I_kwDOJbVClc5m86Tt",
      "title": "Add support for JWT without SD",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/102",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "HAS PR",
        "individual-01",
        "pending close"
      ],
      "body": "Ideally, we have one spec for SD-JWT VC and JWT VC. This issue is about adding support for vanilla JWTs.",
      "createdAt": "2023-05-26T09:23:57Z",
      "updatedAt": "2023-10-04T11:36:05Z",
      "closedAt": "2023-10-04T11:36:04Z",
      "comments": [
        {
          "author": "mprorock",
          "authorAssociation": "NONE",
          "body": "Totally good to merge up [draft-prorock-jose-native-jwt-vcs](https://datatracker.ietf.org/doc/draft-prorock-jose-native-jwt-vcs/) - that may have things covered or at least heading the right direction?\r\n\r\nwant me to put a PR together on that?",
          "createdAt": "2023-05-26T16:00:54Z",
          "updatedAt": "2023-05-26T16:00:54Z"
        },
        {
          "author": "mprorock",
          "authorAssociation": "NONE",
          "body": "in progress - stand by...",
          "createdAt": "2023-05-30T15:22:58Z",
          "updatedAt": "2023-05-30T15:22:58Z"
        },
        {
          "author": "mprorock",
          "authorAssociation": "NONE",
          "body": "please take a look - https://github.com/mesur-io/ietf-misc/blob/main/draft-prorock-oauth-jwt-vcs.md \r\n\r\nthis should merge everything up - there will definitely need to be an editorial pass.\r\nthe md generated `-00` xml/txt versions are good to go from an idnits standpoint\r\n\r\nedit - if things look good i will pr over to this repo with the updated draft to build on and we can submit and mark that it replaces the prior drafts.",
          "createdAt": "2023-05-30T15:53:31Z",
          "updatedAt": "2023-05-30T16:08:11Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks @mprorock @OR13 for helping with this. We have merged #131. @mprorock @OR13 Can you confirm that after merging #131, the spec achieves now the same goal as https://github.com/mesur-io/ietf-misc/blob/main/draft-prorock-oauth-jwt-vcs.md and there is no need to maintain two different specs? In that case, I'll close this issue.",
          "createdAt": "2023-06-21T14:42:56Z",
          "updatedAt": "2023-06-21T14:43:24Z"
        },
        {
          "author": "OR13",
          "authorAssociation": "COLLABORATOR",
          "body": "Seems like this was merged / should be closed.... We should address the spec title next (in an other issue)",
          "createdAt": "2023-06-27T16:06:47Z",
          "updatedAt": "2023-06-27T16:06:47Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this issue as it has been addressed.",
          "createdAt": "2023-10-04T11:36:05Z",
          "updatedAt": "2023-10-04T11:36:05Z"
        }
      ]
    },
    {
      "number": 103,
      "id": "I_kwDOJbVClc5m8_Ky",
      "title": "Remove W3C VCDM transformation algo",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/103",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "individual-01"
      ],
      "body": "Remove W3C VCDM transformation algo for now",
      "createdAt": "2023-05-26T09:35:46Z",
      "updatedAt": "2023-05-26T11:59:17Z",
      "closedAt": "2023-05-26T11:59:17Z",
      "comments": []
    },
    {
      "number": 108,
      "id": "I_kwDOJbVClc5nAigC",
      "title": "Why private claims are out of scope?",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/108",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "individual-03"
      ],
      "body": "> JWTs (and SD-JWTs) can contain claims that are registered in \"JSON Web Token Claims\" registry as defined in [[RFC7519](https://vcstuff.github.io/draft-terbu-sd-jwt-vc/draft-terbu-sd-jwt-vc.html#RFC7519)], as well as public and private claims. Private claims are not relevant for this specification due to the openness of the three-party-model.\r\n\r\nI do not understand this sentence. Because of the different use-cases, private claims are very relevant to the three-party model. \r\n\r\n(cc @tlodderstedt)",
      "createdAt": "2023-05-26T20:14:03Z",
      "updatedAt": "2023-06-21T14:46:00Z",
      "closedAt": "2023-06-21T14:45:47Z",
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Can you give an example where this is relevant? With excluding private\nclaims we make sure all claims are uniquely identifiable across all parties\nof the three-party-model.\n\nOn Fri 26. May 2023 at 22:14, Kristina ***@***.***> wrote:\n\n> JWTs (and SD-JWTs) can contain claims that are registered in \"JSON Web\n> Token Claims\" registry as defined in [RFC7519\n> <https://vcstuff.github.io/draft-terbu-sd-jwt-vc/draft-terbu-sd-jwt-vc.html#RFC7519>],\n> as well as public and private claims. Private claims are not relevant for\n> this specification due to the openness of the three-party-model.\n>\n> I do not understand this sentence. Because of the different use-cases,\n> private claims are very relevant to the three-party model.\n>\n> (cc @tlodderstedt <https://github.com/tlodderstedt>)\n>\n> \u2014\n> Reply to this email directly, view it on GitHub\n> <https://github.com/vcstuff/draft-terbu-sd-jwt-vc/issues/108>, or\n> unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AKLN3MCJEET34D4PKKAKXB3XIEFJNANCNFSM6AAAAAAYQUXPXI>\n> .\n> You are receiving this because you are subscribed to this thread.Message\n> ID: ***@***.***>\n>\n",
          "createdAt": "2023-05-27T08:07:13Z",
          "updatedAt": "2023-05-27T08:07:13Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "We will also avoid name collisions this way.\n\nOn Sat 27. May 2023 at 10:06, Oliver Terbu ***@***.***>\nwrote:\n\n> Can you give an example where this is relevant? With excluding private\n> claims we make sure all claims are uniquely identifiable across all parties\n> of the three-party-model.\n>\n> On Fri 26. May 2023 at 22:14, Kristina ***@***.***> wrote:\n>\n>> JWTs (and SD-JWTs) can contain claims that are registered in \"JSON Web\n>> Token Claims\" registry as defined in [RFC7519\n>> <https://vcstuff.github.io/draft-terbu-sd-jwt-vc/draft-terbu-sd-jwt-vc.html#RFC7519>],\n>> as well as public and private claims. Private claims are not relevant for\n>> this specification due to the openness of the three-party-model.\n>>\n>> I do not understand this sentence. Because of the different use-cases,\n>> private claims are very relevant to the three-party model.\n>>\n>> (cc @tlodderstedt <https://github.com/tlodderstedt>)\n>>\n>> \u2014\n>> Reply to this email directly, view it on GitHub\n>> <https://github.com/vcstuff/draft-terbu-sd-jwt-vc/issues/108>, or\n>> unsubscribe\n>> <https://github.com/notifications/unsubscribe-auth/AKLN3MCJEET34D4PKKAKXB3XIEFJNANCNFSM6AAAAAAYQUXPXI>\n>> .\n>> You are receiving this because you are subscribed to this thread.Message\n>> ID: ***@***.***>\n>>\n>\n",
          "createdAt": "2023-05-27T08:08:43Z",
          "updatedAt": "2023-05-27T08:08:43Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Why are we worrying about name collisions? By prohibiting usage of private claims, We are limiting to the use-cases that need only public claims to express claims about the subject.",
          "createdAt": "2023-05-27T08:27:16Z",
          "updatedAt": "2023-05-27T08:27:16Z"
        },
        {
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "body": "Aren't all the example in the spec right now using private claims instead of public claims? I don't see any problem with private claims",
          "createdAt": "2023-05-27T08:55:57Z",
          "updatedAt": "2023-05-27T08:55:57Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Ok, then we should say SHOULD use registered or public claims to facilitate\ninterop and avoid name collisions. Can you adjust your PR?\n\nI really want folks just using private claims for use cases that are closed.\n\nOn Sat 27. May 2023 at 10:27, Kristina ***@***.***> wrote:\n\n> Why are we worrying about name collisions? By prohibiting usage of private\n> claims, We are limiting to the use-cases that need only public claims to\n> express claims about the subject.\n>\n> \u2014\n> Reply to this email directly, view it on GitHub\n> <https://github.com/vcstuff/draft-terbu-sd-jwt-vc/issues/108#issuecomment-1565268565>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AKLN3MECCHR4B4AKCCCKXTLXIG3G5ANCNFSM6AAAAAAYQUXPXI>\n> .\n> You are receiving this because you commented.Message ID:\n> ***@***.***>\n>\n",
          "createdAt": "2023-05-27T08:57:23Z",
          "updatedAt": "2023-05-27T08:57:23Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "IMO, those examples should probably be fixed. Name collisions are a problem.\n\nOn Sat 27. May 2023 at 10:56, Paul Bastian ***@***.***> wrote:\n\n> Aren't all the example in the spec right now using private claims instead\n> of public claims? I don't see any problem with private claims\n>\n> \u2014\n> Reply to this email directly, view it on GitHub\n> <https://github.com/vcstuff/draft-terbu-sd-jwt-vc/issues/108#issuecomment-1565288174>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AKLN3MGTSRQHQ6PKKB4WFTDXIG6SRANCNFSM6AAAAAAYQUXPXI>\n> .\n> You are receiving this because you commented.Message ID:\n> ***@***.***>\n>\n",
          "createdAt": "2023-05-27T08:58:58Z",
          "updatedAt": "2023-05-27T08:58:58Z"
        },
        {
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "body": "If we want to encourage public claims instead of private claims, then this should be reflected in some examples of the document",
          "createdAt": "2023-05-27T08:59:24Z",
          "updatedAt": "2023-05-27T08:59:24Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree with Kristina. I don't understand this constrained and miss a justification.\r\n\r\nIn my opinion, what we call private claim could also be a collision resistant claim defined by a community/sdo, that is just not registered in the IANA registry. Something like `<fqdn>.<claim>`.\r\n\r\nI suggest to revert to the previous text that allowed for private claims, too.",
          "createdAt": "2023-05-27T09:31:10Z",
          "updatedAt": "2023-05-28T10:01:17Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "I thought that was included in the definition of a public claim. But I\ndouble checked and you are right. We should fix that.\n\nOn Sat 27. May 2023 at 11:31, Torsten Lodderstedt ***@***.***>\nwrote:\n\n> I agree with Kristina. I don't understand this constrained and miss a\n> justification.\n>\n> In my opinion, what we call private claim could also be a collision\n> resistant claim defined by a community/sdo, that is just not registered in\n> the IANA registry. Something like \".\".\n>\n> I suggest to revert to the previous text that allowed for private claims,\n> too.\n>\n> \u2014\n> Reply to this email directly, view it on GitHub\n> <https://github.com/vcstuff/draft-terbu-sd-jwt-vc/issues/108#issuecomment-1565305030>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AKLN3MCWOWRN7PINVR4KEHLXIHCWTANCNFSM6AAAAAAYQUXPXI>\n> .\n> You are receiving this because you commented.Message ID:\n> ***@***.***>\n>\n",
          "createdAt": "2023-05-27T10:09:23Z",
          "updatedAt": "2023-05-27T10:09:23Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this issue since we merged #109 ",
          "createdAt": "2023-06-21T14:45:47Z",
          "updatedAt": "2023-06-21T14:45:47Z"
        }
      ]
    },
    {
      "number": 110,
      "id": "I_kwDOJbVClc5nAp_y",
      "title": "make HB JWT mandatory",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/110",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "discuss",
        "pending close"
      ],
      "body": "I thought we have previously agreed to make HB JWT mandatory ([current text reads MAY](https://vcstuff.github.io/draft-terbu-sd-jwt-vc/draft-terbu-sd-jwt-vc.html#section-6.1-2)). I think it is critical for the interoperability to mandate HB JWT. \r\n\r\nand with [PR 262](https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/262) in sd-jwt being merged, SD-JWT will normatively define the structure of HB-JWT so section 6.1.1 in sd-jwt vc should also be removed.",
      "createdAt": "2023-05-26T20:46:09Z",
      "updatedAt": "2023-06-22T10:00:08Z",
      "closedAt": "2023-06-22T10:00:08Z",
      "comments": [
        {
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree moving the HB-JWT to SD-JWT spec and removing it from SD-JWT-VC but I would like to keep cryptographic holder binding optional. Claim based holder binding is a simple and easy solution that will be requested by adopters. ",
          "createdAt": "2023-05-27T08:45:13Z",
          "updatedAt": "2023-05-27T08:45:13Z"
        },
        {
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "body": "At the same time it might make sense to give more guidance in this direction in the spec",
          "createdAt": "2023-05-27T08:45:58Z",
          "updatedAt": "2023-05-27T08:45:58Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think the vc-sd-jwt should be the module describing how VCs shall be implemented with SD-JWT, however it should be flexible enough to be used in different contexts. \r\n\r\n Interoperability is the point of the high assurance profile. It does already make the HB JWT mandatory. I think this is sufficient. ",
          "createdAt": "2023-05-28T10:00:36Z",
          "updatedAt": "2023-05-28T10:00:36Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "@Sakurann I agree with @tlodderstedt that key binding should stay optional in this specification. More specific profiles may or may not make it mandatory. \r\n\r\nI'm marking as pending close and will close after 1 week of no activity. ",
          "createdAt": "2023-06-21T14:49:48Z",
          "updatedAt": "2023-06-21T14:49:48Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "We just discussed this again and agree that this should be closed.",
          "createdAt": "2023-06-22T10:00:08Z",
          "updatedAt": "2023-06-22T10:00:08Z"
        }
      ]
    },
    {
      "number": 111,
      "id": "I_kwDOJbVClc5nAzkR",
      "title": "don't use \"Three-Party-Model\"",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/111",
      "state": "CLOSED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Ready-for-PR",
        "individual-03"
      ],
      "body": "There are lots of things that could be described as a three-party model (including classic OAuth where this work is aspiring for adoption). The use of \"Three-Party-Model\" in this document strikes me as somewhat presumptuous and potentially misleading or confusing. Could we instead use \"Issuer-Holder-Verifier Model\"? \r\n\r\n\r\n",
      "createdAt": "2023-05-26T21:28:05Z",
      "updatedAt": "2023-06-22T09:34:38Z",
      "closedAt": "2023-06-22T09:34:38Z",
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "NONE",
          "body": "I agree, since there must be always a trusted third party in the model, like a trust anchor or its intermediate",
          "createdAt": "2023-05-26T23:04:43Z",
          "updatedAt": "2023-05-26T23:04:43Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I typically refer to this model as \"decentralized identity\" or \"verifiable credentials applications/solutions/ecosystems\", I would be fine with \"digital credentials applications/solutions/ecosystems\". ",
          "createdAt": "2023-05-28T09:57:35Z",
          "updatedAt": "2023-05-28T09:57:35Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm suggesting only to replace the 5 or 6 usages of \"Three-Party-Model\" with \"Issuer-Holder-Verifier Model\". ",
          "createdAt": "2023-05-28T19:21:10Z",
          "updatedAt": "2023-05-28T19:21:10Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "That would work for me and I understand that Three-Party-Model is confusing since other architectures also involve 3 parties.",
          "createdAt": "2023-05-29T11:14:56Z",
          "updatedAt": "2023-05-29T11:14:56Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm ok with using \"Issuer-Holder-Verifier Model\". ",
          "createdAt": "2023-05-29T17:04:50Z",
          "updatedAt": "2023-05-29T17:04:50Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "It seems that this issue is ready for a PR.",
          "createdAt": "2023-06-21T14:50:22Z",
          "updatedAt": "2023-06-21T14:50:22Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> It seems that this issue is ready for a PR.\r\n\r\n#138 is that PR ",
          "createdAt": "2023-06-21T19:51:06Z",
          "updatedAt": "2023-06-21T19:51:06Z"
        }
      ]
    },
    {
      "number": 112,
      "id": "I_kwDOJbVClc5nA1Nx",
      "title": "Why is JWT issuer metadata part of this spec?",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/112",
      "state": "CLOSED",
      "author": "andresuribe87",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "awoie"
      ],
      "labels": [
        "HAS PR",
        "wg-01"
      ],
      "body": "Mechanisms to go from `iss` -> cryptographic public key that can be used for signature verification seem to be out of scope for this document. Why is it included? ",
      "createdAt": "2023-05-26T21:37:48Z",
      "updatedAt": "2023-10-23T21:45:03Z",
      "closedAt": "2023-10-23T21:45:02Z",
      "comments": [
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "Is the purpose of the issuer metadata to provide an alternative to x509 certificates (that can today be shared via the x* header claims)?",
          "createdAt": "2023-06-13T19:35:04Z",
          "updatedAt": "2023-06-13T19:35:04Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Mechanisms to go from iss -> cryptographic public key that can be used for signature verification seem to be out of scope for this document. Why is it included?\r\n\r\nWe could have put that in a separate spec, but that would have been a very small one. We felt JWT issuer metadata is tightly enough related to VCs that having the meta and configuration data distribution mechanism in the same spec as the VCs makes sense.  \r\n\r\n> Is the purpose of the issuer metadata to provide an alternative to x509 certificates (that can today be shared via the x* header claims)?\r\n\r\nWe want to provide implementers a simple way to resolve keys similar to how OpenID Connect does it. And yes, that is an alternative to x.509, but also other mechanisms, like DIDs.",
          "createdAt": "2023-06-13T20:40:55Z",
          "updatedAt": "2023-06-13T20:40:55Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "_We could have put that in a separate spec, but that would have been a very small one. We felt JWT issuer metadata is tightly enough related to VCs that having the meta and configuration data distribution mechanism in the same spec as the VCs makes sense._\r\n\r\nResolving keys without an ability to resolve information about key attestation/certificates, etc., is not enough. The proposed model works under assumption that there is a relationship between all the participants since only key is resolved. For an open system, the metadata should return more information, like key attestations, trust chains, accreditations, and other.\r\n\r\nIf the specs are aiming at closed systems where all the rules are clear, the proposal is fine. Else, a separate specification (that would be much more elaborate) would be required.\r\n\r\nThe model assumes .well-known endpoint which makes it compatible only with did:web. Why not using DID web then? with additional query parameter DID method should be able to return a specific key in a defined format, e.g., jwk (I cannot find the specs but I think DID resolver supports this)",
          "createdAt": "2023-06-13T20:52:25Z",
          "updatedAt": "2023-06-13T20:52:25Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> The proposed model works under assumption that there is a relationship between all the participants since only key is resolved. \r\n\r\nThe concept works very well for open systems: The key distribution with `jwt-issuer` allows the verifier to authenticate the issuer URL. The assumption of the model is that additional data can be provided using suitable mechanisms on top of the (authenticated) issuer URL as identifier. For example, a trusted registry could list the issuers trusted for a certain purpose.\r\n\r\n> The model assumes .well-known endpoint which makes it compatible only with did:web. \r\n\r\n.well-known is a mechanism widely used by a number of standards. Thus `.well-known/jwt-issuer` is compatible with a large number of other well-known locations, including `openid-credential-issuer`, `oauth-authorization-server` and `openid-federation` (even `openid-configuration`). So implementations can share role specific meta and configuration data based on a single service identifier in a modular fashion. Additionally, `openid-federation` can be used to anchor the issuer within a trust graph, which allows to establish trust and share policies in a quite flexible manner (which adds to your first point).\r\n\r\nA credential issuer could, for example, host metadata in all those locations and clients can access whatever is needed for their respective use case. \r\n```\r\n<issuer URL>/.well-known\r\n                  jwt-issuer (verifier perspective, mainly keys)\r\n                  openid-credential-issuer (wallet perspective, available credential types, endpoints)\r\n                  oauth-authorization-server (OAuth endpoints and capabilities)\r\n                  openid-federation (trust anchors, ...)\r\n```\r\n                   \r\ndid:web, in contrast, tries to bundle all kinds of metadata in a single location, i.e. it does not embrace the modular concept of .well-known. ",
          "createdAt": "2023-06-14T09:39:47Z",
          "updatedAt": "2023-06-14T09:40:13Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "@tlodderstedt This question came up a couple of times already. Can you please provide a PR with some considerations along the lines of what you said above for inclusion in the spec?",
          "createdAt": "2023-06-22T10:02:33Z",
          "updatedAt": "2023-06-22T10:02:33Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "related to #168 ",
          "createdAt": "2023-10-04T11:35:31Z",
          "updatedAt": "2023-10-04T11:35:31Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "We introduced a PR #175 that explains the role of the JWT Issuer Metadata that fills the gap of key discovery if the issuer is a HTTPS URI. Note, DIDs are also mentioned as another option explicitly. ",
          "createdAt": "2023-10-23T15:26:31Z",
          "updatedAt": "2023-10-23T15:26:31Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this issue since PR #175 got merged.",
          "createdAt": "2023-10-23T21:45:02Z",
          "updatedAt": "2023-10-23T21:45:02Z"
        }
      ]
    },
    {
      "number": 113,
      "id": "I_kwDOJbVClc5nA1VW",
      "title": "Clarify which VCDM this is intended for",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/113",
      "state": "CLOSED",
      "author": "andresuribe87",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "question"
      ],
      "body": "I'm assuming that this is for VCDM 1.1, but there aren't any reference (normative or informative) in the current draft. ",
      "createdAt": "2023-05-26T21:38:34Z",
      "updatedAt": "2023-07-10T15:48:20Z",
      "closedAt": "2023-07-10T15:48:20Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "This is not for VCDM.",
          "createdAt": "2023-06-27T20:01:03Z",
          "updatedAt": "2023-06-27T20:01:03Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "We clarified that in #146 .",
          "createdAt": "2023-07-10T15:48:20Z",
          "updatedAt": "2023-07-10T15:48:20Z"
        }
      ]
    },
    {
      "number": 114,
      "id": "I_kwDOJbVClc5nA11T",
      "title": "Provide W3C VCDM transformation algorithm",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/114",
      "state": "CLOSED",
      "author": "andresuribe87",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "pending close"
      ],
      "body": "I found it hard to understand the relationship between VC's and the spec. Specifically, it's not clear to me how to go from VC (as in `application/vc+ld+json`) to `SD-JWT VC`, nor the other way. ",
      "createdAt": "2023-05-26T21:41:46Z",
      "updatedAt": "2024-04-02T18:20:32Z",
      "closedAt": "2024-04-02T18:20:32Z",
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "The specification does not use the W3C VCDM. A note was added to the spec. We might add a transformation algorithm from SD-JWT VC to W3C VCDM in the future if needed. This also depends on the implementation of the Miami resolution.\r\n\r\nI'll rename the issue to make it clear that this is about a transformation algorithm and we will revisit in the future.",
          "createdAt": "2023-07-18T16:57:34Z",
          "updatedAt": "2023-07-18T16:57:34Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Transforming syntax between w3c vcdm payload and sd-jwt vc payload is probably not too complicated. it is more about mapping between the claims (i.e. issuer -> iss; issuanceData -> iat, etc.) and handling when representation of a claim is different (i.e. when issuer is an object in vcdm but is a string in sd-jwt vc, etc.)\r\n\r\nthe bigger problem is semantics. sd-jwt vc -> vcdm might work by using default context thanks to the @vocab value there that will tell json-ld parser to treat all undefined terms as #issuerDefined. not sure how much vcdm -> sd-jwt vc is possible because sd-jwt vc does not have `@context` value by definition. so in any case, semantics ie meaning of varying claims will probably need to be agreed out of band.",
          "createdAt": "2023-11-05T04:52:52Z",
          "updatedAt": "2023-11-05T04:52:52Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "IMO, it would be needed to define a mapping based on specific VC types, otherwise it would be inaccurate. For that reason, I'd argue that the transformation algorithm should not be in this specification but rather in concrete VC type specifications, e.g., driver's license, vehicle registration etc. Otherwise, one wouldn't be able to add the appropriate JSON-LD context URLs to the `@context` array. It might be also hard to distinguish what is W3C VCDM metadata and what are claims about the W3C VCDM credential subject. If folks are fine with this approach, I'd suggest adding something that describes this approach to the   \"relationships to other documents\" section to close this issue.\r\n\r\nThoughts?",
          "createdAt": "2023-11-27T03:29:47Z",
          "updatedAt": "2023-11-27T03:30:45Z"
        },
        {
          "author": "babisRoutis",
          "authorAssociation": "CONTRIBUTOR",
          "body": "\r\n> Thoughts?\r\n\r\nI really like the fact that SD JWT VC is not related to the W3C VC DM, or any other format.\r\nThis independence allows this specification to present SD JWT VC as a new clean format.\r\n\r\nI really see no point in adding mapping rules or describing approaches to map between formats.\r\n\r\n\r\n\r\n \r\n\r\n",
          "createdAt": "2024-03-05T15:01:23Z",
          "updatedAt": "2024-03-05T15:01:23Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "I think, we had a lot of discussions on this and nobody argued for having a transformation algorithm being defined in this specification. I suggest to close this issue after 1 week unless anybody feels very strongly.",
          "createdAt": "2024-03-12T14:01:37Z",
          "updatedAt": "2024-03-12T14:01:37Z"
        }
      ]
    },
    {
      "number": 115,
      "id": "I_kwDOJbVClc5nA3Ng",
      "title": "What is the relationship between verifiable presentations and combined format for presentation?",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/115",
      "state": "CLOSED",
      "author": "andresuribe87",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "My  expectation was that the SD-JWT's combined format for presentation would be used inside a verifiable presentation. Something similar to the example below\r\n```json\r\n{\r\n  \"@context\": [\r\n    \"https://www.w3.org/2018/credentials/v1\",\r\n    \"https://www.w3.org/2018/credentials/examples/v1\"\r\n  ],\r\n  \"id\": \"urn:uuid:3978344f-8596-4c3a-a978-8fcaba3903c5\",\r\n  \"type\": [\"VerifiablePresentation\"],\r\n  \"verifiableCredential\": [{\r\n    \"type\": \"SD-JWT Presentation\",\r\n    \"combinedFormat\": \"XXX.XXX.XXX~YYY~ZZZ\"\r\n  }]\r\n}\r\n```\r\n\r\nI'm curious whether this was considered. If so, it would be nice to add a section on that to the spec on the relationship. ",
      "createdAt": "2023-05-26T21:51:00Z",
      "updatedAt": "2023-09-21T09:32:30Z",
      "closedAt": "2023-09-21T09:31:59Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "This spec defines its own format for verifiable presentations without a focus on being compatible to the W3C format. It may be possible to envelope the presentation format as shown in your example, but that would not be defined by this specification.",
          "createdAt": "2023-08-16T08:15:53Z",
          "updatedAt": "2023-08-16T08:15:53Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Duplicate of #114 ",
          "createdAt": "2023-09-21T09:31:59Z",
          "updatedAt": "2023-09-21T09:32:30Z"
        }
      ]
    },
    {
      "number": 116,
      "id": "I_kwDOJbVClc5oF6gH",
      "title": "Need a way to define confidence or assurance levels",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/116",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "discuss"
      ],
      "body": "If SD-JWT holder binding is focusing on key (device/wallet) binding in terms of cloning/replay protection, we will need some mechanism to define how we want to communicate how the holder was authenticated if certain claims are presented to verifiers. To verifiers it will be also interesting to understand the confidence (ISO 23220-5) / assurance levels (eIDAS) especially if credentials and wallets support multiple levels. This information could be conveyed by another claim, or it could be just some annotations in form of new members of the specific `cnf` method.\r\n\r\nFor example:\r\n\r\n```\r\n\"cnf\": {\r\n  \"jwk\": {\r\n     ... JWK members ...,\r\n     \"trust_framework\": \"some-ecosystem\",\r\n     \"profile\": \"some-configuration-type\"\r\n  }\r\n}\r\n```\r\n\r\nVS something like the following ...\r\n\r\n```\r\n\"cnf\": {\r\n  \"jwk\": {\r\n     ... JWK members ...\r\n  }\r\n},\r\n\"holder_authentication\": {\r\n  \"trust_framework\": \"some-ecosystem\",\r\n  \"profile\": \"some-configuration-type\"\r\n}\r\n\r\n```\r\n\r\nIMO, it makes no sense to provide the authenticator assertion directly to the verifier. ",
      "createdAt": "2023-06-07T17:37:11Z",
      "updatedAt": "2024-07-30T18:16:01Z",
      "closedAt": "2024-07-30T18:16:01Z",
      "comments": [
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Clarifying questions:\r\n\r\n* Do I understand correctly that you want to convey from the issuer through the VC to wallet and verifier what requirements the issuer has regarding holder authentication?\r\n* Why is this need caused by the focus of SD-JWT on key binding?\r\n* To my knowledge the eIDAS assurance levels do not differentiate identification and authentication. Do you think this is a suitable vocabulary?",
          "createdAt": "2023-06-08T16:20:23Z",
          "updatedAt": "2023-06-08T16:20:23Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "NIST clearly differentiates between IAL and AAL. Both should be supported.",
          "createdAt": "2023-06-13T19:40:38Z",
          "updatedAt": "2023-06-13T19:40:38Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "> * To my knowledge the eIDAS assurance levels do not differentiate identification and authentication. Do you think this is a suitable vocabulary?\r\n\r\nif key binding is about wallet authentication, then we need something else that tells the verifier that the holder was authenticated when the data was shared. IMO, this could be done in form of claims. We could essentially just define one claim \"holder_authentication\". A verifier might then be able to request specific members of `holder_authentication` in the response such as assurance levels, form factors etc. Perhaps something like `acr` and `amr` is sufficient?\r\n\r\n@tlodderstedt you don't think this is needed?",
          "createdAt": "2023-06-21T15:03:13Z",
          "updatedAt": "2023-06-21T15:03:13Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "@awoie, what you're describing is \"key attestation\" or x509 cert today without the holder information. In terms of eIDAS, it is the signature \"assurance level\" - only 'qualified' is expressed.\r\n\r\nHow to get the qualified tag is defined within the framework. So question boils down to: How to express the key attestation?\r\nIMO it should be a separate credential.\r\n\r\nInformation like authentication/identification/documents presented can be implicit. Vocabulary needs to be defined by the trust framework anyway.\r\n",
          "createdAt": "2023-06-21T15:16:58Z",
          "updatedAt": "2023-06-21T15:16:58Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "As discussed on the editor's call on June 22, we won't define any normative requirements but we will add some language to some considerations section.",
          "createdAt": "2023-06-22T10:09:46Z",
          "updatedAt": "2023-06-22T10:09:46Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "We revisited this issue on the editors' call and agreed to not add considerations for now. The exact encoding of assurance or confidence levels will be left to the profiles of the specification.",
          "createdAt": "2024-07-30T18:16:01Z",
          "updatedAt": "2024-07-30T18:16:01Z"
        }
      ]
    },
    {
      "number": 119,
      "id": "I_kwDOJbVClc5oNNOC",
      "title": "Why splitting iss weburl to insert .well-known/jwt-issuer?",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/119",
      "state": "CLOSED",
      "author": "peppelinux",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "in https://github.com/vcstuff/draft-terbu-sd-jwt-vc/blob/main/draft-terbu-sd-jwt-vc.md#jwt-issuer-metadata-request\r\n\r\nI propose to change the current approach in favor of the solution below:\r\n````\r\nIf the `iss` value contains a path component, any terminating `/` MUST be\r\nremoved before inserting the `/.well-known/jwt-issuer` at the end of the\r\npath.\r\n\r\nThe following is a non-normative example of a HTTP request for the JWT Issuer\r\nMetadata configuration when `iss` is set to `https://example.com/user/1234`:\r\n\r\n\r\nGET /user/1234/.well-known/jwt-issuer HTTP/1.1\r\nHost: example.com\r\n````\r\nI'm aware that https://datatracker.ietf.org/doc/html/rfc8414 defines the current approach but It seems to me that splitting a url, including other path in it, is worst then simply append the .well-known\r\n\r\nthere are some cases where the webpath matches specific web routing in specific contexts, like `user/1234` might be in a multitenant solution, and givin the .well-known resource in a context coherent path I think it is better.\r\n\r\nps = OIDC Federation 1.0 uses the proposed approach.",
      "createdAt": "2023-06-08T16:31:36Z",
      "updatedAt": "2023-09-21T09:46:56Z",
      "closedAt": "2023-09-21T09:46:56Z",
      "comments": [
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "As far as I understand, the splitting is required by RFC 5785, which we must comply with to get this specification through the IETF approval process. @selfissued can tell you more about it. ",
          "createdAt": "2023-06-08T17:04:31Z",
          "updatedAt": "2023-06-08T17:04:31Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "NONE",
          "body": "Well, specifically here\r\nhttps://openid.net/specs/openid-connect-federation-1_0.html#section-6\r\n\r\nIn Federation we have them both",
          "createdAt": "2023-06-08T20:07:49Z",
          "updatedAt": "2023-06-08T20:07:49Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "That\u2019s an OIDF spec, not an IETF spec. Please talk to Mike about the journey with RFC 8414.",
          "createdAt": "2023-06-08T20:14:54Z",
          "updatedAt": "2023-06-08T20:14:54Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "NONE",
          "body": "here I report Mike's comments on OAUTH2-WG\r\n\r\nIn [https://www.ietf.org/archive/id/draft-terbu-sd-jwt-vc-02.html#section-5.1](https://www.ietf.org/archive/id/draft-terbu-sd-jwt-vc-02.html#section-5.1) (JWT Issuer Metadata Request), I question whether \u201cIf the iss value contains a path component, any terminating / MUST be removed before inserting /.well-known/ and the well-known URI suffix between the host component and the path component.\u201d is always the right choice.  Yes, I know that that\u2019s what it takes to conform to RFC 5785 and I wrote similar text at https://www.rfc-editor.org/rfc/rfc8414#section-5 , but practically, the permissions on servers may not be administered in a way that allows tenants to write to this location.",
          "createdAt": "2023-06-09T10:43:20Z",
          "updatedAt": "2023-06-09T10:43:20Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm not defending the RFC 5785 rules. I'm just pointing out we will not get this draft over the finishing line without complying to them. ",
          "createdAt": "2023-06-09T13:59:33Z",
          "updatedAt": "2023-06-09T13:59:33Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Having .well-known as a 'trusted' source of information in the root of web servers is why RFC5785 uses the 'insertion' rule instead of the 'append' rule. The name of this repository shows why allowing .well-known everywhere is not a great idea: https://github.com/cre8/.well-known\r\n\r\nAnd since we're writing an IETF draft, we'll stick with the IETF rules.",
          "createdAt": "2023-09-21T09:46:56Z",
          "updatedAt": "2023-09-21T09:46:56Z"
        }
      ]
    },
    {
      "number": 121,
      "id": "I_kwDOJbVClc5oUDwc",
      "title": "Is the following a valid SD-JWT-VC or how can it be mapped to the SD-JWT-VC?",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/121",
      "state": "CLOSED",
      "author": "alenhorvat",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "question",
        "pending close"
      ],
      "body": "<img width=\"591\" alt=\"image\" src=\"https://github.com/vcstuff/draft-terbu-sd-jwt-vc/assets/10848802/48c0ead3-3657-4cf5-8380-6bcb6063ce08\">\r\n\r\nAll the claims need to be present, along with the @context.\r\n\r\nWould this be a valid SD-JWT-VC?",
      "createdAt": "2023-06-09T15:18:28Z",
      "updatedAt": "2024-09-20T14:41:14Z",
      "closedAt": "2024-04-02T18:21:11Z",
      "comments": [
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "From first read, mostly, however, the processing result might not what you would expect. \r\n\r\nThe \"type\" violates the definition in SD-JWT VC. \r\n\r\nI miss the JOSE header, which is important as it marks SD-JWT VCs as such (with the `typ` `vc+sd-jwt`).  \r\n\r\nInterpretation of \"@context\", \"id\", \"credentialSubject\", \"credentialStatus\", \"credentialSchema\", \"termsOfUse\" is up to your application. \r\n\r\nThere will be a status management mechanism in SD-JWT VC similar to credentialStatus but using the JWT `status` to represent the status list (https://github.com/vcstuff/draft-looker-jwt-cwt-status-list). \r\n\r\nI guess \"credentialSubject\" is intended to be used for holder binding. SD-JWT VC uses the JWT `cnf` claim for that purpose. \r\n\r\nI think we could come up with a JWTish equivalent to \"termsOfUse\".\r\n\r\n\"type\" is defined single value for SD-JWT VC - I'm not sure which of the type information in your example I would put into the \"type\" claim of a SD-JWT VC. \"VerifiableCredential\" is already covered by the \"typ\" JOSE header \"vc+sd-jwt\". \"VerifiableAttestation\" does not sound that much different. Not sure how to interpret the \"credentialSchema\". \r\n\r\nI see two directions: \r\n\r\n1. You may modify the content to use JWT claims.\r\n2. You can use a different kind of SD-JWT envelop to carry the current JSON-LD (inspired) content (which would use a different `typ` header). ",
          "createdAt": "2023-06-09T15:36:01Z",
          "updatedAt": "2023-06-09T15:36:01Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "- We need the \"type\" to support an array of strings.\r\n- We define our own status and the status list should support an object\r\n- credentialSubject contains domain-specific claims about the subject (name, ...)\r\n- termsOfUse is currently misused; we need to express: rules what the credential can be used for (termsOfUse name is appropriate), and to express the accreditation information/trust information/...\r\n\r\ntyp header is not working for us, since we need an ability to arbitrarily extend the schema. Type as array is the best approach so far\r\n\r\nI need to think about the header type names.",
          "createdAt": "2023-06-09T15:48:55Z",
          "updatedAt": "2023-06-09T15:48:55Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "- credentialSchema references JSON schema that used to validate the VC format and plays a role when it comes to accreditations; in open systems, it is an important information\r\n- type: Verifiable Credential defines the data model as per w3c vc; Verifiable Attestation data model extends the VC data model; other credentials that we're using: V. Authorisation to Onboard, V. Authorisation for Trust Chain, V. Accreditation for accrediting, V. Accreditation for attesting all extend the V. Attestation.\r\n- Domains that define the data models also extend the V. Attestation data model\r\nHence the type and credentialSchema claims play an important role in an open ecosystem as it allows coherent data modelling across different domains.",
          "createdAt": "2023-06-09T19:53:28Z",
          "updatedAt": "2023-06-09T19:53:28Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "The relevant header typ values would be\r\n- vc+json+jwt - VCDM + JWT claims processed as JSON\r\n- vc+json-ld+jwt - VCDM + JWT claims processed as JSON-LD\r\n- vc+json+sd+jwt - same as above, except that it is SD\r\n- vc+json-ld+sd+jwt - same as above, except that is SD\r\n\r\nIf SD-JWT has 0 hidden claims, it boils down to JWT-VC? If yes, then one needs only last 2\r\n\r\nIt is inappropriate to put the type values I'm mentioning above, in the typ header value since it is not a new media type, but an extended data model",
          "createdAt": "2023-06-09T19:59:42Z",
          "updatedAt": "2023-06-09T19:59:42Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "Based on experience and feedback from a wide range of stakeholders, a full data model should contain the following claims:\r\nImportant property is that use cases have the ability to extend the different claims when required.\r\n\r\n```jsonc\r\n{\r\n  \"@context\": [\r\n    \"https://www.w3.org/2018/credentials/v1\"\r\n  ], // Type: array of URIs. Use: CONDITIONAL: If credential is JSON-LD, the claim MUST be present, else it MUST NOT be present\r\n\r\n  \"iss\": \"did:ebsi:alice\", // Type: String (URI) or object. Use: REQUIRED\r\n  \"aud\": \"did:ebsi:bob\", // Type: String (URI) or object. Use: OPTIONAL\r\n\r\n  \"id\": \"urn:uuid:003a1dd8-a5d2-42ef-8182-e921c0a9f2cd\", // Unique ID of the credential. Use: OPTIONAL\r\n\r\n  // Credential validity information. \r\n  \"validity\": {\r\n    \"iat\": \"2021-11-01T00:00:00Z\", // Date and time of issuance - required\r\n    \"exp\": \"2024-06-22T14:11:44Z\", // Date at and after which the VC MUST be considered invalid - optional - e.g., credential cannot be used for online authentication (e.g., the bound key/certificate expired), but can be used for offline identification where person is compared against the photo if notAfter > exp.\r\n    \"nbf\": \"2024-06-22T14:11:44Z\", // date at an after which the VC is valid (e.g., signature expires) - optional\r\n    \"notAfter\": \"2024-06-22T14:11:44Z\" // Date and time after which the business content becomes invalid - optional \r\n  },\r\n\r\n  // REQUIRED. String or object\r\n  \"subject\": {\r\n    // If object, type MUST be present and define the business type of the credential. Can be string or array\r\n    \"type\": [\r\n      \"VerifiableCredential\",\r\n      \"VerifiableAttestation\", \"VerifiableID\"\r\n    ],\r\n    \"id\": \"did:ebsi:00001235\" // optional - subject identifier\r\n  },\r\n\r\n  // OPTIONAL. Cryptographic binding information. Can be JWK or other object/string\r\n  \"cnf\": {},\r\n\r\n  // OPTIONAL. Credential status. MUST be object. Type determines the processing rules and the additional claims\r\n  \"status\": { \r\n    \"type\": \"AnyExtension\"\r\n  },\r\n\r\n  // OPTIONAL. JSON schema that validates the credential. Type: object. Type determines the validation rules\r\n  \"schema\": {\r\n    \"id\": \"https://api-test.ebsi.eu/trusted-schemas-registry/v2/schemas/0x23039e6356ea6b703ce672e7cfac0b42765b150f63df78e2bd18ae785787f6a2\",\r\n    \"type\": \"FullJsonSchemaValidator2021\"\r\n  },\r\n\r\n  // OPTIONAL. Defines the rules and limitations when/how the credential can be used/consumed. E.g., medical data can be shared only with certified entities, diploma cannot be used for identification, ...; Type: object or array of objects\r\n  \"termsOfUse\": {\r\n    \"type\": \"AnyExtension\"\r\n  },\r\n\r\n  // OPTIONAL. Contains all the necessary information about the trust chain. Can be Federation Trust Chain, Accreditation chain, etc.; Type: object or array of objects\r\n  \"trustChain\": {\r\n    \"type\": \"AnyExtension\"\r\n  },\r\n\r\n  // OPTIONAL. Contains information about rendering. Type determines the processing rules.\r\n  \"rendering\": {\r\n    \"type\": \"AnyExtension\"\r\n  }\r\n}\r\n```",
          "createdAt": "2023-06-09T20:36:20Z",
          "updatedAt": "2023-06-09T20:36:20Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hi @alenhorvat, \r\n\r\nyou have added a lot of information to this issue. I suggest we discuss them step by step. \r\n\r\nI would like to start with `type` vs `typ`. \r\n\r\nThe JOSE `typ` header is used to determine the structure and processing rules of the payload. The `typ` value `vc+sd-jwt` indicates \"this thing is a VC with pure JSON content following the rules defined for JWTs and it can selectively disclosed using SD-JWT + there are some more rules defined in the sd-jwt vc spec\". This `typ` value plays the same role the \"VerifiableCredential\" type values has in the VCDM. So we don't need it in the `type`.\r\n\r\nPart of the rules defined for `vc+sd-jwt` is the presence of the `type` claim. \r\n\r\n> This specification defines the JWT claim type. The type claim is used to express the type of the JSON object that is secured by the JWT. The type value MUST be a case-sensitive StringOrURI value.\r\n\r\nThis is an application type, such as \"MyEMailCredential\", so it basically tells you what end-user (or subject) claims to expect in this type of a credential. The `type` value is especially important for presentation requests, as it used to determine the kind of credential that is being requested and it also determines what claims can be used to filter matching credentials and those claims can also be selectively disclosed. \r\n\r\nTo me, the `type` as defined in sd-jwt vc and `type` as well as `credentialSchema` that you use have a similar purpose. \r\n\r\nI have a couple of questions to that end: \r\n\r\n1. Can you shed some light on why you use both, `type` and `credentialSchema`? The reason why I'm asking is, I assume the schema could be derived from the type value or the type value could even be the schema URL. \r\n2. Can you please share examples of credentials where you use two or more type values in addition to the \"VerifiableCredential\". The reason I'm asking is, in my observation VCs typically have the \"VerifiableCredential\" value plus another application specific type. As \"VerifiableCredential\" is replaced in sd-jwt vc by the `typ`value, we have come to the conclusion (for now), a String literal is enough. I'm a bit hesitant to make that an array because I think there might be unintended consequences as clashes between rules defined for the different VC types. ",
          "createdAt": "2023-06-10T12:19:31Z",
          "updatedAt": "2023-06-10T12:19:31Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "@alenhorvat The example you provided is not a valid SD-JWT VC because the `type` cannot be an array. Also note, we have an existing issue to rename `type` which would have an impact on your example. In your new example, `iat` is supposed to be at the top-level and not inside the `validity` claim. Does this answer your question?\r\n\r\nIf you want to have something changed, please create a more specific issue.",
          "createdAt": "2023-10-04T11:32:33Z",
          "updatedAt": "2023-10-04T11:32:33Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "No. If it cannot be mapped, it's quite an issue. Ignore the \"validity\" claim.",
          "createdAt": "2023-10-04T11:59:57Z",
          "updatedAt": "2023-10-04T11:59:57Z"
        },
        {
          "author": "peacekeeper",
          "authorAssociation": "NONE",
          "body": "> I guess \"credentialSubject\" is intended to be used for holder binding.\r\n\r\n> credentialSubject contains domain-specific claims about the subject (name, ...)\r\n\r\nThis example also uses \"credentialSubject\": https://datatracker.ietf.org/doc/html/draft-ietf-oauth-selective-disclosure-jwt-04#name-example-4a-w3c-verifiable-c",
          "createdAt": "2023-10-14T16:49:39Z",
          "updatedAt": "2023-10-14T16:49:39Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "@alenhorvat IMO, a mapping can always be done but imo, those mappings have to be done based on a specific W3C VCDM type. Does this answer your question?  ",
          "createdAt": "2023-11-27T03:43:35Z",
          "updatedAt": "2023-11-27T03:43:35Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "@awoie, thank you. I'd like to be able to give guidelines to the devs for the core data model defined in this document. Case relevant to this specification: how to map a VC to this data model. IMO the mapping pattern should be generic.",
          "createdAt": "2023-11-27T07:44:56Z",
          "updatedAt": "2023-11-27T07:44:56Z"
        },
        {
          "author": "peacekeeper",
          "authorAssociation": "NONE",
          "body": "Regarding mapping VCDM `type` (array) and JWT `vct` (single value), someone in the EU ARF community proposed that the array values could be concatenated and separated by a `;` semicolon, e.g. `\"vct\": \"VerifiableAttestation;VerifiableID\"`, but I think hacks like that will never work in practice...",
          "createdAt": "2023-11-27T08:18:22Z",
          "updatedAt": "2023-11-27T08:18:22Z"
        },
        {
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "body": "I believe there will be situations where both\n- an SD-JWT-VC vct already exists\n- an corresponding jsonld type already exists\n\nIn these cases an automatic general purpose transformation would not work.\nSo in my opinion it depends on the use case.",
          "createdAt": "2023-11-27T17:47:51Z",
          "updatedAt": "2023-11-27T17:47:51Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "Since this draft is far less used and implemented as VCDM, is there an option to make this data model open enough to make mapping possible?",
          "createdAt": "2023-11-27T17:58:51Z",
          "updatedAt": "2023-11-27T17:58:51Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "> Since this draft is far less used and implemented as VCDM, is there an option to make this data model open enough to make mapping possible?\r\n\r\nWhy do you think a mapping is not possible? IMO, the mapping has to be done on a specific `vct` credential type since prior knowledge of context URIs, and VC metadata is required.\r\n\r\nWhat would be the purpose of such a mapping? Is the goal that on the other end, you would get an unsecured VCDM credential?",
          "createdAt": "2023-12-04T16:49:31Z",
          "updatedAt": "2023-12-04T16:49:31Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Perhaps we can add a JSON patch to the Credential Metadata which is type-specific that converts the SD-JWT VC to a VCDM.",
          "createdAt": "2023-12-04T17:01:48Z",
          "updatedAt": "2023-12-04T17:01:48Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "I suggest we mark this as pending close since we agreed to move towards https://github.com/danielfett/sd-jwt-vc-dm. I suggest closing this issue after 1 week unless somebody disagrees.",
          "createdAt": "2024-03-12T14:11:23Z",
          "updatedAt": "2024-03-12T14:11:23Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "Hi. @awoie @danielfett, is the latest PR (https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/251) in line with the agreement to move towards sd-jwt-vc dm?",
          "createdAt": "2024-09-20T14:41:12Z",
          "updatedAt": "2024-09-20T14:41:12Z"
        }
      ]
    },
    {
      "number": 125,
      "id": "I_kwDOJbVClc5omByT",
      "title": "JWT Issuer Metadata: Why is jwks_uri recommended over jwks?",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/125",
      "state": "CLOSED",
      "author": "tlodderstedt",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I would like to understand why the draft recommends use of `jwks_uri` as way to refer to the issuer's key set. I personally would recommend `jwks` as it saves one HTTP request/response. I would only recommend `jwks_uri` for cases where the issuing entity has multiple roles using the same key set and want to keep that in a single place. ",
      "createdAt": "2023-06-13T12:40:58Z",
      "updatedAt": "2023-09-21T09:54:04Z",
      "closedAt": "2023-09-21T09:54:04Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I would recommend having only the jwks_uri. \r\n\r\nIt allows the issuer to manage (rotate, set cache duration, etc) it's keys independent of any other metadata and in a location other than under .well-known, which can be be a difficult place in some deployments to have dynamic content. \r\n\r\nAlso many JWT/JOSE libraries have existing robust support for resolving keys from a JWKS endpoint and dealing with caching and new kid values etc. But the same functionality isn't present for getting the keys from within a JSON document with other content.\r\n\r\nHaving both jwks_uri and jwk complicates things for every entity that is verifying signatures on these things because they have to account for both. \r\n\r\n  \r\n\r\n",
          "createdAt": "2023-06-15T23:19:57Z",
          "updatedAt": "2023-06-15T23:19:57Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "NONE",
          "body": "I agree that jwks Is Better since It doesnt require additional http requests\r\n\r\nThat's why in oidc federation we have enabled jwks also for oidc op\r\n\r\nAnd more, having a static and verifiable attestation of a metadata (signed!) makes the flow possible also in offline use cases, while using jwks_uri won't ",
          "createdAt": "2023-06-16T06:44:15Z",
          "updatedAt": "2023-06-16T06:44:15Z"
        },
        {
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "body": "I think having both options is valid. I agree that I don't see enough reason to recommend one over the other",
          "createdAt": "2023-06-16T08:43:52Z",
          "updatedAt": "2023-06-16T08:43:52Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Agreed to remove recommendation but keeping both options",
          "createdAt": "2023-09-21T09:51:13Z",
          "updatedAt": "2023-09-21T09:51:13Z"
        }
      ]
    },
    {
      "number": 127,
      "id": "I_kwDOJbVClc5oo00F",
      "title": "Add privacy considerations for JWT issuer metadata - privacy concerns",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/127",
      "state": "CLOSED",
      "author": "alenhorvat",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "individual-01",
        "Ready-for-PR"
      ],
      "body": "JWT issuer metadata, as defined in this document, is raising privacy concerns since verifiers will need to contact issuers directly which basically maps to the existing authentication model. Question is, why not just using the existing OIDC/SAML infrastructure instead?",
      "createdAt": "2023-06-13T19:32:02Z",
      "updatedAt": "2023-09-21T09:29:32Z",
      "closedAt": "2023-09-21T09:29:05Z",
      "comments": [
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> JWT issuer metadata, as defined in this document, is raising privacy concerns since verifiers will need to contact issuers directly which basically maps to the existing authentication model.\r\n\r\nI disagree with this assessment. The issuer basically sees the IP address of the inbound HTTPS GET request. The issuer can neither see what user that request is related to nor (depending on the hosting model of the verifier) what verifier. And the verifier can even cache the results, so the issuer won't even get information about any use of credentials. \r\n\r\nThat's fundamentally different from the classical OIDC/SAML model. \r\n\r\n> Question is, why not just using the existing OIDC/SAML infrastructure instead?\r\nWhat do you have in mind?",
          "createdAt": "2023-06-13T20:45:24Z",
          "updatedAt": "2023-06-13T20:45:24Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "> JWT issuer metadata, as defined in this document, is raising privacy concerns since verifiers will need to contact issuers directly which basically maps to the existing authentication model. Question is, why not just using the existing OIDC/SAML infrastructure instead?\r\n\r\nI don't think that this is an issue for non-malicious issuers. Normally, there is no correlation between the issuer key and the user (citizen). This is because the issuer probably uses the same key for a large number of users and VCs.\r\n\r\nHowever, if an issuer would create keys per user, then indeed the issuer could track a user but this is something that would be detectable and it probably also have some legal implications for the issuer. In general, we can agree this is something that when becomes public, would harm the reputation of the issuer. Furthermore, hi-assurance VC issuers would probably want to use HSMs for signing which in that case would be impractical for cost-efficiency reasons. HSMs are expensive. I do agree though that there is a risk that malicious issuers could create special keys for special users i.e. targeted attacks, but this would be also detectable.\r\n\r\nI suggest that we should add something to the privacy considerations section. ",
          "createdAt": "2023-06-21T15:35:36Z",
          "updatedAt": "2023-06-21T15:36:40Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Added privacy considerations; PR #48 got merged, closing this issue.",
          "createdAt": "2023-09-21T09:29:32Z",
          "updatedAt": "2023-09-21T09:29:32Z"
        }
      ]
    },
    {
      "number": 128,
      "id": "I_kwDOJbVClc5oo3Ec",
      "title": "What is the benefit of defining a VC-like data model with JWT claims?",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/128",
      "state": "CLOSED",
      "author": "alenhorvat",
      "authorAssociation": "NONE",
      "assignees": [
        "awoie"
      ],
      "labels": [
        "Ready-for-PR",
        "wg-02"
      ],
      "body": "Data model in this document resembles to the ID Token data model as defined in OIDC (with the addition of cnf).\r\n\r\nOn the other hand, the data model is trying to follow the W3C VC data model.\r\nWhat is the benefit of this data model over the W3C VC data model (except that the claim names are different and iss can be a URI, and not an object and that JSON-LD is not supported by the data model, which basically excludes some significant use cases such as Europass that are leveraging JSON-LD for internationalization, for example)?",
      "createdAt": "2023-06-13T19:39:17Z",
      "updatedAt": "2024-02-21T18:23:51Z",
      "closedAt": "2024-02-21T18:23:50Z",
      "comments": [
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It is simple, leverages all predefined JWT claims (including eKYC), and can be used by people familiar with the JWT model to also implement VCs - with SD-JWT also with selective disclosure capabilities. So it clearly gives an easy migration path from the federated to the issuer-holder-verifier model. \r\n\r\nWe tested the idea with some projects and communities and it seems a lot of implementers like that. \r\n\r\nRegarding Europass and other JSON-LD-based credential schemes. There could be another spec defining how SD-JWT could be used with JSON-LD. \r\n",
          "createdAt": "2023-06-13T20:32:13Z",
          "updatedAt": "2023-06-13T20:32:13Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "eKCY defines its own data model same as for ID Token. eKYC can be easily mapped to VCs.\r\nThe only real difference is the name of the metadata claims (iss vs issuer, iat vs validFrom, etc.)\r\n\r\nBut SD-JWT can be used with W3C VCs (bot as SD-JWT is and W3C VCs as they are).",
          "createdAt": "2023-06-13T20:42:53Z",
          "updatedAt": "2023-06-13T20:42:53Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "eKYC defines an extension that can be used in any JWTish environment. Doesn't work with W3C VCs due to the split between subject related data (credentialSubject) and metadata (evidence). Ask Mark Haine. \r\n\r\n> But SD-JWT can be used with W3C VCs (bot as SD-JWT is and W3C VCs as they are).\r\nnot sure what you mean. can you please explain.  ",
          "createdAt": "2023-06-13T20:50:54Z",
          "updatedAt": "2023-06-13T20:50:54Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "We did some mapping in the past (it was some time ago, and I don't remember how far we got):\r\n\r\nEvidence in VCs is optional and the model and use of evidence for eKYC doesn't make a lot of sense since eKYC already defines the full data model. eKYC can be nicely modelled within the credential subject. There were discussions around re-using the model of eKYC for expressing different levels of verifications.\r\n\r\nEssentially it was something like:\r\n\r\n\r\n\r\n```json\r\n{\r\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r\n    \"title\": \"Verifiable Global ID\",\r\n    \"description\": \"Schema of the Verifiable Global ID for a natural person\",\r\n    \"type\": \"object\",\r\n    \"allOf\": [{\r\n            \"$ref\": \"./verifiable-attestation-v1.json\"\r\n        },\r\n        {\r\n            \"properties\": {\r\n                \"credentialSubject\": {\r\n                    \"$ref\": \"#/definitions/credentialSubjectDef\"\r\n                }\r\n            }\r\n        }\r\n    ],\r\n    \"definitions\": {\r\n        \"credentialSubjectDef\": {\r\n            \"allOf\": [{\r\n                    \"properties\": {\r\n                        \"id\": {\r\n                            \"description\": \"Defines the DID of the subject that is described by the Verifiable Attestation. This identifier is usually used for cryptographic binding.\",\r\n                            \"type\": \"string\",\r\n                            \"format\": \"uri\",\r\n                            \"examples\": [\"did:ebsi:z...\", \"did:key:...\"]\r\n                        },\r\n                        \"claims\": {\r\n                            \"type\": \"object\",\r\n                            \"properties\": {\r\n\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    \"$ref\": \"./e-kyc-verified_claims-2022-08.json#/definitions/verified_claims_def2\"\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nverifiable-attestation-v1.json is the VC data model\r\ne-kyc-verified_claims-2022-08.json#/definitions/verified_claims_def2 - is the JSON schema of the eKYC",
          "createdAt": "2023-06-13T21:07:09Z",
          "updatedAt": "2023-06-13T21:07:09Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Just had a chat with Alen about typing and want to share the conclusion. \r\nWe think typing happens on the following levels:\r\n\r\n1. Payload of a (HTTPS) response - here, a processor needs to know how to process the object (blob). So on this level, the media types `application/jose` or `application/jose+json` should be used. \r\n1. JOSE header - on that level, the `typ` determines how the payload of the JWS shall be processed. `vc+sd-jwt` fits on that level. It governs the format (SD-JWT, which implies JSON) and what claims MUST be present (e.g. `iss` and `type`). Those claims are related to security of and trust in the credential. They are not related to the further domain specific structure of the credential. \r\n1. In SD-JWT VC, we use the `type` claim to determine the structure/schema beyond the basic structure determined by the `typ` JOSE header. A university credential, for example, will have different rules for the schema of the payload than a drivers license. \r\n\r\n@danielfett @c2bo @awoie @tplooker @Sakurann @paulbastian @selfissued Please let us know, whether we are on the same page. If so, it might be beneficial to add some text along those lines to the draft. \r\n\r\n  ",
          "createdAt": "2023-06-15T10:30:17Z",
          "updatedAt": "2023-06-15T10:30:53Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "on point 1, I think that is ruled by the underlying protocol - OID4VP/OID4VP define those (`application/x-www-form-urlencoded` and `application/json`) I do not think sd-jwt vc draft should say anything about that.\r\n\r\non points 2 and 3, i think i agree",
          "createdAt": "2023-06-16T06:02:59Z",
          "updatedAt": "2023-06-16T06:02:59Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "to answer the original question raised in the issue,\r\n- the way VCDM 2.0 is going, it requires data model to be JSON-LD and processed according to JSON-LD rules, so things like `@context is in the payload, we put it to be conformant, but are not processing it` will not be conformant.\r\n- the value of VCDM IMO is defining the concept of a credential in a three party model: issued credential must contain the issuer, the subject, claims about the subject, metadata about the issuance of that credential (iat, exp, etc.) and optionally a cryptographic key. that's it. How to map it to the JWT claims is not the expertise of w3c vc wg nor is well-defined in the documents produced by that group.\r\n- VCDM itself is silent about how to sign/process the `data model`\r\n\r\nI would absolutely not equate ID Token data model to a VC data model. VC data model needs one step to get to the ID Token usability which is defining how the concepts defined in VCDM are mapped to the JWT claims and how to sign/process that JWT claimset, which is what this sd-jwt vc draft attempts to do.",
          "createdAt": "2023-06-16T06:11:37Z",
          "updatedAt": "2023-06-16T06:11:37Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@Sakurann \r\n\r\n> OID4VP/OID4VP define those (application/x-www-form-urlencoded and application/json) I do not think sd-jwt vc draft should say anything about that.\r\n\r\nI think we need to at least scope the media type definition in the spec as those definitions are related to the `typ` only, not request payload. ",
          "createdAt": "2023-06-16T06:15:22Z",
          "updatedAt": "2023-06-16T06:15:22Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "why it can't be left to the protocol? why it can't be `application/json`? just for example: https://openid.bitbucket.io/connect/openid-4-verifiable-credential-issuance-1_0.html#section-7.3-9",
          "createdAt": "2023-06-16T06:19:42Z",
          "updatedAt": "2023-06-16T06:19:42Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "@Sakurann \r\n\r\n_- the way VCDM 2.0 is going, it requires data model to be JSON-LD and processed according to JSON-LD rules, so things like @context is in the payload, we put it to be conformant, but are not processing it will not be conformant._\r\n\r\nPlease check the discussion in https://github.com/w3c/vc-data-model/pull/1088 since the conclusion is different.\r\n@Sakurann What do you understand under LD processing?  (LD processing with VCs is used only by: data integrity proofs, selective disclosure that's been just defined, internationalisation, identity matching, some advanced querying)\r\nSince JWS is not using any of that, JWS protection mechanism is not affected by the -LD part.\r\nHowever, it enable use cases, that want to use the -LD (e.g., ELM v3) for internationalisation etc., to use it.\r\n\r\nWhen VCs are secured with JWS, LD processing is not performed. It MAY be performed, if use case requires it, in the post-processing (after the validation) or rendering phase.\r\n\r\n_- the value of VCDM IMO is defining the concept of a credential in a three party model: issued credential must contain the issuer, the subject, claims about the subject, metadata about the issuance of that credential (iat, exp, etc.) and optionally a cryptographic key. that's it. How to map it to the JWT claims is not the expertise of w3c vc wg nor is well-defined in the documents produced by that group._\r\n\r\nThat's perfectly fine. W3C VCDM is focusing on the VCDM data model.\r\nNote that the current VCDM v2.0, without any JWT claim, is a valid JWT.\r\n\r\n_- VCDM itself is silent about how to sign/process the data model_\r\n\r\nI think this is a good approach of the specification, since it defines a data model. Securing mechanism should be defined by specifications like JAdES which defines a profile for JSON-based AdES.\r\n\r\n\r\n\r\n\r\n",
          "createdAt": "2023-06-16T06:26:38Z",
          "updatedAt": "2023-06-16T06:26:38Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "> why it can't be left to the protocol? why it can't be `application/json`? just for example: https://openid.bitbucket.io/connect/openid-4-verifiable-credential-issuance-1_0.html#section-7.3-9\r\n\r\nReason is simple and it is following the basic architecture/design principles. Signature (e.g., JWS) defines the serialisation and with it the resulting type.  JWS specification cannot and should not know anything about the protocol that will use it.\r\n\r\nWhen a protocol defines a profile or a set of supported elements, the protocol needs to ensure that the media type that's defined consistent with the elements it selected.",
          "createdAt": "2023-06-16T06:33:29Z",
          "updatedAt": "2023-06-16T06:33:29Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@Sakurann Perhaps I did not explain well. \r\n\r\nThis is the media type definition from the spec. \r\n<img width=\"605\" alt=\"image\" src=\"https://github.com/vcstuff/draft-terbu-sd-jwt-vc/assets/328358/1af7d747-1d74-4327-b0bd-969cff564027\">\r\n\r\nIt does not describe the context where the media type `application/vc+sd-jwt` shall be used. So people might think this is a media type that should be used as content type of an HTTP response. I think we agree this is not the case. All I'm suggesting is to document the intended use in the JOSE header (and as format identifier in credential exchange protocols). \r\n\r\nWould you agree?\r\n",
          "createdAt": "2023-06-16T06:37:40Z",
          "updatedAt": "2023-06-16T06:38:24Z"
        },
        {
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "body": "> @Sakurann \n> \n> _- the way VCDM 2.0 is going, it requires data model to be JSON-LD and processed according to JSON-LD rules, so things like @context is in the payload, we put it to be conformant, but are not processing it will not be conformant._\n> \n> Please check the discussion in https://github.com/w3c/vc-data-model/pull/1088 since the conclusion is different.\n> @Sakurann What do you understand under LD processing?  (LD processing with VCs is used only by: data integrity proofs, selective disclosure that's been just defined, internationalisation, identity matching, some advanced querying)\n> Since JWS is not using any of that, JWS protection mechanism is not affected by the -LD part.\n> However, it enable use cases, that want to use the -LD (e.g., ELM v3) for internationalisation etc., to use it.\n> \n> When VCs are secured with JWS, LD processing is not performed. It MAY be performed, if use case requires it, in the post-processing (after the validation) or rendering phase.\n> \n> _- the value of VCDM IMO is defining the concept of a credential in a three party model: issued credential must contain the issuer, the subject, claims about the subject, metadata about the issuance of that credential (iat, exp, etc.) and optionally a cryptographic key. that's it. How to map it to the JWT claims is not the expertise of w3c vc wg nor is well-defined in the documents produced by that group._\n> \n> That's perfectly fine. W3C VCDM is focusing on the VCDM data model.\n> Note that the current VCDM v2.0, without any JWT claim, is a valid JWT.\n> \n> _- VCDM itself is silent about how to sign/process the data model_\n> \n> I think this is a good approach of the specification, since it defines a data model. Securing mechanism should be defined by specifications like JAdES which defines a profile for JSON-based AdES.\n> \n> \n> \n> \n> \n\nI agree that securing JSON-LD as payload with SD-JWT is important work that should be considered and investigated.\nI don't agree that it is a good idea to take VCDM claims and use all of those to secure JWTs, because there are existing claims from JWT claims registry and existing implementations depend on those",
          "createdAt": "2023-06-16T17:44:42Z",
          "updatedAt": "2023-06-16T17:44:42Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "@paulbastian thank you for your feedback and I fully understand your concern. We need to put things into a context: most of those cases operate within closed systems where everything is well defined - data models, verification rules, etc. Within this context, I fully agree with you.\r\n\r\nSecuring JSON-LD can be done today by JAdES (pure JWS, no JWT). I believe it is worth to read and reflect on it\r\nhttps://www.etsi.org/deliver/etsi_ts/119100_119199/11918201/01.01.01_60/ts_11918201v010101p.pdf\r\n\r\nFrom my experience, the @context is really processed (in most cases) outside of the verification scope/process. There are signatures that rely on the context, however, that's not relevant for JWS and this discussion. (In a brute-force scenario context can be embedded/inline and problem solved - size is the price to pay - not in the scope of this discussion)\r\n\r\nSince JWT specifies that all claims are optional, libraries should be able to process JWT tokens without any JWT claims (I know how it sounds). From experience, JWS/JWT libraries verify the signature, other verifications are performed manually. People could also argue that VCs are used. This direction won't lead to a solution.\r\n\r\nID Token and eKYC define rules for the JWT claims when they are secured with JWS. I believe there are many other use cases that define profiles, rules, etc.\r\n\r\nIn an open multi-use case system, there are additional challenges and we had a good discussion with Torsten on the topic where we identified several points that should be considered.\r\n\r\nIt is worth reflecting on the designs of\r\n- JWS\r\n- JAdES\r\n- linked data proofs\r\n- VCDM v2\r\non their data model and serialisation.\r\n\r\nBack to my question:\r\nWhat is the real benefit of this data model over the W3C VC data model by looking at the situation objectively?\r\n(I'm also trying to find an answer to the question)\r\n\r\nWith Torsten we had a very fruitful discussion. We need to reflect on several elements.\r\n\r\nHave a nice weekend!",
          "createdAt": "2023-06-16T18:32:03Z",
          "updatedAt": "2023-06-16T18:32:03Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "@paulbastian , I missed one point.\r\n> I agree that securing JSON-LD as payload with SD-JWT is important work that should be considered and investigated. I don't agree that it is a good idea to take VCDM claims and use all of those to secure JWTs, because there are existing claims from JWT claims registry and existing implementations depend on those\r\n\r\nCan you please elaborate on \"take VCDM to secure JWT\"? \r\nIf my understanding is correct (sometimes is, sometimes isn't), it is JWS the one secures the payload (and it can be any JSON). JWT claims define contextual information: who, validity, about who, for whom. We should reflect on sigTst from JAdES.\r\n\r\nI'm personally not proposing to use VCDM to protect a JWT. VCDM and JWT are both protected by JWS.",
          "createdAt": "2023-06-16T18:37:02Z",
          "updatedAt": "2023-06-16T18:37:02Z"
        },
        {
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "body": "As an example, iss and cnf are registered claim names for JWTs that are used to secure the VC. Existing RFCs are using those. Therefore it doesn't make sense to overwrite those by the w3c data model in my opinion",
          "createdAt": "2023-06-18T13:33:04Z",
          "updatedAt": "2023-06-18T13:33:04Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "Thank you @paulbastian. I understand your view. If VC claims were registered, what would be the benefit of the data model over VCDM? \r\n\r\nSince I\u2019m involved in projects that use VCDM (in JSON and JSON-LD) and also JWT I would really like to understand the objective benefits od the data model. ",
          "createdAt": "2023-06-18T14:18:15Z",
          "updatedAt": "2023-06-18T14:18:15Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "To resolve this issue, we will add a section on relationship to other documents and include a chapter on \"VCDM\".",
          "createdAt": "2023-06-23T09:28:08Z",
          "updatedAt": "2023-06-23T09:28:08Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "This issue is ready for a PR.",
          "createdAt": "2023-06-23T09:28:23Z",
          "updatedAt": "2023-06-23T09:28:23Z"
        }
      ]
    },
    {
      "number": 129,
      "id": "I_kwDOJbVClc5oy0QP",
      "title": "Same typ for JWT and SD-JWT?",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/129",
      "state": "CLOSED",
      "author": "tlodderstedt",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "discuss",
        "pending close"
      ],
      "body": "Should we consider to use the same `typ` header value for both variants, JWT and SD-JWT? I came across this when I was thinking about the OID4VC credential format profile for JWT-based VCs. A single `typ` would also result in a single format identifier in the presentation request, which might everyone's live easier. The only reason to distinguish would be that a dedicated format identifier for sd-jwt would allow the processor to directly decide whether selective disclosure is allowed in the presentation definition.\r\n\r\n_Originally posted by @tlodderstedt in https://github.com/vcstuff/draft-terbu-sd-jwt-vc/pull/120#discussion_r1229300126_\r\n            ",
      "createdAt": "2023-06-15T06:46:26Z",
      "updatedAt": "2023-06-23T09:29:40Z",
      "closedAt": "2023-06-23T09:29:40Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Would it make sense to have the spec be only about SD-JWT VCs and treat the plain JWT VC as just a special case of an SD-JWT with no selectively disclosable claims? Then there wouldn't be variants and a single typ header value falls out naturally. ",
          "createdAt": "2023-06-15T17:40:51Z",
          "updatedAt": "2023-06-15T17:40:51Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "I guess after we merged PR #131 it seems we have decided to go with a single value for JWT VCs and SD-JWT VCs. Can we close this issue @tlodderstedt ?",
          "createdAt": "2023-06-21T15:22:51Z",
          "updatedAt": "2023-06-21T15:22:51Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "As per editor's call from June 23rd, closing this since it was addressed by #131.",
          "createdAt": "2023-06-23T09:29:40Z",
          "updatedAt": "2023-06-23T09:29:40Z"
        }
      ]
    },
    {
      "number": 130,
      "id": "I_kwDOJbVClc5o1JEl",
      "title": "Align claims for Type and Status with JWT claims",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/130",
      "state": "CLOSED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [
        "danielfett"
      ],
      "labels": [
        "wg-01"
      ],
      "body": "I think we should use short JWT-style names for the type and status list claims in order to show that these claims are at the core of the JWT (just like `exp`, `iss`, etc.). I therefore propose that we use `scm` (for \"scheme\", since the short form of \"type\" is already taken) and `stu` (for status list URI).",
      "createdAt": "2023-06-15T12:50:33Z",
      "updatedAt": "2023-10-23T16:40:27Z",
      "closedAt": "2023-10-23T16:40:26Z",
      "comments": [
        {
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't think that this document is the right place for these things, as things should and are being described in the corresponding specification: https://github.com/vcstuff/draft-looker-jwt-cwt-status-list \r\nIf there a discussions on the claim names, this should happen over there",
          "createdAt": "2023-06-16T12:35:25Z",
          "updatedAt": "2023-06-16T12:35:25Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "Hi.\r\n\r\nDepends on the data model design/extension capabilities. There are 2 options:\r\na) This specification defines a claim (e.g., status/stu/...) as object with mandatory property type. Any other specification can then extend the claim, like the example in the previous comment\r\nb) This specification does not define the status claim, other specifications define the additional claim etc.\r\n\r\nWith a) there's a better control over the data model and the approach is more interoperable, since the claim name is always the same, and the validation rules depend on the \"type\"/sub-type. In our projects, where we support several status methods (since there's no on-fits-all solution), this approach is more appropriate.\r\n\r\nWith b) every \"status\" specification needs to define their own data model (essentially), and there's always a risk that compatibility is broken; e.g., by setting required claims as optional, selecting different claim names, etc.\r\n\r\nsimplest definition would be (in terms of a JSON schema):\r\n\r\n```yaml\r\nstatus:\r\n  description: >-\r\n    discovery of information about the current status of the credential, such as\r\n    whether it is suspended or revoked.\r\n  type: object\r\n  required:\r\n    - type\r\n  properties:\r\n    type:\r\n      description: >-\r\n        Claim that expresses the status type (and with it the vocabulary and the\r\n        validation rules) The type MUST be understood within the context of the\r\n        Trust Framework under which the credential has been issued. Type also\r\n        defines other optional/required claims.\r\n      type: string\r\n\r\n```",
          "createdAt": "2023-06-21T08:33:04Z",
          "updatedAt": "2023-06-21T08:35:03Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "@danielfett @tlodderstedt @paulbastian @awoie  the design decision, whatever it is, should be applied consistently to all elements that can be extended according to this specification.",
          "createdAt": "2023-06-21T08:49:52Z",
          "updatedAt": "2023-06-21T08:49:52Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "> stu\r\n\r\nI agree that `status` should be defined in https://github.com/vcstuff/draft-looker-jwt-cwt-status-list. ",
          "createdAt": "2023-06-21T15:16:51Z",
          "updatedAt": "2023-06-21T15:16:51Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "I'd not recommend using `scm` (or scheme) since this could be confused with JSON schemas (which might be a feature we could add in the future).",
          "createdAt": "2023-06-21T15:18:11Z",
          "updatedAt": "2023-06-21T15:18:11Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "> > stu\r\n> \r\n> I agree that `status` should be defined in https://github.com/vcstuff/draft-looker-jwt-cwt-status-list.\r\n\r\nThis means option b) above?",
          "createdAt": "2023-06-21T15:21:12Z",
          "updatedAt": "2023-06-21T15:21:12Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> the short form of \"type\" is already taken\r\n\r\nFWIW it's not actually taken. \"typ\" is a registered JOSE header https://www.iana.org/assignments/jose/jose.xhtml#web-signature-encryption-header-parameters but not a registered JWT claim https://www.iana.org/assignments/jwt/jwt.xhtml#claims \r\n\r\n\"type\" is already pretty short and JWT-style though.  Don't necessarily need to change that one. ",
          "createdAt": "2023-06-21T20:32:22Z",
          "updatedAt": "2023-07-05T16:03:37Z"
        },
        {
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "body": "I started the very similar discussion here: https://github.com/vcstuff/draft-looker-oauth-jwt-cwt-status-list/issues/21\n@alenhorvat please take a look at the first draft of jwt status list",
          "createdAt": "2023-06-22T21:43:55Z",
          "updatedAt": "2023-06-22T21:43:55Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "@paulbastian thank you for pointing out the issue and the status list documentation.\r\n\r\nIndeed, the two are related. Here, the overall design decision should be addressed a) or b). Depending on that the JWT status list it will be clear how to bind it to this data model; via type or via claim name. \r\nDoes this make sense?",
          "createdAt": "2023-06-23T06:33:13Z",
          "updatedAt": "2023-06-23T06:33:13Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I would be fine with an external definition of the status list claim as its definition and contents may depend on the mechanim used.\r\n\r\nI still think that a three-letter JWT-style claim instead of `type` would be good (but `typ` would be confusing).",
          "createdAt": "2023-06-23T09:35:15Z",
          "updatedAt": "2023-06-23T09:35:15Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree that `typ` is confusing for the credential type. What about `dty` which is short for Document Type?",
          "createdAt": "2023-06-23T09:37:34Z",
          "updatedAt": "2023-06-23T09:37:34Z"
        },
        {
          "author": "mprorock",
          "authorAssociation": "NONE",
          "body": "Copying from a comment in related PR:\r\nI worry about collisions and confusion with typ (and with cty) - those of us that work with this stuff will likely understand the difference, but there is probably a better descriptor we could use than type for this reason.\r\n\r\nMaybe specifying \"schema\" or \"schemaName\" or \"sn\" (for nice short form) would be more useful here\r\n\r\nPretty strongly opposed to calling the property 'type' but think that the concept needs to be a property for sure ",
          "createdAt": "2023-07-30T22:01:58Z",
          "updatedAt": "2023-07-30T22:01:58Z"
        },
        {
          "author": "mprorock",
          "authorAssociation": "NONE",
          "body": "Also good with 'dty' as suggested above by @awoie ",
          "createdAt": "2023-07-30T22:02:33Z",
          "updatedAt": "2023-07-30T22:02:33Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "NONE",
          "body": "Just FYI\r\n\r\n`type` is used in the [JWT Embedded Tokens](https://www.ietf.org/archive/id/draft-yusef-oauth-nested-jwt-06.html)",
          "createdAt": "2023-07-30T22:28:53Z",
          "updatedAt": "2023-07-30T22:29:03Z"
        },
        {
          "author": "mprorock",
          "authorAssociation": "NONE",
          "body": "> Just FYI\r\n> \r\n> `type` is used in the [JWT Embedded Tokens](https://www.ietf.org/archive/id/draft-yusef-oauth-nested-jwt-06.html)\r\n\r\nYeah - in that case I believe it is inside of token",
          "createdAt": "2023-07-30T22:32:50Z",
          "updatedAt": "2023-07-30T22:32:50Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "We could also name it `vct` -> Verifiable Credential Type.",
          "createdAt": "2023-07-31T12:12:13Z",
          "updatedAt": "2023-07-31T12:12:13Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "NONE",
          "body": "@awoie \r\n\r\nI'd prefer Digital Credential Type, then `dct` but I admit that I dream a world where the parameter names are self explanatory.\r\n\r\ndog -> it's a dog\r\ntoken -> it's a token!\r\n\r\neven if we have the `iat` -> issued_at, that's good for me, but for the world I would give to my sons I would like `issued_at`.\r\nBecause once you have read it, you don't need to read the documentation, because the good semantic is self-documentationary. But coming back to the world of the conventions, I'd say\r\n\r\nthe loved ISO 18013-5 defines `docType`, and `doctype` is not so bad.\r\nfrom Digital Credential Type (or Verifiable) I'd remove the first word, so `Credential Type` since the flow is digital ...\r\n\r\n`credential_type` or `dctype` or `vctype` or whatever but  the word `type` would be good to be there ",
          "createdAt": "2023-07-31T21:26:25Z",
          "updatedAt": "2023-07-31T21:26:25Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I plan to do a PR for this, moving to `dct`, but will wait for PRs #173 and #172  to be merged first.",
          "createdAt": "2023-10-18T10:05:46Z",
          "updatedAt": "2023-10-18T10:05:46Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "we call the credentials verifiable credentials not digital credentials, so the claim should be 'vct' in my opinion.",
          "createdAt": "2023-10-22T16:12:10Z",
          "updatedAt": "2023-10-22T16:12:10Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "This has been fixed by using `vct` in the PR linked above.",
          "createdAt": "2023-10-23T16:40:27Z",
          "updatedAt": "2023-10-23T16:40:27Z"
        }
      ]
    },
    {
      "number": 134,
      "id": "I_kwDOJbVClc5pU6bw",
      "title": "cnf and key rotation",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/134",
      "state": "CLOSED",
      "author": "alenhorvat",
      "authorAssociation": "NONE",
      "assignees": [
        "awoie"
      ],
      "labels": [
        "wg-01"
      ],
      "body": "Hi.\r\n\r\nDIDs, allow key rotation. Use case: legal entities/organisations/companies\r\n\r\nhttps://www.rfc-editor.org/rfc/rfc7800\r\n\r\nsays:\r\n\r\n>  By including a \"cnf\" (confirmation) claim in a JWT, the issuer of the\r\n>    JWT declares that the presenter possesses a particular key and that\r\n>    the recipient can cryptographically confirm that the presenter has\r\n>    possession of that key.  The value of the \"cnf\" claim is a JSON\r\n>    object and the members of that object identify the proof-of-\r\n>    possession key.\r\n\r\nkid can be a DID, which is legal according to the rfc7800 (The content of the \"kid\" value is application specific.)\r\n\r\n> issuer of the JWT declares that the presenter possesses a particular key\r\n\r\nCan the holder (legal entity) present the credential with a different key from the one defined in the cnf? E.g., legal entity is rotating keys every year.",
      "createdAt": "2023-06-21T08:41:28Z",
      "updatedAt": "2023-10-23T13:59:41Z",
      "closedAt": "2023-10-23T13:59:41Z",
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "IMO, it is probably a decision of the issuer to include a DID URI for the `kid` and therefore allow the Holder to change the authoritative key. So, I guess this might be possible with the current language, although it is not RECOMMENDED since we have this requirement for `cnf` in 4.2.2.2 Registered JWT Claims ...\r\n\r\n> It SHOULD contain a JWK\r\n\r\nDoes this clarify the question? Is there anything you want us to change in the current spec?",
          "createdAt": "2023-06-21T15:14:19Z",
          "updatedAt": "2023-06-21T15:14:19Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "Yes, but this essentially blocks key rotation. For Natural Persons that's not an issue, but it becomes an issue for Legal Entities.\r\n\r\nIf \"SHOULD\" -> \"MAY\" would be better since we don't want that capabilities are limited by the data model.",
          "createdAt": "2023-06-21T15:19:31Z",
          "updatedAt": "2023-06-21T15:19:31Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Would you be ok to change \"SHOULD\" to \"RECOMMEND\". We only want that JWK is the default mechanism. We don't want to prevent other mechanisms. We will add a informative sentence that describes that other cnf methods are also allowed. Would you be ok with that?",
          "createdAt": "2023-06-23T09:45:36Z",
          "updatedAt": "2023-06-23T09:45:36Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "Hi @awoie . Yes.\r\n\r\nYou plan to keep the requirement for the endpoint (.well-known) or (.well-known) is default you recommend, but other endpoints are possible?",
          "createdAt": "2023-06-23T10:10:22Z",
          "updatedAt": "2023-06-23T10:10:22Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Relates #168 that will explain different means of issuer key discovery and DIDs will become one informative option. We will also changed SHOULD to RECOMMEND to address this issue.",
          "createdAt": "2023-10-04T11:26:02Z",
          "updatedAt": "2023-10-04T11:26:02Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "- PR created to make JWT Issuer Metadata one option -> #175 \r\n- PR created to change SHOULD to RECOMMENDED for JWK in `cnf` -> #176 ",
          "createdAt": "2023-10-22T22:24:53Z",
          "updatedAt": "2023-10-22T22:24:53Z"
        }
      ]
    },
    {
      "number": 135,
      "id": "I_kwDOJbVClc5pWzD6",
      "title": "Presentation should be a plain JWT if no _sd claims are present",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/135",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "discuss"
      ],
      "body": "If the SD-JWT VC contains no `_sd` claims and therefore can be represented as a plain JWT, no trailing tilde should be necessary for presentations.",
      "createdAt": "2023-06-21T13:15:42Z",
      "updatedAt": "2023-09-08T13:19:04Z",
      "closedAt": "2023-09-08T13:19:04Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Current direction is to base credentials without Selective Disclosures on SD-JWT VC and not JWT, so it is an SD-JWT without _sd and disclosures, and not a JWT.",
          "createdAt": "2023-06-21T15:56:39Z",
          "updatedAt": "2023-06-21T15:56:39Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, that is the current direction but my point is that we should potentially change that. The reason is that it is awkward if developers cannot use standard JWT libs for verification and creation without adding/removing the tilde first. ",
          "createdAt": "2023-06-21T15:59:41Z",
          "updatedAt": "2023-06-21T16:00:22Z"
        },
        {
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "body": "My points towards the current approach solving everything with SD-JWT and keeping the tilde:\n- the specification is much cleaner\r\n- I expect implementations to be much cleaner\r\n- I don't see confusion with trailing tilde, because typ is not jwt but sd-jwt\r\n- most interop profiles will require SD support anyway",
          "createdAt": "2023-06-21T19:21:53Z",
          "updatedAt": "2023-06-21T19:21:53Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "@paulbastian you don't see a problem with developers not being able to use standard JWT libs for creating and verifying plain JWT VCs?",
          "createdAt": "2023-06-22T08:49:07Z",
          "updatedAt": "2023-06-22T08:49:07Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Current approach is fine but we should speak with SD-JWT spec authors on removing the tilde.",
          "createdAt": "2023-09-08T13:19:04Z",
          "updatedAt": "2023-09-08T13:19:04Z"
        }
      ]
    },
    {
      "number": 136,
      "id": "I_kwDOJbVClc5pWz9x",
      "title": "Fix presentation examples",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/136",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Ready-for-PR",
        "individual-03"
      ],
      "body": "The examples in Section 6.2 don't contain any Disclosures which is required for the combined format for presentations.",
      "createdAt": "2023-06-21T13:17:37Z",
      "updatedAt": "2023-06-22T09:40:38Z",
      "closedAt": "2023-06-22T09:40:38Z",
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "The Disclosure for `address` is missing.",
          "createdAt": "2023-06-21T13:17:52Z",
          "updatedAt": "2023-06-21T13:17:52Z"
        }
      ]
    },
    {
      "number": 137,
      "id": "I_kwDOJbVClc5pXjQN",
      "title": "Make section on public claims to include private claims as well",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/137",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "pending close"
      ],
      "body": "Currently, we have a section about public claims. This should be either removed or it should be generalized to something like \"Additional Claims\" where it mentions additional private and public claims MAY be added.",
      "createdAt": "2023-06-21T14:47:10Z",
      "updatedAt": "2023-10-04T11:24:03Z",
      "closedAt": "2023-10-04T11:24:02Z",
      "comments": [
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think this issue was already resolved. The current text is \"SD-JWTs VC can contain claims that are registered in \"JSON Web Token Claims\" registry as defined in [RFC7519], as well as public and private claims.\"",
          "createdAt": "2023-07-05T12:49:07Z",
          "updatedAt": "2023-07-05T12:49:07Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing since issue has been addressed.",
          "createdAt": "2023-10-04T11:24:02Z",
          "updatedAt": "2023-10-04T11:24:02Z"
        }
      ]
    },
    {
      "number": 142,
      "id": "I_kwDOJbVClc5p9DVU",
      "title": "Update status list reference",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/142",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "individual-03"
      ],
      "body": "Since the status list draft was published, the spec can update the references accordingly.",
      "createdAt": "2023-06-27T19:19:50Z",
      "updatedAt": "2023-07-18T16:50:35Z",
      "closedAt": "2023-07-18T16:50:35Z",
      "comments": []
    },
    {
      "number": 143,
      "id": "I_kwDOJbVClc5p9bYZ",
      "title": "Clarification on metadata endpoint",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/143",
      "state": "CLOSED",
      "author": "c2bo",
      "authorAssociation": "MEMBER",
      "assignees": [
        "awoie"
      ],
      "labels": [
        "HAS PR",
        "wg-01"
      ],
      "body": "There was an on-going discussion in #101 on the new metadata endpoint, but the discussion should have it's own issue (separated from the naming issue).\r\n\r\nImho, we should add a section that adds more clarity on the intended use of the endpoint introduced in this spec during verification (e.g., by making the resolution of the key using this endpoint mandatory during verification if the JWS header indicates web-based key resolution).\r\nPerhaps adding a small part to the \"Verification and Processing\" section makes sense?\r\n\r\nPrior discussion was here: https://github.com/vcstuff/draft-terbu-sd-jwt-vc/issues/101#issuecomment-1595828680",
      "createdAt": "2023-06-27T20:35:00Z",
      "updatedAt": "2023-10-23T16:39:09Z",
      "closedAt": "2023-10-23T16:39:09Z",
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Relates to #168 ",
          "createdAt": "2023-10-04T11:23:25Z",
          "updatedAt": "2023-10-04T11:23:25Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed by #175 ",
          "createdAt": "2023-10-23T15:24:38Z",
          "updatedAt": "2023-10-23T15:24:38Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this issue since we merged PR #175 ",
          "createdAt": "2023-10-23T16:39:09Z",
          "updatedAt": "2023-10-23T16:39:09Z"
        }
      ]
    },
    {
      "number": 144,
      "id": "I_kwDOJbVClc5qD_W2",
      "title": "examples for ARF.",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/144",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "danielfett"
      ],
      "labels": [
        "wg-04"
      ],
      "body": "moving @tlodderstedt's and my work on adding examples how to represent PID/EAA/mDLs as SD-JWT VC to this repo from the sd-jwt repo.\r\nEAA: https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/211\r\nmDL: https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/144 and https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/233\r\nPID as a reference point: https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/304- ",
      "createdAt": "2023-06-28T17:54:26Z",
      "updatedAt": "2024-03-26T18:17:30Z",
      "closedAt": "2024-03-26T18:17:30Z",
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "With the PID example included, can we close this issue, or are there other examples needed as well?",
          "createdAt": "2024-03-12T14:00:16Z",
          "updatedAt": "2024-03-12T14:00:16Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Yes, this can be closed now.",
          "createdAt": "2024-03-26T18:17:30Z",
          "updatedAt": "2024-03-26T18:17:30Z"
        }
      ]
    },
    {
      "number": 145,
      "id": "I_kwDOJbVClc5qEpxU",
      "title": "how cnf claim can be used with any other types of \"binding\"",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/145",
      "state": "OPEN",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "danielfett"
      ],
      "labels": [
        "future-extension"
      ],
      "body": "like biometrics-based binding\r\n\r\nTorsten started with this example in [this PR in sd-jwt repo](https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/210/files) but i do not think it's viable anymore: \r\n\r\n```\r\n    \"binding\":\r\n      [\r\n        {\r\n          \"type\": \"CryptographicBinding2022\",\r\n          \"cnf\":\r\n            {\r\n              \"jwk\":\r\n                {\r\n                  \"kty\": \"RSA\",\r\n                  \"n\": \"0vx7agoebGcQSuuPiLJXZptN9nndrQmbXEps2aiAFbWhM78LhWx4cbbf\r\n                    AAtVT86zwu1RK7aPFFxuhDR1L6tSoc_BJECPebWKRXjBZCiFV4n3oknjhMst\r\n                    n64tZ_2W-5JsGY4Hc5n9yBXArwl93lqt7_RN5w6Cf0h4QyQ5v-65YGjQR0_F\r\n                    DW2QvzqY368QQMicAtaSqzs8KJZgnYb9c7d0zgdAZHzu6qMQvRL5hajrn1n9\r\n                    1CbOpbISD08qNLyrdkt-bFTWhAI4vMQFh6WeZu0fM4lFd2NcRwr3XPksINHa\r\n                    Q-G_xBniIqbw0Ls1jF44-csFCur-kEgU8awapJzKnqDKgw\",\r\n                  \"e\": \"AQAB\",\r\n                },\r\n            },\r\n        },\r\n        { \"type\": \"BiometricBinding2022\", \"template\": \"...\" },\r\n      ]\r\n```",
      "createdAt": "2023-06-28T19:25:10Z",
      "updatedAt": "2025-10-02T17:08:29Z",
      "closedAt": null,
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "That is similar to the holder binding proposal in W3C that @paulbastian and myself authored. I'm wondering if you would expect `binding` to be defined by the SD-JWT VC spec, or is this a domain-specific claim? If we want to add something like this to SD-JWT VC and express some sort of holder authentication based on cryptographic binding, then this would relate to this: https://github.com/vcstuff/draft-terbu-sd-jwt-vc/issues/116\r\n\r\nQuestions:\r\n1. What does `binding` express in that case? Is it Holder authentication?\r\n1. Is the idea to add `binding` to SD-JWT VC?\r\n\r\nRegarding your example, I think there is no reason to have the `cnf` claim so many levels down in the JSON. I'd keep it a top-level claim. \r\n\r\nWhat about the following?\r\n\r\n```\r\n{\r\n  \"cnf\": {\r\n    \"kid\":\"some-kid-123\",\r\n    \"jwk\": { // OR\r\n      \"kid\":\"some-kid-123\",\r\n      \"x\", \"...\", \"y\":\"...\", ...\r\n    }\r\n  },\r\n  \"binding\":[{\r\n    \"kid\": \"some-kid-123\",\r\n    \"some_metadata\": \"...\"\r\n  }]\r\n}\r\n```\r\nNote that `kid` is a valid cnf method.\r\n\r\nOR\r\n\r\n```\r\n{\r\n  \"cnf\": {\r\n    \"jwk\": {\r\n      \"kid\": \"some-kid-123\",\r\n      \"...\",\r\n    }\r\n  },\r\n  \"binding\":[{\r\n    \"kid\": \"some-kid-123\",\r\n    \"some_metadata\": \"...\"\r\n  }]\r\n}\r\n```\r\n\r\nOR\r\n\r\n```\r\n{\r\n  \"cnf\": {\r\n    \"jwk\": {\r\n      \"kid\": \"some-kid-123\",\r\n      \"...\",\r\n    }\r\n  },\r\n  \"binding\":{\r\n    \"kid\": \"some-kid-123\",\r\n    \"some_other_binding_method\": { \"...\" }\r\n  }\r\n}\r\n```\r\n\r\nNote that the approach above uses a similar extensibility model to `cnf`.",
          "createdAt": "2023-06-29T08:59:04Z",
          "updatedAt": "2023-06-30T07:46:31Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@awoie I created that example based on you proposal ;-)\r\n\r\nHave you implemented any of the proposed options? I'm asking since I have come to the conclusion that it is to pre-mature to standardize the representation of bindings. I would like to see more requirements, concrete use cases and implementations before. ",
          "createdAt": "2023-06-29T20:09:54Z",
          "updatedAt": "2023-06-29T20:09:54Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "> @awoie I created that example based on you proposal ;-)\r\n> \r\n> Have you implemented any of the proposed options? I'm asking since I have come to the conclusion that it is to pre-mature to standardize the representation of bindings. I would like to see more requirements, concrete use cases and implementations before.\r\n\r\nWe have only an implementation based on the W3C VCDM. Back then we used the binding in the VP actually. So, no, we don't have an implementation.",
          "createdAt": "2023-06-30T07:33:44Z",
          "updatedAt": "2023-06-30T07:33:44Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "@Sakurann what do you want to have changed, or was this just a question and we can we close this issue?",
          "createdAt": "2023-10-04T11:21:36Z",
          "updatedAt": "2023-10-04T11:21:36Z"
        },
        {
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "body": "We had a Session on this topic at IIW#37.\r\nI still support the ideas that Oliver, I and others described at RWOT#11 Holding Binding Paper.\r\n\r\nIn my opinion, the `cnf` claim is the form of binding for cryptogaphic keys.\r\nThe alternative binding mechanisms are either claim-based bindings or biometric (claim-based) binding.\r\nToday, there is no equivalent for these claim-based bindings in the SD-JWT-VC Data model and I would suggest something like `cbb` for claim-based bindings.\r\n\r\nLets take an example as a diploma. The trivial data model could look like:\r\n```json\r\n{\r\n  \"title\" : \"Master of Science in Physics\",\r\n  \"grade\" : \"excellent\",\r\n  \"given_name\" : \"Erika\",\r\n  \"family_name\" : \"Mustermann\",\r\n  \"date_of_birth\" : \"1970-01-01\"\r\n}\r\n```\r\n\r\nHowever, this does not communicate which claims are \"actually\" about the diploma and which ones the diploma issuer used to authenticate the subject and are intended for a relying party to validate user binding of the diploma. The fact that firstname, lastname and birthdate are used for \"binding\" the diploma is just common human knowledge but not explicitly communicated, the semantic meaning is missing.\r\n\r\nA simple approach therefore could be:\r\n```json\r\n{\r\n  \"title\" : \"Master of Science in Physics\",\r\n  \"grade\" : \"excellent\",\r\n  \"cbb\" : {\r\n    \"given_name\" : \"Erika\",\r\n    \"family_name\" : \"Mustermann\",\r\n    \"date_of_birth\" : \"1970-01-01\"\r\n  }\r\n}\r\n```\r\nOther approaches inside `cbb` are possible.\r\n\r\n`cbb` is not anything mandatory for the Relying Party and things might be different in various jurisdictions. One of the key questions is wehther these policy shall be inside vc or in metadata. I would prefer to have some guidance inside the VC.",
          "createdAt": "2023-10-18T08:56:12Z",
          "updatedAt": "2023-10-18T08:56:12Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "I know we discussed this in our paper but can we summarize what we want to achieve @Sakurann @paulbastian. Is this about specifying how the RP wants to verify the holder authenticated the transaction?",
          "createdAt": "2023-11-27T03:48:28Z",
          "updatedAt": "2023-11-27T03:48:28Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "IMO, `cnf` and its definition \"Cryptographic Key Binding\" is currently also a bit underspecified in our specification.",
          "createdAt": "2023-11-27T03:50:15Z",
          "updatedAt": "2023-11-27T03:50:15Z"
        },
        {
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "body": "> I know we discussed this in our paper but can we summarize what we want to achieve @Sakurann @paulbastian. Is this about specifying how the RP wants to verify the holder authenticated the transaction?\r\n\r\nI would frame it as \"give the RP guidance on how to verify legitimate ownership of the credential\". RPs are free to do whatever, they may also ignore a `cnf`.\r\n\r\nMy main argument is that the key for keybinding could be in any random claim, but people chose to standardize what the issuer of a token intended to be used for verification. There is no difference to claim-based binding. Our intuition that name, surname, date of birth on a diploma shall be used for binding or totally arbitrary despite seeming \"common knowledge\".\r\n\r\nI believe many Issuers will want to use claim-based binding as this is a 1:1 match of what they have been doing with physical documents and it would mean little changes to their processes, so this is actually very important. Same for biometric binding, e.g. mdL portrait like.\r\n\r\nHow can we move this forward?",
          "createdAt": "2024-01-17T20:51:38Z",
          "updatedAt": "2024-01-17T20:51:38Z"
        },
        {
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "body": "Do we need a separate IETF Draft for biometric+claim-based bindings in JWT or shall this go in here?",
          "createdAt": "2024-01-17T20:52:49Z",
          "updatedAt": "2024-01-17T20:52:49Z"
        },
        {
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "body": "A Draft was proposed at OAuth Security Workshop 2024, showing the examples above, advice was more in this direction:\r\n```json\r\n{\r\n  \"title\" : \"Master of Science in Physics\",\r\n  \"grade\" : \"excellent\",\r\n  \"given_name\" : \"Erika\",\r\n  \"family_name\" : \"Mustermann\",\r\n  \"date_of_birth\" : \"1970-01-01\",\r\n  \"cbb\" : [ \"given_name\", \"family_name\", \"date_of_birth\" ]\r\n}\r\n```\r\n\r\nDiscussion was around whether things should be in policies or metadata, a good argument for this approach/putting it into the JWT is that data available  to the Issuer for binding may not always be the same based on the quality of his user database.\r\n\r\nThe approach would work really well for countries like Estonia that have a unique national identifier in the PID.\r\n\r\n```json\r\n{\r\n  \"title\" : \"Master of Science in Physics\",\r\n  \"grade\" : \"excellent\",\r\n  \"given_name\" : \"Erika\",\r\n  \"family_name\" : \"Mustermann\",\r\n  \"some-memberstate.eu/credentials/schemas/pid/national_id\" : \"572047251836\",\r\n  \"cbb\" : [ \"some-memberstate.eu/credentials/schemas/pid/national_id\" ]\r\n}\r\n```\r\n",
          "createdAt": "2024-04-12T12:47:43Z",
          "updatedAt": "2024-04-16T17:05:14Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "FYI, I created in issue in eKYC-IDA to see if there is some overlap: https://bitbucket.org/openid/ekyc-ida/issues/1414/discuss-a-way-to-express-binding-claims",
          "createdAt": "2024-04-17T15:18:50Z",
          "updatedAt": "2024-04-17T15:18:50Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "NONE",
          "body": "WDYT about using an object like\r\n\r\n````\r\n\"binding\": {$type: {claim: ..., any other required by future proof binding type}}\r\n````\r\n\r\nexample\r\n\r\n````\r\n{\r\n  \"title\" : \"Master of Science in Physics\",\r\n  \"grade\" : \"excellent\",\r\n  \"given_name\" : \"Erika\",\r\n  \"family_name\" : \"Mustermann\",\r\n  \"some-memberstate.eu/credentials/schemas/pid/national_id\" : \"572047251836\",\r\n  \"credential_binding\" : {\r\n     \"claims\": [\"some-memberstate.eu/credentials/schemas/pid/national_id\" ]\r\n  }\r\n}\r\n````\r\n\r\nthis may open the possibility to specify other types, like`credential_binding.hkb` referencing cnf.jwk or any other key binding type\r\n\r\n",
          "createdAt": "2024-04-17T18:23:42Z",
          "updatedAt": "2024-04-17T18:23:42Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "I believe @paulbastian is working on a proposal.",
          "createdAt": "2024-04-30T17:10:04Z",
          "updatedAt": "2024-04-30T17:10:04Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I am not convinced this should be in the JWT itself or that this spec is the appropriate place to define such a thing. Having said that, something like the `\"cbb\" : [ \"given_name\", \"family_name\", \"date_of_birth\" ]` seems the most reasonable/logical of the ideas in this issue thus far. ",
          "createdAt": "2024-04-30T18:08:21Z",
          "updatedAt": "2024-04-30T18:08:21Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "cross comment from https://github.com/openid/OpenID4VP/issues/161 -> This is a somewhat tangential friendly reminder that the cnf claim specified in [Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs) ](https://datatracker.ietf.org/doc/html/rfc7800)is strictly about representing a proof-of-possession key and is therefore entirely inappropriate as a means of conveying 'claims based binding'.",
          "createdAt": "2024-05-03T14:39:51Z",
          "updatedAt": "2024-05-03T14:39:51Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I talked to Mark Haine today and during the call we identified two ways to stretch the ekyc-IDA spec a bit:\r\n\r\n\u2460 Introduce a new element `claims_ptrs` to point to the relevant claims:\r\n```json\r\n{\r\n  \"iss\": \"https://server.example.com\",\r\n  \"exp\": 1544645174,\r\n  \"given_name\": \"Max\",\r\n  \"family_name\": \"Mustermann\",\r\n  \"verified_claims\": {\r\n    \"verification\": {\r\n      \"trust_framework\": \"example\"\r\n    },\r\n    \"claims_ptrs\": [\r\n      [\"given_name\"],\r\n      [\"family_name\"]\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n\u2461 Define a new special \"claim\" (like `_ptrs`) to point to the verified claims:\r\n```json\r\n{\r\n  \"iss\": \"https://server.example.com\",\r\n  \"exp\": 1544645174,\r\n  \"given_name\": \"Max\",\r\n  \"family_name\": \"Mustermann\",\r\n  \"verified_claims\": {\r\n    \"verification\": {\r\n      \"trust_framework\": \"example\"\r\n    },\r\n    \"claims\": {\r\n        \"_ptrs\": [\r\n          [\"given_name\"],\r\n          [\"family_name\"]\r\n      ]\r\n    }\r\n  }\r\n}\r\n```\r\n",
          "createdAt": "2024-08-14T12:46:43Z",
          "updatedAt": "2024-08-14T12:46:43Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "@Sakurann is this still needed or did you find another solution for this?",
          "createdAt": "2025-09-16T14:39:00Z",
          "updatedAt": "2025-09-16T14:39:00Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I still thinks this need to be solved, but maybe not here and now. This might even become a separate specification.",
          "createdAt": "2025-10-02T17:03:56Z",
          "updatedAt": "2025-10-02T17:03:56Z"
        }
      ]
    },
    {
      "number": 147,
      "id": "I_kwDOJbVClc5qSfc7",
      "title": "vc+jwt",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/147",
      "state": "CLOSED",
      "author": "OR13",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Before https://github.com/w3c/vc-jwt/pull/88 can be closed, this draft must request registration for `vc+jwt`.\r\n\r\nExample text:\r\n\r\n```\r\n### application/vc+jwt {#application-vc-jwt}\r\n\r\nThe Internet media type for a JWT VC is `application/vc+jwt`.\r\n\r\nType name: : `application`\r\n\r\nSubtype name: : `vc+jwt`\r\n\r\nRequired parameters: : n/a\r\n\r\nOptional parameters: : n/a\r\n\r\nEncoding considerations: : binary; A VC JWT is a JWT; JWT values are encoded as a series of base64url-encoded values (some of which may be the empty string) separated by period ('.') characters.\r\n\r\nSecurity considerations: : See Security Considerations in (#security-considerations).\r\n\r\nInteroperability considerations: : n/a\r\n\r\n- Published specification: : RFC TODO\r\n- Applications that use this media type: : Applications that issue, present,\r\n  verify verifiable credentials and presentations.\r\n- Additional information:\r\n  - Magic number(s): n/a\r\n  - File extension(s): n/a\r\n  - Macintosh file type code(s): n/a\r\n  - Person & email address to contact for further information: TBD\r\n  - Intended usage: COMMON\r\n  - Restrictions on usage: none\r\n  - Author: Oliver Terbu <oliver.terbu@spruceid.com>\r\n  - Change controller: IETF\r\n```",
      "createdAt": "2023-06-30T22:46:13Z",
      "updatedAt": "2023-07-18T08:23:47Z",
      "closedAt": "2023-07-18T08:23:47Z",
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Can you give an example of how this media type is used in the spec? Ideally, you could provide an example of the header+payload.",
          "createdAt": "2023-07-03T08:19:16Z",
          "updatedAt": "2023-07-03T08:19:16Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "@OR13 Haven't we agreed that we would use `vc+sd-jwt` to represent non-selective-disclosable SD-JWTs which are plain JWTs? Why is it still required to register this?",
          "createdAt": "2023-07-06T19:16:57Z",
          "updatedAt": "2023-07-06T19:17:04Z"
        },
        {
          "author": "OR13",
          "authorAssociation": "COLLABORATOR",
          "body": "@awoie I didn't agree to that... but regardless, you are walking into an easy argument if you are encouraging token confusion.",
          "createdAt": "2023-07-12T16:41:59Z",
          "updatedAt": "2023-07-12T16:41:59Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Let's discuss in the upcoming meeting.",
          "createdAt": "2023-07-12T17:31:40Z",
          "updatedAt": "2023-07-12T17:31:40Z"
        },
        {
          "author": "OR13",
          "authorAssociation": "COLLABORATOR",
          "body": "Suggest closing ",
          "createdAt": "2023-07-17T17:09:19Z",
          "updatedAt": "2023-07-17T17:09:19Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this issue since we agreed to use vc+sd-jwt.",
          "createdAt": "2023-07-18T08:23:47Z",
          "updatedAt": "2023-07-18T08:23:47Z"
        }
      ]
    },
    {
      "number": 149,
      "id": "I_kwDOJbVClc5qtqBe",
      "title": "\"type\" claim seems underspecified ",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/149",
      "state": "CLOSED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Looking at -02 with kinda fresh eyes and the `type` claim seems like it needs something more. The places it shows up in the draft are linked and quoted below but basically say that the type is the type and gives one meaningless example (`{\"type\": \"SomeType\"}` is not helpful) and later an \"e.g., IdentityCredential\" that seems like it should be meaningful but isn't defined or explained anywhere that I could find. I realize this issue may seem pedantic or even silly but specs need to be specific about things like this or explain why they aren't specific and what the implications are. \r\n\r\nhttps://www.ietf.org/archive/id/draft-terbu-sd-jwt-vc-02.html#section-4.2.2.1\r\n\r\n> This specification defines the JWT claim type. The type claim is used to express the type of the JSON object that is secured by the JWT. The type value MUST be a case-sensitive StringOrURI value.\r\n> The following is a non-normative example of how type is used to express a type:\r\n>`{\"type\": \"SomeType\"}`\r\n\r\n\r\nhttps://www.ietf.org/archive/id/draft-terbu-sd-jwt-vc-02.html#section-4.2.2.2-3.6.1\r\n\r\n>type\r\n> REQUIRED. The type of the Verifiable Credential, e.g., IdentityCredential, as defined in [Section 4.2.2.1](https://www.ietf.org/archive/id/draft-terbu-sd-jwt-vc-02.html#type-claim).\r\n",
      "createdAt": "2023-07-05T21:22:27Z",
      "updatedAt": "2023-08-09T11:29:53Z",
      "closedAt": "2023-08-09T11:29:53Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Over [here](https://github.com/vcstuff/draft-terbu-sd-jwt-vc/issues/11#issuecomment-1562901265) Torsten suggests he sees it as \"as identifier for a pre-defined bundle of claims associated with certain policies for enrollment and issuance\" which may or may not be what it is intended. But is a lot more than the text in the draft says. And further suggests (to me anyway) that there's a gap between what is stated in the draft and what some think is defined. ",
          "createdAt": "2023-07-05T21:29:15Z",
          "updatedAt": "2023-07-05T21:29:15Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I totally agree that we need to improve this definition!",
          "createdAt": "2023-07-10T15:17:40Z",
          "updatedAt": "2023-07-10T15:17:40Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "+1 to adding something like `\"as identifier for a pre-defined bundle of claims associated with certain policies for enrollment and issuance\"` sounds pretty accurate to me.\r\n\r\njfyi I think there is a conversation on renaming `type` claim in Issue #130.",
          "createdAt": "2023-07-17T10:07:22Z",
          "updatedAt": "2023-07-17T10:07:22Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "here is a PR trying to improve the text #153 ",
          "createdAt": "2023-07-17T10:56:55Z",
          "updatedAt": "2023-07-17T10:56:55Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "#153 was merged, closing this issue.",
          "createdAt": "2023-08-09T11:29:53Z",
          "updatedAt": "2023-08-09T11:29:53Z"
        }
      ]
    },
    {
      "number": 150,
      "id": "I_kwDOJbVClc5qzB_L",
      "title": "out of sync with SD-JWT -05",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/150",
      "state": "CLOSED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "There are a number of references to specific section numbers in SD-JWT that are now out of sync and point to the wrong sections or non-existent sections. \r\n\r\nAnd some lingering use of terms like \"Combined Format for XXXXX\" that are no longer used in SD-JWT. ",
      "createdAt": "2023-07-06T15:15:41Z",
      "updatedAt": "2023-08-09T11:35:06Z",
      "closedAt": "2023-08-09T11:35:06Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "And there may well be other changes coming to the section layout https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/290 so it might be prudent to avoid specific section number references (for the time being anyway). ",
          "createdAt": "2023-07-06T15:24:21Z",
          "updatedAt": "2023-07-06T15:24:21Z"
        }
      ]
    },
    {
      "number": 151,
      "id": "I_kwDOJbVClc5q0W7B",
      "title": "explain sd-jwt vc without SD better",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/151",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "HAS PR"
      ],
      "body": "it would be beneficial to explain sd-jwt vc without SD better.\r\nexplanation that seem to resonate is something along the lines of:\r\n\r\n> it's the difference in framing. selective disclosure now becomes a feature of one credential format. no more of \"i use credential format A (current vc-jwt) because i do not need SD, i use credential format B (original sd-jwt vc) because i need SD\". now, it's \"i use sd-jwt vc and turn on SD feature on and off depending on the use-case\" - so it's better for the interop and the code base.\r\n",
      "createdAt": "2023-07-06T19:29:46Z",
      "updatedAt": "2023-09-08T13:21:22Z",
      "closedAt": "2023-09-08T13:21:21Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Addressed in #160.",
          "createdAt": "2023-09-08T13:21:21Z",
          "updatedAt": "2023-09-08T13:21:21Z"
        }
      ]
    },
    {
      "number": 155,
      "id": "I_kwDOJbVClc5sPJiT",
      "title": "Define and add `crit` JWT claim to issuer-signed JWT",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/155",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "discuss"
      ],
      "body": "To make sure that implementers can provide proper tooling to allow others to develop use cases, without prior knowledge of future security-related JWT claims, we should use `crit` claim to allow an issuer to indicate which of the JWT claims a verifier has to process or validate. ",
      "createdAt": "2023-07-21T14:29:48Z",
      "updatedAt": "2023-12-05T05:50:35Z",
      "closedAt": "2023-09-08T13:15:21Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I think this makes sense. I'd like to hear what @bc-pi thinks about this.\r\n\r\n(Internal note: As discussed, we need to note that `crit` affects the technical validity of the token, not any business-process related evaluation. E.g., you can't define a field `stateless_person`, define it as `crit` and expect the receiver to do useful things with this.)",
          "createdAt": "2023-08-03T09:46:10Z",
          "updatedAt": "2023-08-03T09:50:26Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "For better or worse `crit` is defined as a JOSE header parameter https://www.rfc-editor.org/rfc/rfc7519#section-2 and *not* a JWT claim. For something like a `crit` JWT claim to be legitimately useful and relied upon, it really needed to have been defined in the base JWT spec. Defining it after the fact leaves a paradoxical situation where the extension claim has to be understood and processed in order to know what extension claims have to be understood and processed. I'm not convinced that defining a critical JWT claim at this point and in this document is a good idea. \r\n\r\nOff hand, this feels like the kind of thing (what claims are required and what meaning they have security related or otherwise) that would be a part of a particular 'type' (or whatever it might end up being named) definition. \r\n\r\nOr future security-related things could also be placed in the JWS header and use the `crit` header to indicate their criticality. \r\n\r\n\r\n\r\n \r\n\r\n\r\n\r\n\r\n",
          "createdAt": "2023-08-03T12:47:43Z",
          "updatedAt": "2023-08-03T12:47:43Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Thanks! It seems that for now, we should rely on the types to define such things.",
          "createdAt": "2023-09-08T12:42:34Z",
          "updatedAt": "2023-09-08T12:42:34Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Agree with @bc-pi, verifiers will need to look at the particular `type` anyways and all possible \"special \" attributes that are used within the type.",
          "createdAt": "2023-09-08T13:15:21Z",
          "updatedAt": "2023-09-08T13:15:21Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "TIL that OpenID Federation has aspirations for a `crit` JWT claim https://bitbucket.org/openid/connect/pull-requests/682 which I think is similarly problematic. ",
          "createdAt": "2023-12-05T00:00:24Z",
          "updatedAt": "2023-12-05T00:00:24Z"
        },
        {
          "author": "selfissued",
          "authorAssociation": "NONE",
          "body": "I agree with Brian that it's too late to define a `crit` claim that everyone must understand for all JWTs.  That said, it's not too late to define one that particular profiles of JWTs can opt into using and requiring support for.  That's what the Federation definition does.",
          "createdAt": "2023-12-05T00:03:40Z",
          "updatedAt": "2023-12-05T03:12:54Z"
        },
        {
          "author": "selfissued",
          "authorAssociation": "NONE",
          "body": "There's a nuance missing in the discussion above.  Looking at the `typ` to determine the profile, then using the profile will tell you what the claims are specified for use in that kind of JWT.  But if the profile wants to enable extensibility with must-be-understood claims after the profile is defined, the profile needs to include a mandatory-to-understand `crit` claim.",
          "createdAt": "2023-12-05T03:19:42Z",
          "updatedAt": "2023-12-05T03:19:42Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "I also added some thoughts in this issue https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/192 since this one is closed. \r\n\r\nI like the idea of having something like `crit` but specific to SD-JWT VC triggered by the `typ`. Assuming we get consensus on this mechanism, my understanding is now that we would need to define a new claim with similar semantic as `crit` but for JWT claims.",
          "createdAt": "2023-12-05T05:50:34Z",
          "updatedAt": "2023-12-05T05:50:34Z"
        }
      ]
    },
    {
      "number": 159,
      "id": "I_kwDOJbVClc5vxSSZ",
      "title": "KeyBinding JWT header",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/159",
      "state": "CLOSED",
      "author": "paulbastian",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "wg-01"
      ],
      "body": "SD-JWT defines the KB-JWT header, SD-JWT-VC only refers to the claims. Is it necessary to reference to the SD-JWT spec for this?",
      "createdAt": "2023-08-31T09:57:45Z",
      "updatedAt": "2023-10-23T14:41:41Z",
      "closedAt": "2023-10-23T14:41:41Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "We do refer to the Key Binding JWT: https://vcstuff.github.io/draft-terbu-sd-jwt-vc/draft-ietf-oauth-sd-jwt-vc.html#name-key-binding-jwt\r\n\r\nIs there anything else missing?",
          "createdAt": "2023-09-08T12:40:32Z",
          "updatedAt": "2023-09-08T12:40:32Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this issue since #177 got merged.",
          "createdAt": "2023-10-23T14:41:41Z",
          "updatedAt": "2023-10-23T14:41:41Z"
        }
      ]
    },
    {
      "number": 168,
      "id": "I_kwDOJbVClc5xo5Hp",
      "title": "Add informative section on key discovery",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/168",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "awoie"
      ],
      "labels": [
        "HAS PR",
        "wg-01"
      ],
      "body": "Show possible options like JWT Issuer Metadata, `kid` being a DID URL etc.",
      "createdAt": "2023-09-21T09:36:58Z",
      "updatedAt": "2023-10-23T16:38:24Z",
      "closedAt": "2023-10-23T16:38:23Z",
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "We introduced a new section that talks about different key discovery methods during the verification process in PR #175 ",
          "createdAt": "2023-10-23T15:27:30Z",
          "updatedAt": "2023-10-23T15:27:30Z"
        }
      ]
    },
    {
      "number": 171,
      "id": "I_kwDOJbVClc5y14vY",
      "title": "How to choose `type` values for your credential format?",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/171",
      "state": "CLOSED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [
        "danielfett"
      ],
      "labels": [],
      "body": "We need to give guidance in the spec on choosing `type` values for a credential format.\r\n\r\nWe need to think about collision resistance - either by a registry or something DNS-based like URIs or java package name notation.\r\n\r\nPersonal opinion: Use URLs, like XML namespaces. It automatically avoids collisions, there is no registry required for potentially large amounts of values, and we can think about extending this in the future with machine-readable information about credential format.",
      "createdAt": "2023-10-04T18:06:38Z",
      "updatedAt": "2024-07-30T18:24:48Z",
      "closedAt": "2024-07-30T18:24:48Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "@selfissued suggestion is worth consideration: to have a registry and recommend that the type value either be a registered value or be a collision-resistant value. ",
          "createdAt": "2023-10-04T18:16:47Z",
          "updatedAt": "2023-10-04T18:16:47Z"
        },
        {
          "author": "selfissued",
          "authorAssociation": "NONE",
          "body": "My suggestion would be to recommend either registering values in a registry that we create as community service and/or to use collision-resistant names, as defined at https://www.rfc-editor.org/rfc/rfc7515.html#section-2.  In particular, if we make a recommendation for using some form of collision-resistant names, we should just cite RFC 7515's definition and not create our own that is similar but different.",
          "createdAt": "2023-10-04T18:19:48Z",
          "updatedAt": "2023-10-04T18:19:48Z"
        },
        {
          "author": "peacekeeper",
          "authorAssociation": "NONE",
          "body": "> How to choose type values\r\n\r\n> Use URLs, like XML namespaces. It automatically avoids collisions, there is no registry required\r\n\r\nSounds a bit like you are re-inventing (parts of) JSON-LD :)",
          "createdAt": "2023-10-14T03:55:25Z",
          "updatedAt": "2023-10-14T03:55:25Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "> > How to choose type values\r\n> \r\n> > Use URLs, like XML namespaces. It automatically avoids collisions, there is no registry required\r\n> \r\n> Sounds a bit like you are re-inventing (parts of) JSON-LD :)\r\n\r\nOnly the requirement that type might have to be a URL bit. JSON-LD is an RDF implementation and therefore has more boilerplate that is not needed that goes beyond this problem. ",
          "createdAt": "2023-10-16T12:02:52Z",
          "updatedAt": "2023-10-16T12:02:52Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "This PR introduces the requirement for identifiers to be Collision-Resistant Names: https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/173\r\n\r\nI still think that moving towards an identifier format that will later allow discoverability of credential rules and policies would be beneficial. For that, I think that URIs would be most useful, as explained above. There is a ton of information that Holders and Verifiers might want to be able to discover:\r\n- What kind of binding is employed for a certain credential type (see https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/145)\r\n- More generally, what data can or cannot be used for checking the holder binding.\r\n- Information about credential types (e.g., display names, colors, logos, etc.) \u2014 this clearly overlaps with what is transported by OpenID4VCI today\r\n- A schema for content verification, including what can or cannot be made selectively disclosable\r\n- Information about individual data fields (e.g., the human-readable label for a claim name, including its translations)",
          "createdAt": "2023-10-18T09:46:12Z",
          "updatedAt": "2023-10-18T09:46:12Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "That kind of discoverability could be pointing to or just contained in a human readable spec or document that has that kind of information. ",
          "createdAt": "2023-10-18T20:07:30Z",
          "updatedAt": "2023-10-18T20:07:30Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "The PR has been merged, but let's use this issue to discuss whether we need discoverability.\r\n\r\n@bc-pi That's correct, URLs enable discoverability, but that doesn't mean that they are the only option.",
          "createdAt": "2023-10-19T09:34:19Z",
          "updatedAt": "2023-10-19T09:34:19Z"
        },
        {
          "author": "peacekeeper",
          "authorAssociation": "NONE",
          "body": "> The PR has been merged\r\n\r\nI'm not familiar with IETF processes, but merging such breaking changes in less than 24 hours without any chance of community review feels a bit ... hmm ...",
          "createdAt": "2023-10-19T12:19:21Z",
          "updatedAt": "2023-10-19T12:19:21Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "The PR is a relatively small change, and as indicated by my comment above, it is probably not the last word in this regard. I think we need to draw the bigger picture on what we expect from \"credential types\" and then think about how that needs to be reflected in the draft.\r\n\r\nBut, more generally, the IETF process is not designed around anything that happens in this git repository at all; what counts is consensus on the mailing list (both immediate discussions for larger normative changes as well as the working group last call, which can introduce substantial changes as well). Draft versions are a tool to get feedback from the working group including on smaller changes that have not been discussed on the mailing list beforehand. \r\n\r\nThe new draft version that we plan to release in the next days will be announced both on the mailing list as well as during the in-person meeting in Prague shortly after. If we receive feedback indicating that there is no consensus for a certain choice we made, we will respect that and modify the next draft accordingly. In that sense, having the PR merged is just a means to get feedback on a small step towards a solution.",
          "createdAt": "2023-10-19T14:34:20Z",
          "updatedAt": "2023-10-19T14:34:20Z"
        },
        {
          "author": "decentralgabe",
          "authorAssociation": "NONE",
          "body": "I am not in favor of a registry. We (Block) are interested in sd-jwt-vc for its simplicity, and would leverage the property to point to JSON Schema documents.",
          "createdAt": "2023-12-18T18:07:52Z",
          "updatedAt": "2023-12-18T18:07:52Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "In the editors' call we agreed to close this issue, as the main points have been addressed in the meantime (how to choose type and discoverability).",
          "createdAt": "2024-07-30T18:24:48Z",
          "updatedAt": "2024-07-30T18:24:48Z"
        }
      ]
    },
    {
      "number": 181,
      "id": "I_kwDOJbVClc5004U7",
      "title": "Define the concept of a credential type",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/181",
      "state": "CLOSED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [
        "danielfett"
      ],
      "labels": [
        "HAS PR",
        "wg-04"
      ],
      "body": "We should define more clearly **what a credential type (identified by the `vct` claim) actually means**.\r\n\r\nThe current description is a bit handwavy and that may be a sign that we have not yet defined the concept well.\r\n\r\nI think that there is a set of metadata usually associated with each SD-JWT VC type, for example\r\n- Display information for the whole credential\r\n- A schema for the JSON structure (may or may not be defined in JSON schema)\r\n- Information about the claims, including\r\n\t- Display information\r\n\t- Type information\r\n\t- Status information (self-attested vs. verified etc.)\r\n- Maybe: What kind of binding is supported/usually used for this credential type\r\n- Maybe: What issuers are allowed to issue this credential type\r\n\r\nSuch metadata would help **Wallets** (e.g., for displaying the credential to the user) and **Verifiers** (e.g., for determining the status of claims). It would also help **developers of Verifiers**, as they would get structured information about the credential they can expect.\r\n\r\nThe need for such metadata has been discussed in Issue #171 and similar approaches have shown up in [HAIP](https://vcstuff.github.io/oid4vc-haip-sd-jwt-vc/draft-oid4vc-haip-sd-jwt-vc.html#section-7.2.2).\r\n\r\nThe metadata may or may not be embedded into the credential itself, or provided externally. Assuming we allow for registered `vct` values (e.g., `UniversityCredential`), this metadata could go into the registry. It could also be distributed manually. \r\n\r\nBut it can also be made discoverable, e.g., by providing it at a .well-known URI derived from the URL in `vct`.\r\n\r\n----\r\n\r\nHere is a completely made-up example of what this metadata could look like:\r\n\r\n```json\r\n{\r\n    \"vct\": \"https://credentials.example.com/example1\",\r\n    \"display\": [\r\n        {\r\n            \"en-US\": {\r\n                \"name\": \"University Credential\",\r\n                \"logo\": {\r\n                    \"url\": \"https://exampleuniversity.com/public/logo.png\",\r\n                    \"alt_text\": \"a square logo of a university\"\r\n                },\r\n                \"background_color\": \"#12107c\",\r\n                \"text_color\": \"#FFFFFF\"\r\n            }\r\n        }\r\n    ],\r\n    \"claims\": // mapping from JSON pointer to information about this claim\r\n    {\r\n        \"/name\": {\r\n            \"display\": {\r\n                \"de-DE\": {\r\n                    \"label\": \"Vor- und Nachname\",\r\n                    \"description\": \"Der Name des Studenten\"\r\n                },\r\n                \"en-US\": {\r\n                    \"label\": \"Name\",\r\n                    \"description\": \"The name of the student\"\r\n                }\r\n            },\r\n            \"status\": \"verified\"\r\n        },\r\n        \"/degree\": {\r\n            \"display\": {\r\n                \"de-DE\": {\r\n                    \"label\": \"Abschluss\",\r\n                    \"description\": \"Der Abschluss des Studenten\"\r\n                },\r\n                \"en-US\": {\r\n                    \"label\": \"Degree\",\r\n                    \"description\": \"Degree earned by the student\"\r\n                }\r\n            },\r\n            \"status\": \"verified\"\r\n        },\r\n        // ...\r\n        \"/address\": {\r\n            \"display\": {\r\n                \"de-DE\": {\r\n                    \"label\": \"Adresse\",\r\n                    \"description\": \"Adresse zum Zeitpunkt des Abschlusses\"\r\n                },\r\n                \"en-US\": {\r\n                    \"label\": \"Address\",\r\n                    \"description\": \"Address at the time of graduation\"\r\n                }\r\n            },\r\n            \"status\": \"self-attested\"\r\n        },\r\n        \"/address/street_address\": {\r\n            \"display\": {\r\n                \"de-DE\": {\r\n                    \"label\": \"Stra\u00dfe\"\r\n                },\r\n                \"en-US\": {\r\n                    \"label\": \"Street Address\"\r\n                }\r\n            },\r\n            \"status\": \"self-attested\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n---\r\n\r\nImportant:\r\n- This mechanism will not be format-agnostic, but defined only for SD-JWT VC for now.\r\n- There are overlaps with mechanisms defined in HAIP, for example, and part of this issue here is to figure out what data should go where and to avoid duplications by getting the concept right. I think that the `claims` element defined for the credential issuer metadata in [HAIP](https://vcstuff.github.io/oid4vc-haip-sd-jwt-vc/draft-oid4vc-haip-sd-jwt-vc.html#section-7.2.2) could be replaced by just a `vct` identifier (the metadata could be discovered from there, or retrieved from the registry).",
      "createdAt": "2023-10-24T20:24:39Z",
      "updatedAt": "2024-04-17T18:33:39Z",
      "closedAt": "2024-04-17T18:33:39Z",
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "NONE",
          "body": "Interesting point, I have the following approach to satisfy the requirement of having the credential metadata along with a credential:\r\n\r\nusing openid federation a trust chain is needed to attests the cryptographic keys of the issuer to verify the credential. Within the trust chain the openid_credential_issuer metadata is provided.\r\n\r\nin the openid_credential_issuer metadata there are the display information for all the credential types. Then, using this approach, the credential doesn't need any metadata. Fed trust chain can be made available in a static form, within the credential jws/MSO headers\r\n\r\nLet's see other points:\r\n\r\n- I would not use `status`, because its value seems more close to the concept of issuance type. I would say `iss_type` set(`self-issued`, `authority-issued`). Also the name `status` may semantically collide with all about status lists\r\n\r\n> Maybe: What issuers are allowed to issue this credential type\r\n\r\nIt would be up to the trust model and the credential metadata or trust marks or attestations. We cannot allow an italian PID provider to issue a Polish PID, then the domestic italian credential identifier must be linked with one or more italian credential issuers. This information must be made available according to the infrastructure of trust, where the issued credentials are not involved yet. During a discovery phase the user/holder knows which are the credential issuers, which credential types they offers to users. Generally this is made available in the openid_credential_metadata and must be granted by an accreditation body. That's why I mentioned trusted lists or federation trust marks or X.509 custom extentions (for strong stomachs) or federation metadata policy.\r\n\r\nWithout openid federation I would have to find a solution and the credential metadata sounds resonable but I use federation and this requirement is already satisfied. Another point of interest is that the credential metadata should be issued by credential issuer and bound to the credential.\r\n\r\nI would change this sentence we have in the current text: `A type is associated with rules defining which claims may or must appear in the Unsecured Payload of the SD-JWT VC and whether they may, must, or must not be selectively disclosable.` because the metadata should be issued by credential issuers and be tamper proof, otherwise a bogus implementation would use a valid credential with a fake presentation of the claims that may swaps some value and change the interpretation of the data to a verifier. Let's imagine that Giuseppe Marco would be swapped to Marco Giuseppe and pass through a supervised verifier as Marco, while the credential is still valid and verified\r\n  ",
          "createdAt": "2023-10-24T23:41:30Z",
          "updatedAt": "2023-10-24T23:44:18Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I like the idea to define schema and display information in the context of the credential definition (in contrast to issuance protocol) as I believe this information should be consistent across issuers and needs to be available for verifier developers. I also believe some information could be useful at the level of individual credentials for visual customization in the wallet.",
          "createdAt": "2023-10-26T20:04:38Z",
          "updatedAt": "2023-10-26T20:04:38Z"
        },
        {
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "body": "we may add:\r\n- type of binding of the vc ,e.g. key-binding, claim-based-binding, none\r\n- vct could be either URL linking to the resource directly or an identifier that links to e.g. an (ISO) specification to get the credential metdata\r\n- IANA registry is probably not a good option\r\n- versioning of the metadata\r\n- protection against change e.g. put a hash of metadata in the vc\r\n\r\nIt might be worth to consider reducing the credential format specific Issuer metadata defined in OpenID4VCI and define that in a credential format specific credential metadata resource:\r\n\r\n```\r\n{\r\n    \"credential_issuer\": \"https://credential-issuer.example.com\",\r\n    \"authorization_servers\": [ \"https://server.example.com\" ],\r\n    \"credential_endpoint\": \"https://credential-issuer.example.com\",\r\n    \"batch_credential_endpoint\": \"https://credential-issuer.example.com/batch_credential\",\r\n    \"deferred_credential_endpoint\": \"https://credential-issuer.example.com/deferred_credential\",\r\n    \"display\": [\r\n        {\r\n            \"name\": \"Example University\",\r\n            \"locale\": \"en-US\"\r\n        },\r\n        {\r\n            \"name\": \"Example Universit\u00e9\",\r\n            \"locale\": \"fr-FR\"\r\n        }\r\n    ],\r\n    \"credentials_supported\": {\r\n        \"UniversityDegreeCredential-jwt-vc\": { //issuer-specific\r\n            \"format\": \"jwt_vc_json\",\r\n            ...\r\n        },\r\n       \"UniversityDegreeCredential-sd-jwt-vc\": { //issuer-specific\r\n            \"format\": \"sd-jwt+vc\",\r\n            \"vct\": \"https://link-to-a-resolvable-crednetial-metadata.com/UniversityDegreeCredentialSelectiveDisclosable\"\r\n        },\r\n        \"mDL\": { //issuer-specific\r\n            \"format\": \"mso_mdoc\",\r\n            \"uri\": \"org.iso.18013.5.1.mDL\"\r\n        }\r\n   }\r\n}\r\n```\r\n\r\nHowever, there will remain issuer-specific things e.g. cryptographic support that should stay in the Issuer Metadata. These would need to be defined in SD-JWT-VC.",
          "createdAt": "2023-11-08T12:57:50Z",
          "updatedAt": "2023-11-08T14:07:40Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Using the **VC type metadata**, one could also include an ecosystem-specific parameter that contains a [JSON patch](https://jsonpatch.com/) that allows you to map to any data model one want. It would also allow automatic fetching and executing the transformation algorithm quite easily.",
          "createdAt": "2023-12-06T20:44:27Z",
          "updatedAt": "2023-12-06T20:45:27Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I prepared a first draft for the SD-JWT VC metadata. I wrote this as a separate draft for working on it, but of course we can consider integrating this into SD-JWT VC \u2014 whatever works best. I'm looking forward to your feedback.\r\n\r\nhttps://vcstuff.github.io/sd-jwt-vc-types/draft-fett-oauth-sd-jwt-vc-types.html",
          "createdAt": "2024-01-25T17:02:38Z",
          "updatedAt": "2024-01-25T17:02:38Z"
        },
        {
          "author": "decentralgabe",
          "authorAssociation": "NONE",
          "body": "@danielfett I like the document and think it's a great start. I think there's a lot more to do around JSON Schema, similar to the work we've put into [this document at the W3C](https://w3c.github.io/vc-json-schema/). I'm happy to help here. Similarly, the display reminds me of [this document from DIF](https://identity.foundation/wallet-rendering/), which could be a standalone thing. Perhaps the types document should be transformed to a 'hub' document?",
          "createdAt": "2024-01-25T22:39:40Z",
          "updatedAt": "2024-01-25T22:39:40Z"
        }
      ]
    },
    {
      "number": 182,
      "id": "I_kwDOJbVClc51tSav",
      "title": "Replace `unifiedResourceName` with `uniformResourceIdentifier`",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/182",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "awoie"
      ],
      "labels": [
        "HAS PR",
        "pending close",
        "wg-02"
      ],
      "body": "The rules to obtain the verification key from X.509 should be changed to use the `uniformResourceIdentifier` from the SAN extension instead of the `unifiedResourceName` (which does not exist).\r\n\r\nFurthermore, since `uniformResourceIdentifier` can potentially start with a https scheme, the JWT Issuer Metadata rule should only be enforced if no x5* JWT header was set.",
      "createdAt": "2023-11-02T18:11:26Z",
      "updatedAt": "2023-11-29T18:21:09Z",
      "closedAt": "2023-11-29T18:21:09Z",
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "We also need to add `x5t#S256` JWT header.",
          "createdAt": "2023-11-03T10:32:07Z",
          "updatedAt": "2023-11-03T10:32:07Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed by #183 ",
          "createdAt": "2023-11-27T04:13:07Z",
          "updatedAt": "2023-11-27T04:13:07Z"
        }
      ]
    },
    {
      "number": 184,
      "id": "I_kwDOJbVClc52EqUU",
      "title": "The correct format with a SD-JWT VC that has no disclosures but has a holder binding JWT",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/184",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "HAS PR"
      ],
      "body": "received a question. What is the correct format with a SD-JWT VC that has no disclosures but has a holder binding JWT. Is it \r\n`<SD-JWT VC>~~<HB JWT> (double tilde)`, or `<SD-JWT VC>~<HB JWT> (single tilde)`\r\nI think it is `<SD-JWT VC>~<HB JWT> (single tilde)` but the spec could probably clarify.",
      "createdAt": "2023-11-07T09:39:52Z",
      "updatedAt": "2023-12-05T17:47:48Z",
      "closedAt": "2023-12-05T17:47:47Z",
      "comments": [
        {
          "author": "AltmannPeter",
          "authorAssociation": "NONE",
          "body": "The case for `~~` would be that according to [SD-JWT section 5](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-selective-disclosure-jwt-06#name-sd-jwt-data-formats)  \"the serialized format for the SD-JWT is the concatenation of each part delineated with a single tilde ('~') character\". And zero disclosures is allowed in the disclosures part. \r\n\r\nDouble tilde is also consistent with the requirement to have a `~` even with the KB-JWT being an empty string. Thanks for raising the question! Would be great to confirm whether or not it is double or single.",
          "createdAt": "2023-11-07T10:17:03Z",
          "updatedAt": "2023-11-07T10:17:03Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "The intention is certainly just one `~`. I think the spec is relatively clear:\r\n\r\n> \r\n> An SD-JWT is composed of the following:\r\n> * an Issuer-signed JWT,\r\n> * zero or more Disclosures, and\r\n> * optionally a Key Binding JWT.\r\n> \r\n> The individual parts will be explained in the following subsections.\r\n> The serialized format for the SD-JWT is the concatenation of each part delineated with a single tilde ('~') character as follows:\r\n\r\nSo a single `~` between each part.",
          "createdAt": "2023-11-07T14:42:54Z",
          "updatedAt": "2023-11-07T14:42:54Z"
        },
        {
          "author": "AltmannPeter",
          "authorAssociation": "NONE",
          "body": "> The intention is certainly just one `~`. \r\n> ...\r\n> So a single `~` between each part.\r\n\r\nJust one `~`, while being the intention, is at odds with a single `~` between each part that the specification requires, no? There are three parts. I add one `~` between the Issuer-Signed JWT and the disclosures set, and then I add another `~` between the disclosures set and the KB-JWT. ",
          "createdAt": "2023-11-10T09:46:27Z",
          "updatedAt": "2023-11-13T13:58:27Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "The intention is definitely just one `~`. I also think [sec 5 in the spec](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-06.html#section-5) is relatively clear about it. But perhaps some additional or slightly different text would be more clear?\r\n\r\n> Just one `~`, while being the intention, is at odds with a single `~` between each part that the specification requires, no?\r\n\r\nThe intent is that each individual Disclosure is a part with each one is preceded by a tilde. No tildes in that area when there are no Disclosures. \r\n\r\nAdmittedly, as I try to comment here, I can start to see where different readings of that section come from. So there is likely an opportunity to improve that text. I'm not sure how though... \r\n\r\n\r\n\r\n\r\n",
          "createdAt": "2023-11-14T22:14:14Z",
          "updatedAt": "2023-11-14T22:14:14Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "FWIW, the following are the various permutations as intended by the current spec (as best I understand anyway).\r\n\r\nSD-JWT without disclosures and without KB JWT:\r\n`<Issuer-signed JWT>~`\r\n\r\nSD-JWT without disclosures and with KB JWT: \r\n`<Issuer-signed JWT>~<KB-JWT>`\r\n\r\nSD-JWT with disclosures and without KB JWT:\r\n`<Issuer-signed JWT>~<Disclosure 1>~<Disclosure N>~`\r\n\r\nSD-JWT with disclosures and with KB JWT: \r\n`<Issuer-signed JWT>~<Disclosure 1>~<Disclosure N>~<KB-JWT>`",
          "createdAt": "2023-11-14T22:22:32Z",
          "updatedAt": "2023-11-14T22:45:11Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "The bit of text starting with \"i.e.,\" [here in sec 5.3.1.](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-selective-disclosure-jwt-06#name-integrity-protection-of-the) maybe describes it more succinctly and accurately: \r\n\r\n> the Issuer-signed JWT, a tilde character, and zero or more Disclosures [...], each followed by a tilde character.\r\n\r\n",
          "createdAt": "2023-11-15T21:23:50Z",
          "updatedAt": "2023-11-15T21:23:50Z"
        },
        {
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "body": "> FWIW, the following are the various permutations as intended by the current spec (as best I understand anyway).\n> \n> SD-JWT without disclosures and without KB JWT:\n> `<Issuer-signed JWT>~`\n> \n> SD-JWT without disclosures and with KB JWT: \n> `<Issuer-signed JWT>~<KB-JWT>`\n> \n> SD-JWT with disclosures and without KB JWT:\n> `<Issuer-signed JWT>~<Disclosure 1>~<Disclosure N>~`\n> \n> SD-JWT with disclosures and with KB JWT: \n> `<Issuer-signed JWT>~<Disclosure 1>~<Disclosure N>~<KB-JWT>`\n\nIt could be valuable to list these four basic categories in the specification",
          "createdAt": "2023-11-16T06:18:44Z",
          "updatedAt": "2023-11-16T06:18:44Z"
        },
        {
          "author": "AltmannPeter",
          "authorAssociation": "NONE",
          "body": "> It could be valuable to list these four basic categories in the specification\r\n\r\nAgreed. Thanks for the clarification too!",
          "createdAt": "2023-11-24T07:38:43Z",
          "updatedAt": "2023-11-24T07:38:43Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "This https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/388 PR on the base SD-JWT spec lists those four basic categories and tries to make the language more clear. ",
          "createdAt": "2023-12-01T00:09:54Z",
          "updatedAt": "2023-12-01T00:09:54Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "PR on the base SD-JWT spec was merged. ",
          "createdAt": "2023-12-05T17:47:47Z",
          "updatedAt": "2023-12-05T17:47:47Z"
        }
      ]
    },
    {
      "number": 185,
      "id": "I_kwDOJbVClc52SVlV",
      "title": "Rename \"Obtaining Public Key for Issuer-signed JWTs\" section",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/185",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "awoie"
      ],
      "labels": [
        "HAS PR",
        "pending close",
        "wg-02"
      ],
      "body": "The section should be renamed to \"Issuer-signed JWT verification key validation\" since the section is about checking that the `iss` value corresponds to the key that signed the JWT. The process of obtaining it via different means is just the first step.\r\n\r\nWe should also fix the language in the \"Verification and Processing\" section to say:\r\n> Furthermore, the recipient of the SD-JWT VC MUST validate the public verification key for the Issuer-signed JWT as defined in [Section 3.5](https://drafts.oauth.net/oauth-sd-jwt-vc/draft-ietf-oauth-sd-jwt-vc.html#public-key-discovery-for-issuer-signed-jwts).\r\n\r\ninstead of \r\n\r\n> Furthermore, the recipient of the SD-JWT VC MUST obtain the public verification key for the Issuer-signed JWT as defined in [Section 3.5](https://drafts.oauth.net/oauth-sd-jwt-vc/draft-ietf-oauth-sd-jwt-vc.html#public-key-discovery-for-issuer-signed-jwts).",
      "createdAt": "2023-11-08T22:40:13Z",
      "updatedAt": "2023-11-29T18:21:09Z",
      "closedAt": "2023-11-29T18:21:09Z",
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed by #183 ",
          "createdAt": "2023-11-27T04:12:57Z",
          "updatedAt": "2023-11-27T04:12:57Z"
        }
      ]
    },
    {
      "number": 186,
      "id": "I_kwDOJbVClc52aO0A",
      "title": "DID you? ",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/186",
      "state": "CLOSED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "HAS PR",
        "wg-02"
      ],
      "body": "The current text [here in -01](https://www.ietf.org/archive/id/draft-ietf-oauth-sd-jwt-vc-01.html#section-3.5-2.2) is basically a normative requirement to support all DID resolution. Which is too much, even to the extent we want to allow for or support some DID usage. We need to revisit how this is phrased in the document and even how much (if any) is said. \r\n\r\n\r\n---------\r\ncreated from discussion in PR #183 : \r\n\r\nB: \"IMHO DIDs can be accounted/allowed for via the \"Separate specifications or ecosystem regulations MAY define rules complementing the rules defined above\" criteria below and shouldn't receive 1st order treatment like this in the spec.\"\r\n\r\nO: \"We added DIDs to make the spec useful also for the credential market that uses DIDs. For those people it is required to demonstrate how that can be done. I'm wondering how other folks are thinking about dropping DIDs from getting 1st order treatment. You are right, one can create another draft that just explains how to use DIDs with this spec.\"\r\n\r\n_Originally posted by @awoie in https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/183#discussion_r1387268502_\r\n            ",
      "createdAt": "2023-11-09T23:44:48Z",
      "updatedAt": "2023-11-28T19:33:23Z",
      "closedAt": "2023-11-28T19:33:23Z",
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "> The current text [here in -01](https://www.ietf.org/archive/id/draft-ietf-oauth-sd-jwt-vc-01.html#section-3.5-2.2) is basically a normative requirement to support all DID resolution. Which is too much, even to the extent we want to allow for or support some DID usage. We need to revisit how this is phrased in the document and even how much (if any) is said.\r\n> \r\n> created from discussion in PR #183 :\r\n> \r\n> B: \"IMHO DIDs can be accounted/allowed for via the \"Separate specifications or ecosystem regulations MAY define rules complementing the rules defined above\" criteria below and shouldn't receive 1st order treatment like this in the spec.\"\r\n> \r\n> O: \"We added DIDs to make the spec useful also for the credential market that uses DIDs. For those people it is required to demonstrate how that can be done. I'm wondering how other folks are thinking about dropping DIDs from getting 1st order treatment. You are right, one can create another draft that just explains how to use DIDs with this spec.\"\r\n> \r\n> _Originally posted by @awoie in [#183 (comment)](https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/183#discussion_r1387268502)_\r\n\r\nIt was definitely not the intend to support all DID methods and all kind of DID resolutions. We need to make DID support optional for verifiers and if they don't have support they won't be able to verify DID-based SD-JWT VCs which is fine.",
          "createdAt": "2023-11-10T08:37:00Z",
          "updatedAt": "2023-11-10T08:37:00Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "I made a proposal here #190 ",
          "createdAt": "2023-11-27T04:19:05Z",
          "updatedAt": "2023-11-27T04:19:05Z"
        }
      ]
    },
    {
      "number": 191,
      "id": "I_kwDOJbVClc53_UVb",
      "title": "Double check the spec that MAC is not prohibited",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/191",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "awoie"
      ],
      "labels": [
        "HAS PR"
      ],
      "body": "The specification currently uses terms like public key validation and potentially other things when it comes to the verification of the KB-JWT. We should make sure there is no language that would prohibit the use of MAC authentication for KB-JWT and Issuer-signed JWT.",
      "createdAt": "2023-11-27T20:58:31Z",
      "updatedAt": "2024-05-09T15:48:34Z",
      "closedAt": "2024-05-09T15:48:34Z",
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Currently blocked by SD-JWT: \r\n- https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/328\r\n- https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/369",
          "createdAt": "2023-12-13T16:50:51Z",
          "updatedAt": "2023-12-13T16:50:51Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "@paulbastian A few options we discussed on the editor's call today (cc @danielfett @bc-pi ):\r\n\r\n1. not do anything in SD-JWT to enable this since SD-JWT just prohibits \"symmetric algorithms\". We could wait for an JOSE `alg` value specification to appear and to be registered in the IANA registry which states that the algorithm is not symmetric. One downside of this approach is that standard JOSE libs won't work today since the `alg` value is not supported. Note that technically one could implement this using standard `HS256` if the key was agreed/derived using an ECDH/ConcatKDF schema.\r\n2. remove the normative statement completely from SD-JWT that prohibits \"symmetric algorithms\".\r\n3. change the normative statement to a SHOULD NOT use \"symmetric algorithms\" and explain in the SD-JWT security - considerations section where symmetric `alg` values are acceptable and when not.\r\n4. keep the MUST NOT statement in SD-JWT but add an \"... unless\" clause that explains where this could be useful, e.g., for hybrid schemes but this needs to be confirmed if this process is indeed hybrid and therefore the use case is covered.",
          "createdAt": "2024-01-18T18:16:00Z",
          "updatedAt": "2024-01-21T15:47:44Z"
        },
        {
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "body": "I think #1 is the cleanest approach, but may take more time for implementations, we will try to get some experience there. #3 also doesn't sound bad to me.",
          "createdAt": "2024-01-20T10:49:04Z",
          "updatedAt": "2024-01-20T10:49:04Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I think I still lean towards preferring something like # 2 - just remove the explicit prohibition of symmetric algorithms from SD-JWT and not say much, if anything else about it in that spec. Let the layer above SD-JWT/JOSE (probably the presentation protocol) define how an HMAC key is agreed upon and use existing JWS HMAC algs and implementations. I.e., the verifier sends a public key in it's presentation request, which the generator uses in a key agreement with their private key to get a key that is then KDFd to produce an appropriate key for existing/established JWS HS256[384|512] algs. That layer is going to have to define much of that anyway so there's not much gain from pushing an ECDH-based MAC alg into JOSE/JWS (also note that defining and registering a new JOSE alg is far from a trivial exercise). And the prohibition of symmetric algorithms in SD-JWT makes sense from a particular perspective but is arguably just unnecessarily restrictive at the building block layer.  ",
          "createdAt": "2024-01-21T15:47:19Z",
          "updatedAt": "2024-01-21T15:50:38Z"
        },
        {
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "body": "I would agree that removing the restriction is okay, as SD-JWT is an improvement of JWT and JWTs don't have this restriction.\n\nDo you think that ECDH-ES is an anti-pattern? It has been in JWA from the beginning and you could have the same arguments there?",
          "createdAt": "2024-01-21T16:33:12Z",
          "updatedAt": "2024-01-21T16:33:12Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> Do you think that ECDH-ES is an anti-pattern? It has been in JWA from the beginning and you could have the same arguments there?\r\n\r\nI wouldn't take it that far. My comments/arguments here are really just in the context of the current state of JWS specs and existing library support. ",
          "createdAt": "2024-01-22T12:06:35Z",
          "updatedAt": "2024-01-22T12:06:35Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "@bc-pi @paulbastian  if option 2 is our favorite options. Should the SD-JWT VC spec then say something about that? IMO, it would be good to say something in the security considerations at least.",
          "createdAt": "2024-01-22T12:18:02Z",
          "updatedAt": "2024-01-22T12:18:24Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree in general that since SD-JWT is a building block, being too restrictive there regarding symmetric algorithms is probably not necessary.",
          "createdAt": "2024-01-22T12:19:08Z",
          "updatedAt": "2024-01-22T12:19:08Z"
        },
        {
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't object removing the restriction, I checked RFC7519 and there is no similar statement.",
          "createdAt": "2024-01-22T12:26:40Z",
          "updatedAt": "2024-01-22T12:26:40Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> [...]  if option 2 is our favorite options. Should the SD-JWT VC spec then say something about that? IMO, it would be good to say something in the security considerations at least.\r\n\r\nDefinitely not opposed to saying something. But it might be challenging to say something that's actually meaningful/helpful.  \r\n",
          "createdAt": "2024-01-22T20:55:27Z",
          "updatedAt": "2024-01-22T20:55:27Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": " https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/400 removes the explicit prohibition on MAC from SD-JWT (which will be in the -08 draft-ietf-oauth-selective-disclosure-jwt)",
          "createdAt": "2024-02-26T18:42:50Z",
          "updatedAt": "2024-02-26T18:43:09Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Then, we need a PR that cleans up the language in this specification, so MAC is not going to be prohibited.",
          "createdAt": "2024-03-12T14:03:03Z",
          "updatedAt": "2024-03-12T14:03:03Z"
        }
      ]
    },
    {
      "number": 192,
      "id": "I_kwDOJbVClc54IeNa",
      "title": "Should `status` be a JWT header?",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/192",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "discuss"
      ],
      "body": "The topic concerns the `status` JWT claim specifically, but more broadly, we should discuss how to handle security-critical extensions (new claims or headers) not covered by our specification. At the IETF, someone mentioned supporting other status methods (e.g., based on ZKPs) in the future.\r\n\r\nShould we allow the issuer to express that a verifier should fail validation if, for example, somebody uses a different status method than the one specified by SD-JWT VC, which is not understood? This is a specific example, but the same applies to other similar security-critical extensions, so we are not purely talking about premature optimization such as in the case of the status method.\r\n\r\n1. Before you say that unknown JWT claims and headers should be ignored, and this is a policy validation decision, keep in mind that we already require the processing of the `status` claim in SD-JWT VC. I believe the same ability might have to be granted to ecosystem-specific `status`-like JWT claims or headers too.\r\n\r\n2. I realize that it is hard to understand what falls into this category of security-critical extensions. In my opinion, it is important that policy decisions are out of the scope of SD-JWT VC. One approach would be to limit it to JWT claims and headers related to validating the Issuer-signed JWT or the KB-JWT. `status` processing is part of SD-JWT VC validation at the moment.\r\n\r\n3. Now, how to express this? We already have a tool in JOSE that allows us to express security-critical extensions that must be understood by verifiers, which is the `crit` JWT header. But `crit` is limited to include only JWT headers, not JWT claims. Consequently, a new status method would need to be referenced in the `crit` header. This also has the consequence that the new header cannot be selectively disclosed and remains sticky. This is an SD-JWT limitation, and I'm not saying we should necessarily change that.\r\n\r\n4. This made me think whether the `status` claim should be put into the JWT header since it would be more consistent with how extensibility might work in the future and because it is actually not wanted that the `status` is omitted.\r\n\r\n5. Alternatively, we could introduce a `crit`-like JWT claim or define `crit` as a JWT claim and allow the `crit` claim to include JWT claims.\r\n\r\nSome references below...\r\n\r\nSD-JWT does not allow JWT headers to be selectively disclosed.\r\n\r\nRFC 7519 says in section 9.2 Validating a JWT:\r\n> Verify that the resulting JOSE Header includes only parameters and values whose syntax and semantics are both understood and supported or that are specified as being ignored when not understood.\r\n\r\nRFC 7519 says in section 4 JWT claims:\r\n> However, in the absence of such requirements, all claims that are not understood by implementations MUST be ignored.",
      "createdAt": "2023-11-28T23:23:42Z",
      "updatedAt": "2024-03-12T14:04:34Z",
      "closedAt": "2024-03-12T14:04:33Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "With https://github.com/oauth-wg/draft-ietf-oauth-status-list/pull/90/ the -01 draft-ietf-oauth-status-list attempts to allow for supporting other status methods within the `status` claim. Which somewhat addresses the specific example cited in this issue.\r\n",
          "createdAt": "2024-03-08T19:19:27Z",
          "updatedAt": "2024-03-08T19:19:27Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm closing this issue since status claim has an extensibility mechanism. The crit topic might be subject to another issue.",
          "createdAt": "2024-03-12T14:04:33Z",
          "updatedAt": "2024-03-12T14:04:33Z"
        }
      ]
    },
    {
      "number": 193,
      "id": "I_kwDOJbVClc54y3qh",
      "title": "Clarify Example 3.3",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/193",
      "state": "CLOSED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Torsten: I have a question re the example in section 3.3. of the sd-jwt vc spec. Why does the unsecured payload does not contain iss, exp, and so on? I would expect those claims need to be present and be processed on the application layer.\r\n\r\nme: In the example, iat etc. are added only when the actual credential is created. This is not meant to define anything about how this is processed (especially because this shows the input, not the output that the verifier processes).\r\n\r\nTorsten: That's not clear (at least for me) from the text. I would suggest to add then examples for the output, too.\r\n\r\n",
      "createdAt": "2023-12-05T16:22:23Z",
      "updatedAt": "2023-12-05T16:29:21Z",
      "closedAt": "2023-12-05T16:29:21Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Duplicate of #194 ",
          "createdAt": "2023-12-05T16:29:21Z",
          "updatedAt": "2023-12-05T16:29:21Z"
        }
      ]
    },
    {
      "number": 194,
      "id": "I_kwDOJbVClc54y6W_",
      "title": "Add output example",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/194",
      "state": "CLOSED",
      "author": "tlodderstedt",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "awoie"
      ],
      "labels": [
        "wg-05"
      ],
      "body": "I think the understanding of the spec could be further facilitated by adding an example of a SD-JWT VC after the verifier has processed the SD-JWT VC and (basically) has constructed a JWT representation for further processing in the application. ",
      "createdAt": "2023-12-05T16:26:58Z",
      "updatedAt": "2024-09-12T21:04:36Z",
      "closedAt": "2024-09-12T21:04:36Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "The new PID example in draft -02/-03 shows the JSON data for \"further processing\" after validation: https://www.ietf.org/archive/id/draft-ietf-oauth-sd-jwt-vc-03.html#appendix-B.1-56\r\n\r\nDoes that seem sufficient? Or perhaps a similar addition to the example used in the main body of the draft ([around here maybe](https://www.ietf.org/archive/id/draft-ietf-oauth-sd-jwt-vc-03.html#section-4.2))? Or something different/more?",
          "createdAt": "2024-03-12T19:15:10Z",
          "updatedAt": "2024-03-12T19:15:46Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "I personally don't understand why this applies to the verifier: \"has constructed a JWT representation for further processing in the application\".\r\n\r\nHowever, @tlodderstedt has this issue been addressed by the examples @bc-pi provided? Then we can close it.",
          "createdAt": "2024-04-30T17:13:57Z",
          "updatedAt": "2024-04-30T17:13:57Z"
        }
      ]
    },
    {
      "number": 196,
      "id": "I_kwDOJbVClc56A-ol",
      "title": "Consider making cnf optional",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/196",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Not all VCs require key binding. For those, cnf should be made optional.",
      "createdAt": "2023-12-18T16:58:02Z",
      "updatedAt": "2024-02-27T19:05:14Z",
      "closedAt": "2024-02-27T19:05:14Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I've read the text in https://www.ietf.org/archive/id/draft-ietf-oauth-sd-jwt-vc-01.html#section-3.2.2.2-3.5.2.1 that says \"REQUIRED when Cryptographic Key Binding is to be supported.\" as `cnf` being optional or not required when key binding isn't needed. Perhaps we need to discuss and/or make things more clear? ",
          "createdAt": "2023-12-18T20:53:22Z",
          "updatedAt": "2023-12-18T20:54:02Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Do you think we should also explain the OPTIONAL case or replace the REQUIRED with something else? CONDITIONAL is not a reserved word unfortunately. ",
          "createdAt": "2023-12-18T21:33:11Z",
          "updatedAt": "2023-12-18T21:33:11Z"
        },
        {
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "body": "I would propose to clarify this. From a quick reading this is not obviously optional and it does not match the other claims that only state REQUIRED/OPTIONAL without any conditions. As cryptographic binding is optional, I think this line should begin with \"OPTIONAL. [...]\"",
          "createdAt": "2024-01-17T20:43:59Z",
          "updatedAt": "2024-01-17T20:43:59Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> I would propose to clarify this. From a quick reading this is not obviously optional and it does not match the other claims that only state REQUIRED/OPTIONAL without any conditions. As cryptographic binding is optional, I think this line should begin with \"OPTIONAL. [...]\"\r\n\r\nhttps://github.com/oauth-wg/oauth-sd-jwt-vc/pull/213 attempts to do just that ",
          "createdAt": "2024-02-20T21:53:36Z",
          "updatedAt": "2024-02-20T21:53:36Z"
        }
      ]
    },
    {
      "number": 197,
      "id": "I_kwDOJbVClc56EbRL",
      "title": "out of date terminology",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/197",
      "state": "CLOSED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "bc-pi"
      ],
      "labels": [
        "HAS PR"
      ],
      "body": "https://www.ietf.org/archive/id/draft-ietf-oauth-sd-jwt-vc-01.html#section-3.2.2.2-3.5.2.1 has \"Combined Format for Presentation\", which isn't used in SD-JWT anymore. ",
      "createdAt": "2023-12-19T06:00:24Z",
      "updatedAt": "2024-01-18T17:08:29Z",
      "closedAt": "2024-01-18T17:08:29Z",
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "I assigned you @bc-pi since you are one of the SD-JWT editor's.",
          "createdAt": "2024-01-10T07:19:21Z",
          "updatedAt": "2024-01-10T07:19:21Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Gotta start somewhere... hopefully I can handle this one. PR #201 has proposed changes. ",
          "createdAt": "2024-01-10T22:47:09Z",
          "updatedAt": "2024-01-10T22:47:09Z"
        }
      ]
    },
    {
      "number": 199,
      "id": "I_kwDOJbVClc56P43q",
      "title": "Consider making iat optional",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/199",
      "state": "CLOSED",
      "author": "oed",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "HAS PR"
      ],
      "body": "Using `iat` is not the only, and not always the desired way to specify when something was issued.\r\n\r\nThe use case I'm considering would make use of an \"after\" field the value of which would be set to a recent block hash (e.g. from a blockchain like Bitcoin or Ethereum). This approach would provide a more rigorous way to determine when something was issued since it would be impossible to create a claim that points to a time in the future.\r\n\r\nIf `iat` is required, it would be completely redundant to the \"after\" field in my example.",
      "createdAt": "2023-12-20T17:29:03Z",
      "updatedAt": "2024-01-18T17:07:34Z",
      "closedAt": "2024-01-18T17:07:34Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm generally supportive of allowing `iat` to be optional (and selectively disclosable as suggested in #200).  It's informational content that may not be necessary for all cases and might have privacy implications. Specific `vct`s could mandate it as appropriate but I think requiring it in sd-jwt-vc is too inflexible.",
          "createdAt": "2024-01-16T19:03:24Z",
          "updatedAt": "2024-01-17T18:46:52Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm also supportive.",
          "createdAt": "2024-01-16T19:05:06Z",
          "updatedAt": "2024-01-16T19:05:06Z"
        }
      ]
    },
    {
      "number": 200,
      "id": "I_kwDOJbVClc56WG7N",
      "title": "iat should be selectively disclosable",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/200",
      "state": "CLOSED",
      "author": "peppelinux",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "HAS PR"
      ],
      "body": "I propose making the iat (issued at) claim name selectively disclosable. This is because for certain types of tokens, credentials, or personal data, the creation or issuance date could potentially reveal sensitive information.\r\n\r\nFor instance, consider a credential verifying that my age is over 18. In most cases, a user would request this credential on their birthday, which would mean that the iat value would coincide with their birth date.",
      "createdAt": "2023-12-21T15:18:52Z",
      "updatedAt": "2024-01-18T17:07:35Z",
      "closedAt": "2024-01-18T17:07:35Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm generally supportive of allowing `iat` to be selectively disclosable (and being optional as suggested in #199). It's informational content that may not be necessary for all cases and might have privacy implications. Specific `vct`s could mandate it as appropriate but I think requiring it in sd-jwt-vc is too inflexible. ",
          "createdAt": "2024-01-16T19:02:56Z",
          "updatedAt": "2024-01-16T19:02:56Z"
        }
      ]
    },
    {
      "number": 203,
      "id": "I_kwDOJbVClc59rVm0",
      "title": "metadata path description",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/203",
      "state": "CLOSED",
      "author": "c2bo",
      "authorAssociation": "MEMBER",
      "assignees": [
        "bc-pi"
      ],
      "labels": [],
      "body": "There are 2 parts of the draft discussing the path to issuer metadata:\r\n> Issuers publishing JWT VC Issuer Metadata MUST make a JWT VC Issuer Metadata configuration available at the path formed by concatenating the string /.well-known/jwt-vc-issuer to the iss claim value in the JWT. The iss MUST be a case-sensitive URL using the HTTPS scheme that contains scheme, host and, optionally, port number and path components, but no query or fragment components.\r\n\r\nand\r\n> If the iss value contains a path component, any terminating / MUST be removed before inserting /.well-known/ and the well-known URI suffix between the host component and the path component. \r\n> The following is a non-normative example of a HTTP request for the JWT VC Issuer Metadata configuration when iss is set to \r\n> https://example.com/user/1234:\r\n> GET /.well-known/jwt-vc-issuer/user/1234 HTTP/1.1\r\n> Host: example.com\r\n\r\nI do believe the latter is the currently intended /.well-known mechanism, whereas the first section was probably not updated and would result in `https://example.com/user/1234/.well-known/jwt-vc-issuer` to resolve metadata. I guess this was an oversight in #80?",
      "createdAt": "2024-01-30T18:36:21Z",
      "updatedAt": "2024-02-13T14:34:15Z",
      "closedAt": "2024-02-13T14:34:15Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for catching the inconsistency @c2bo and I believe you are correct that the latter is currently the intended mechanism for .well-known. \r\n\r\n",
          "createdAt": "2024-01-30T18:57:26Z",
          "updatedAt": "2024-01-30T18:57:26Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "We might also want to use something other than \"user\" in the example path. It's not wrong exactly but maybe unnecessarily misleading or confusing.",
          "createdAt": "2024-01-30T19:01:40Z",
          "updatedAt": "2024-01-31T22:10:54Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "#204 endeavors to fix this (and a few other little things)",
          "createdAt": "2024-01-31T23:38:18Z",
          "updatedAt": "2024-02-01T19:40:15Z"
        }
      ]
    },
    {
      "number": 205,
      "id": "I_kwDOJbVClc5-VCZ6",
      "title": "defining how DID can be used as user's indetifier",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/205",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "pending close"
      ],
      "body": "There are use-cases that would like to use IETF SD-JWT VC draft over W3C VCDM draft, while using DID as user's/subject's identifier. Currently, SD-JWT VC mandates `cnf` claim to be present. It would be very helpful to define how a DID can be used with a `cnf` claim. (as keeping `cnf` claim as mandatory is probably better for the interoperability)",
      "createdAt": "2024-02-05T20:57:55Z",
      "updatedAt": "2024-11-18T10:51:27Z",
      "closedAt": "2024-11-13T13:15:45Z",
      "comments": [
        {
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "body": "I know that some people propose to use `kid` inside `cnf`.\n\nI think that it would be better to register a new sub claim `did` in the IANA confirmation registry to use DIDs.",
          "createdAt": "2024-02-06T16:08:46Z",
          "updatedAt": "2024-02-06T16:08:46Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, we had that discussion recently. It will be something as follows:\r\n\r\n```\r\n\"cnf\":{\r\n  \"did\":{ \"url\": \"did:example:1234#some-key\" }\r\n}\r\n```",
          "createdAt": "2024-02-06T20:46:05Z",
          "updatedAt": "2024-02-07T12:12:16Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Where should cnf.did be defined?",
          "createdAt": "2024-02-06T20:58:01Z",
          "updatedAt": "2024-02-06T20:58:01Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "My intuition is that sd-jwt-vc is not an appropriate place to define and register a new DID based JWT Confirmation Method. I'm not sure where it would be done but that'd be stretching the scope of this draft. \r\n\r\nMeanwhile [cnf.kid](https://www.rfc-editor.org/rfc/rfc7800.html#section-3.4) seems sufficient for the case.   \r\n",
          "createdAt": "2024-02-06T21:22:49Z",
          "updatedAt": "2024-02-06T21:23:39Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "cnf.kid instead of cnf.did? why would we need to defined cnf.did if we think cnf.kid is sufficient?",
          "createdAt": "2024-02-06T22:07:09Z",
          "updatedAt": "2024-02-06T22:07:09Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I guess that was kinda what I was implying/suggesting. That cnf.kid is sufficient so cnf.did doesn't need to be defined.  \r\n\r\nThe interpretation of the kid value is application specific (per RFC7800) and can convey the same info as Oliver's example:\r\n\r\n```\r\n      \"cnf\":{\r\n         \"kid\": \"did:example:1234\"\r\n       }\r\n```",
          "createdAt": "2024-02-06T22:56:28Z",
          "updatedAt": "2024-02-06T22:56:28Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "I fully agree that it is not in scope of SD-JWT VC to define the did cnf method. However, I think this would be the cleaner approach. I would expect clients using this cnf method to register a did cnf method. kid does not really help with interoperability. ",
          "createdAt": "2024-02-06T22:59:48Z",
          "updatedAt": "2024-02-06T22:59:48Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "> kid does not really help with interoperability.\r\n\r\nWhy? either relative of absolute DID URL, it is being used as a `kid` value already.",
          "createdAt": "2024-02-06T23:54:58Z",
          "updatedAt": "2024-02-06T23:55:02Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "> > kid does not really help with interoperability.\r\n> \r\n> Why? either relative of absolute DID URL, it is being used as a `kid` value already.\r\n\r\nThere is nothing wrong with this but I would assume that most implementations won't test if `kid` is a DID URL. To make it explicit people could just use a dedicated DID `cnf` method. This is really a design decision implementer's should make. If `kid` using DID URL  is an established pattern, nothing wrong with doing this. If not, I'd recommend using a dedicated `cnf` method but this depends on personal preference. My preference is using a dedicated `cnf` method since the approach is cleaner.",
          "createdAt": "2024-02-07T12:10:43Z",
          "updatedAt": "2024-02-07T12:17:46Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "@Sakurann is there anything where you believe we should update the SD-JWT VC specification?",
          "createdAt": "2024-02-07T12:20:18Z",
          "updatedAt": "2024-02-07T12:20:18Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "> is there anything where you believe we should update the SD-JWT VC specification?\r\n\r\none sentence saying that \"when key is passed by reference (assuming Briand would not want to explicitly mention DIDs in the spec), cnf.kid should be used\" would be helpful, so that people reading the specification know that SD-JWT VC can be used with DIDs too.",
          "createdAt": "2024-02-07T23:33:53Z",
          "updatedAt": "2024-02-07T23:33:53Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I took a try at the following proposed new text to replace [cnf here](https://www.ietf.org/archive/id/draft-ietf-oauth-sd-jwt-vc-01.html#section-3.2.2.2-3.5.1) that attempts to be inclusive of opinions expressed in this issue and also addresses issue #196 :\r\n\r\n>  cnf\r\n> - OPTIONAL. Contains the confirmation method identifying the proof of possession key as defined in [[RFC7800](https://drafts.oauth.net/oauth-sd-jwt-vc/draft-ietf-oauth-sd-jwt-vc.html#RFC7800)]. This claim MUST be present when cryptographic Key Binding is to be supported. It is RECOMMENDED that this contains a JWK as defined in Section 3.2 of [[RFC7800](https://drafts.oauth.net/oauth-sd-jwt-vc/draft-ietf-oauth-sd-jwt-vc.html#RFC7800)]. When the key is to be conveyed by reference (e.g., via a key thumbprint or DID [[W3C.DID](https://drafts.oauth.net/oauth-sd-jwt-vc/draft-ietf-oauth-sd-jwt-vc.html#W3C.DID)]), other JWT confirmation methods MAY be used, such as a key identifier defined in Section 3.4 of [[RFC7800](https://drafts.oauth.net/oauth-sd-jwt-vc/draft-ietf-oauth-sd-jwt-vc.html#RFC7800)].   For proof of cryptographic Key Binding, the Key Binding JWT in the presentation of the SD-JWT MUST be signed by the key identified in this claim.",
          "createdAt": "2024-02-15T22:25:21Z",
          "updatedAt": "2024-02-15T22:25:21Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "+1 to the proposed text - thank you, Brian!",
          "createdAt": "2024-02-17T01:38:20Z",
          "updatedAt": "2024-02-17T01:38:20Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "I'd be ok with this change although we need to adjust the language a bit. \r\n\r\nOption 1:\r\n- We should restrict this (`kid` as `cnf`) to being a DID URL instead of allowing `kid` being a DID. This is because a DID URL refers to one specific key whereas a DID is associated with multiple keys. I don't want to encourage implementations where the verifier has to try to verify the signature with potentially multiple keys unsuccessfully until they found one that matches. The proposed language would result in that if we don't limit it to DID URLs.\r\n\r\nOption 2:\r\n- We should adapt the language as follows: `For proof of cryptographic Key Binding, the Key Binding JWT in the presentation of the SD-JWT MUST be signed by a key or key set identified by this claim`. A DID is not a key and needs resolution. \r\n\r\nI would prefer Option 1 and recommend that if having a DID as a being included in the `cnf` value is required, defining a dedicated `cnf` method for that would be needed which is a much cleaner approach. I don't think we need to put this recommendation into the spec. \r\n\r\nNote that I think that using DID URL for the `kid` value in the signed KB-JWT/Issuer-signed JWT is totally fine.\r\n\r\nThere is a reason why there is a dedicated `x5c` `cnf` method instead of putting the base64url-DER-encoded certificate in the `kid` in the `cnf` claim.",
          "createdAt": "2024-02-19T12:45:20Z",
          "updatedAt": "2024-02-19T12:52:23Z"
        },
        {
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree with Oliver. \n\nKid is described as application specific and having a dedicated cnf.did method gives it a more universal touch that may be beneficial for interoperability.",
          "createdAt": "2024-02-19T12:54:32Z",
          "updatedAt": "2024-02-19T12:54:32Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I think the most beneficial thing for interoperability would be always and only use `cnf.jwk` for key binding. But that's a digression... \r\n\r\nThis document is not going to define a dedicated cnf.did method.\r\n\r\nThe sentence, \"When the key is to be conveyed by reference (e.g., via a key thumbprint or DID [W3C.DID]), other JWT confirmation methods MAY be used, such as a key identifier defined in Section 3.4 of [RFC7800].\" in the proposed text [above](https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/205#issuecomment-1947438330) is a just `MAY` to say that a `cnf.kid` or to-be-defined `cnf.did` could be used to convey the key binding key by reference.   I'd honestly rather not have it that sentence at all (note that using `cnf.kid` or to-be-defined `cnf.did` isn't prohibited now it's just not mentioned) but it was my attempt to accommodate the ask by @Sakurann.  Saying DID URL rather than just DID in that sentence would be okay for me too. But I don't think much more in this area would be appropriate here. \r\n\r\n\r\n",
          "createdAt": "2024-02-20T22:20:00Z",
          "updatedAt": "2024-02-26T13:15:15Z"
        },
        {
          "author": "cre8",
          "authorAssociation": "NONE",
          "body": "It depends how we define \"proof of possession key\" in context of a DID document, where multiple keys can be used to proof the identity. In case of natural persons when they prefer to use dids, it's more likely they use `did:key` or `did:jwk`. But since SD-JWT-VCs can also be issued to a legal person that can be using `did:web`, `did:ethr` it is able to register multiple keys.\r\n\r\nKey rotation in this scenario are a good security feature because they allow me to update my crypto material without issuing me new credentials that are directly bound to it. On the other hand I am unable to insert security mechanism like hashlinks since I want to point not directly to one specific public key, but to one having specific rights.\r\n",
          "createdAt": "2024-02-26T11:00:55Z",
          "updatedAt": "2024-02-26T11:02:25Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "> It depends how we define \"proof of possession key\" in context of a DID document, where multiple keys can be used to proof the identity. In case of natural persons when they prefer to use dids, it's more likely they use `did:key` or `did:jwk`. But since SD-JWT-VCs can also be issued to a legal person that can be using `did:web`, `did:ethr` it is able to register multiple keys.\r\n> \r\n> Key rotation in this scenario are a good security feature because they allow me to update my crypto material without issuing me new credentials that are directly bound to it. On the other hand I am unable to insert security mechanism like hashlinks since I want to point not directly to one specific public key, but to one having specific rights.\r\n\r\nYes, this makes sense. However, cnf.did might be more appropriate to encode this information. \r\n",
          "createdAt": "2024-02-26T11:05:46Z",
          "updatedAt": "2024-02-26T11:05:46Z"
        },
        {
          "author": "cre8",
          "authorAssociation": "NONE",
          "body": "> > It depends how we define \"proof of possession key\" in context of a DID document, where multiple keys can be used to proof the identity. In case of natural persons when they prefer to use dids, it's more likely they use `did:key` or `did:jwk`. But since SD-JWT-VCs can also be issued to a legal person that can be using `did:web`, `did:ethr` it is able to register multiple keys.\r\n> > Key rotation in this scenario are a good security feature because they allow me to update my crypto material without issuing me new credentials that are directly bound to it. On the other hand I am unable to insert security mechanism like hashlinks since I want to point not directly to one specific public key, but to one having specific rights.\r\n> \r\n> Yes, this makes sense. However, cnf.did might be more appropriate to encode this information.\r\n\r\nYeah, since we can not reuse this approach from the spec since it has a defined response.\r\n```\r\n\"cnf\":{\r\n  \"jku\": \"did:exmaple.com\",\r\n  \"kid\": \"key123\"\r\n}\r\n```\r\nWouldn't it be the best way to extend the RFC for CNF to include the did resolution as an option? Of course this is more work, but then we can reference to a standard",
          "createdAt": "2024-02-26T11:26:01Z",
          "updatedAt": "2024-02-26T11:26:01Z"
        },
        {
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "body": "> > > It depends how we define \"proof of possession key\" in context of a DID document, where multiple keys can be used to proof the identity. In case of natural persons when they prefer to use dids, it's more likely they use `did:key` or `did:jwk`. But since SD-JWT-VCs can also be issued to a legal person that can be using `did:web`, `did:ethr` it is able to register multiple keys.\r\n> > > Key rotation in this scenario are a good security feature because they allow me to update my crypto material without issuing me new credentials that are directly bound to it. On the other hand I am unable to insert security mechanism like hashlinks since I want to point not directly to one specific public key, but to one having specific rights.\r\n> > \r\n> > \r\n> > Yes, this makes sense. However, cnf.did might be more appropriate to encode this information.\r\n> \r\n> Yeah, since we can not reuse this approach from the spec since it has a defined response.\r\n> \r\n> ```\r\n> \"cnf\":{\r\n>   \"jku\": \"did:exmaple.com\",\r\n>   \"kid\": \"key123\"\r\n> }\r\n> ```\r\n> \r\n> Wouldn't it be the best way to extend the RFC for CNF to include the did resolution as an option? Of course this is more work, but then we can reference to a standard\r\n\r\n`jku` can not be used in my opinion.\r\n\r\nRFC7800 says:\r\n\r\n> This is done using the \"jku\" member.  Its  value is a URI [[RFC3986](https://www.rfc-editor.org/rfc/rfc3986)] that refers to a resource for a set of JSON-encoded public keys represented as a [JWK](https://www.rfc-editor.org/rfc/rfc7800.html#ref-JWK) Set [JWK], one of which is the proof-of-possession key.\r\n\r\nI do not think that this matches to (most) DID documents.",
          "createdAt": "2024-02-26T11:35:04Z",
          "updatedAt": "2024-02-26T11:35:04Z"
        },
        {
          "author": "cre8",
          "authorAssociation": "NONE",
          "body": "> > > > It depends how we define \"proof of possession key\" in context of a DID document, where multiple keys can be used to proof the identity. In case of natural persons when they prefer to use dids, it's more likely they use `did:key` or `did:jwk`. But since SD-JWT-VCs can also be issued to a legal person that can be using `did:web`, `did:ethr` it is able to register multiple keys.\n> > > > Key rotation in this scenario are a good security feature because they allow me to update my crypto material without issuing me new credentials that are directly bound to it. On the other hand I am unable to insert security mechanism like hashlinks since I want to point not directly to one specific public key, but to one having specific rights.\n> > > \n> > > \n> > > Yes, this makes sense. However, cnf.did might be more appropriate to encode this information.\n> > \n> > Yeah, since we can not reuse this approach from the spec since it has a defined response.\n> > \n> > ```\n> > \"cnf\":{\n> >   \"jku\": \"did:exmaple.com\",\n> >   \"kid\": \"key123\"\n> > }\n> > ```\n> > \n> > Wouldn't it be the best way to extend the RFC for CNF to include the did resolution as an option? Of course this is more work, but then we can reference to a standard\n> \n> `jku` can not be used in my opinion.\n> \n> RFC7800 says:\n> \n> > This is done using the \"jku\" member.  Its  value is a URI [[RFC3986](https://www.rfc-editor.org/rfc/rfc3986)] that refers to a resource for a set of JSON-encoded public keys represented as a [JWK](https://www.rfc-editor.org/rfc/rfc7800.html#ref-JWK) Set [JWK], one of which is the proof-of-possession key.\n> \n> I do not think that this matches to (most) DID documents.\n\nThat's why I mentioned we need to update or extend the spec so it is compliant with the response of a did doc.\nWe either extend the jku usage or define a new field like did.",
          "createdAt": "2024-02-26T12:11:14Z",
          "updatedAt": "2024-02-26T12:11:14Z"
        },
        {
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "body": "> > > > > It depends how we define \"proof of possession key\" in context of a DID document, where multiple keys can be used to proof the identity. In case of natural persons when they prefer to use dids, it's more likely they use `did:key` or `did:jwk`. But since SD-JWT-VCs can also be issued to a legal person that can be using `did:web`, `did:ethr` it is able to register multiple keys.\r\n> > > > > Key rotation in this scenario are a good security feature because they allow me to update my crypto material without issuing me new credentials that are directly bound to it. On the other hand I am unable to insert security mechanism like hashlinks since I want to point not directly to one specific public key, but to one having specific rights.\r\n> > > > \r\n> > > > \r\n> > > > Yes, this makes sense. However, cnf.did might be more appropriate to encode this information.\r\n> > > \r\n> > > \r\n> > > Yeah, since we can not reuse this approach from the spec since it has a defined response.\r\n> > > ```\r\n> > > \"cnf\":{\r\n> > >   \"jku\": \"did:exmaple.com\",\r\n> > >   \"kid\": \"key123\"\r\n> > > }\r\n> > > ```\r\n> > > \r\n> > > \r\n> > >     \r\n> > >       \r\n> > >     \r\n> > > \r\n> > >       \r\n> > >     \r\n> > > \r\n> > >     \r\n> > >   \r\n> > > Wouldn't it be the best way to extend the RFC for CNF to include the did resolution as an option? Of course this is more work, but then we can reference to a standard\r\n> > \r\n> > \r\n> > `jku` can not be used in my opinion.\r\n> > RFC7800 says:\r\n> > > This is done using the \"jku\" member.  Its  value is a URI [[RFC3986](https://www.rfc-editor.org/rfc/rfc3986)] that refers to a resource for a set of JSON-encoded public keys represented as a [JWK](https://www.rfc-editor.org/rfc/rfc7800.html#ref-JWK) Set [JWK], one of which is the proof-of-possession key.\r\n> > \r\n> > \r\n> > I do not think that this matches to (most) DID documents.\r\n> \r\n> That's why I mentioned we need to update or extend the spec so it is compliant with the response of a did doc. We either extend the jku usage or define a new field like did.\r\n\r\nA standalone `kid` is also valid according to RFC7800 3.4, but for interoperability the best solution would be a new method `did`. But @bc-pi said, he thinks that this spec is not the right home for such an IANA registration.",
          "createdAt": "2024-02-26T12:13:54Z",
          "updatedAt": "2024-02-26T12:13:54Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "> > kid does not really help with interoperability.\r\n> \r\n> Why? either relative of absolute DID URL, it is being used as a `kid` value already.\r\n\r\nWe should have further restrictions on the DID URL. a `kid` containing a DID URL that is a DID would resolve to multiple keys potentially, which would cause ambiguity. \r\n\r\nI made a mistake previously when I said using a DID URL would solve the problem since a DID is also a DID URL:\r\n> did-url = did path-abempty [ \"?\" query ] [ \"#\" fragment ]\r\n\r\nwhereas path-abempty can be literally completely empty which allows a DID to be a DID URL which makes sense because it is the location of the DID Document.\r\n\r\nWe would need to say that kid must be a DID URL that when dereferenced results in a single key (ideally JWK).",
          "createdAt": "2024-03-07T13:28:19Z",
          "updatedAt": "2024-03-07T13:28:19Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "I think the text Brian suggested originally is sufficient: https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/205#issuecomment-1947438330\r\n\r\n(at least initially) please keep the option to use cnf.kid, as limiting the use of DIDs only with cnf.did could be a significant blocker for some implementations to implement sd-jwt vc. especially if sd-jwt vc will not define cnf.did (and I won't even attempt to try convince Brian to do so).\r\n\r\nI also think it is probably better to say DID URL as opposed to just DID.",
          "createdAt": "2024-03-08T03:14:34Z",
          "updatedAt": "2024-03-08T03:14:34Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "> I think the text Brian suggested originally is sufficient: [#205 (comment)](https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/205#issuecomment-1947438330)\r\n> \r\n> (at least initially) please keep the option to use cnf.kid, as limiting the use of DIDs only with cnf.did could be a significant blocker for some implementations to implement sd-jwt vc. especially if sd-jwt vc will not define cnf.did (and I won't even attempt to try convince Brian to do so).\r\n> \r\n> I also think it is probably better to say DID URL as opposed to just DID.\r\n\r\nWhy is it a blocker if they use cnf.did instead of cnf.kid?",
          "createdAt": "2024-03-12T14:05:20Z",
          "updatedAt": "2024-03-12T14:05:20Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "After some discussions, we believe the best approach is to define a dedicated `cnf` method for DIDs through a very small spec.",
          "createdAt": "2024-04-30T17:18:20Z",
          "updatedAt": "2024-04-30T17:18:20Z"
        },
        {
          "author": "TimoGlastra",
          "authorAssociation": "NONE",
          "body": "As having implemented DID holder binding for SD-JWT VCs while this discussion has been ongoing, we've decided to add the didUrl (pointing to the specific key that has been verified before issuance) in the `kid` value of the `cnf` claim.\r\n\r\nSo it will look something like:\r\n\r\n```\r\n{\r\n   \"cnf\": {\r\n       \"kid\": \"did:example:123#key-id\"\r\n   }\r\n}\r\n```\r\n\r\nNot sure if relevant for this discussion, but to show some implementers feedback on something that we have working today.\r\n\r\nHappy to change our implementation on what comes out of this discussion.",
          "createdAt": "2024-05-18T08:12:50Z",
          "updatedAt": "2024-05-18T08:12:50Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "> As having implemented DID holder binding for SD-JWT VCs while this discussion has been ongoing, we've decided to add the didUrl (pointing to the specific key that has been verified before issuance) in the `kid` value of the `cnf` claim.\r\n> \r\n> So it will look something like:\r\n> \r\n> ```\r\n> {\r\n>    \"cnf\": {\r\n>        \"kid\": \"did:example:123#key-id\"\r\n>    }\r\n> }\r\n> ```\r\n> \r\n> Not sure if relevant for this discussion, but to show some implementers feedback on something that we have working today.\r\n> \r\n> Happy to change our implementation on what comes out of this discussion.\r\n\r\nWhile I cannot prevent anybody from using this, I would find it much cleaner to use a dedicated DID claim for this for interoperability reasons. It should be fairly easy to write a DID `cnf` IETF draft:\r\n\r\n```\r\n{\r\n   \"cnf\": {\r\n       \"did\": { \"did_url\": \"did:example:123#key-id\" }\r\n   }\r\n}\r\n```",
          "createdAt": "2024-05-21T09:46:03Z",
          "updatedAt": "2024-05-21T09:46:03Z"
        },
        {
          "author": "TimoGlastra",
          "authorAssociation": "NONE",
          "body": "As i mentioned in my post, we're happy to change our implementation on what comes out of this discussion.\n\nBut until then re-using existing fields is a lot easier to integrate. `kid` been used for did key identifiers for multiple years already\n\n",
          "createdAt": "2024-05-23T09:08:20Z",
          "updatedAt": "2024-05-23T09:08:20Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "We discussed this on our editors' call and agreed that this method should be defined in a separate spec. ",
          "createdAt": "2024-08-06T18:13:50Z",
          "updatedAt": "2024-08-06T18:13:50Z"
        },
        {
          "author": "peacekeeper",
          "authorAssociation": "NONE",
          "body": "I don't really have a strong opinion on whether \"kid\" or \"jku\" a new DID-based \"cnf\" method should be used.\r\n\r\nIn any case however, it would still make sense to have language such as what has been proposed by @bc-pi in https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/205#issuecomment-1947438330, considering existing implementations and use cases. Also, an example using a DID as a user's identifier would be useful.",
          "createdAt": "2024-08-06T18:48:55Z",
          "updatedAt": "2024-08-06T18:48:55Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "As previously discussed, a DID based confirmation method should be defined in a separate spec. I'd encourage interested parties to pursue that.  ",
          "createdAt": "2024-11-13T13:15:45Z",
          "updatedAt": "2024-11-13T13:15:45Z"
        },
        {
          "author": "cre8",
          "authorAssociation": "NONE",
          "body": "@peacekeeper @bc-pi would it help to add to the spec that sd-jwt-vc will support all listed [JWT Confirmation Methods](https://www.iana.org/assignments/jwt/jwt.xhtml). This makes clear that this spec is not the place to define new confirmation methods.\r\n\r\nSo the way to go would be to write the spec for `DID` for confirmation method, add it to the list (procedure listed there) and then it can be used here. \r\n\r\nSince key binding has no reference to a specific confirmation method, it should have no impact.",
          "createdAt": "2024-11-18T08:56:09Z",
          "updatedAt": "2024-11-18T08:56:52Z"
        },
        {
          "author": "peacekeeper",
          "authorAssociation": "NONE",
          "body": "@cre8 I think that might actually be a good idea, but still, PR 251 should be reverted and the corresponding issues re-opened (like this one here), for reasons discussed on the mailing list.",
          "createdAt": "2024-11-18T10:46:22Z",
          "updatedAt": "2024-11-18T10:46:22Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "I originally opened this issue, and I agree with closing it. I think a lot has evolved since I opened this issue and I am not supportive of sd-jwt vc spec mentioning DIDs. If people still want DIDs, cnf.did should be defined (i have been saying it for few years), which would allow DIDs to be used because sd-jwt vc defines the usage of a cnf claim.",
          "createdAt": "2024-11-18T10:51:26Z",
          "updatedAt": "2024-11-18T10:51:26Z"
        }
      ]
    },
    {
      "number": 206,
      "id": "I_kwDOJbVClc5-iErh",
      "title": "Add sd_hash to payload of Key Biniding JWT example",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/206",
      "state": "CLOSED",
      "author": "gmirc12",
      "authorAssociation": "NONE",
      "assignees": [
        "danielfett"
      ],
      "labels": [],
      "body": "According to spec [Key Binding for SD-JWT-VC](https://www.ietf.org/archive/id/draft-ietf-oauth-sd-jwt-vc-01.html#name-key-binding-jwt), \r\n\r\n> the Key Binding JWT MUST adhere to the rules defined in Section 5.3 of [SD-JWT spec](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-07.html#section-5.3-3.2.1)\r\n\r\nThis means, that the sd_hash claim has to be included in the payload of the Key Binding JWT. Can you correct the example, given in [SD-JWT-VC with Key Binding example](https://www.ietf.org/archive/id/draft-ietf-oauth-sd-jwt-vc-01.html#section-5.2-1), so that it includes the sd_hash claim?",
      "createdAt": "2024-02-07T11:53:41Z",
      "updatedAt": "2024-02-13T14:33:11Z",
      "closedAt": "2024-02-13T14:33:11Z",
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Good catch! We will fix this. Indeed, the sd_hash is missing.",
          "createdAt": "2024-02-07T12:05:08Z",
          "updatedAt": "2024-02-07T12:05:08Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "@danielfett can you fix the example?",
          "createdAt": "2024-02-07T12:05:34Z",
          "updatedAt": "2024-02-07T12:05:34Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Looks like we need to switch back to the pointing at the main branch of the sd-jwt-python library for generating the examples. `sd_hash` should show up automagically once that's done. ",
          "createdAt": "2024-02-07T16:21:39Z",
          "updatedAt": "2024-02-07T16:21:39Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "https://drafts.oauth.net/oauth-sd-jwt-vc/206_sd_hash/draft-ietf-oauth-sd-jwt-vc.html#section-4.2-2 has the PR preview of the fix ",
          "createdAt": "2024-02-07T16:29:53Z",
          "updatedAt": "2024-02-07T16:29:53Z"
        }
      ]
    },
    {
      "number": 208,
      "id": "I_kwDOJbVClc5-3eyT",
      "title": "SD-JWT VC Chaining / Delegation?",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/208",
      "state": "CLOSED",
      "author": "c2bo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "pending close"
      ],
      "body": "I've been getting increasing amounts of questions about delegation / chaining with sd-jwts (and mdoc). Especially delegation seems to be a topic that people are starting to wonder about with cases like a person acting on behalf of another person in certain scopes (e.g., tax consultant accessing a system on your behalf). \r\n\r\nMy naive thought was that this could be done similarly to how the x5c header parameter currently works: Introduce a new header parameter that contains an sd-jwt (including key binding jwt and relevant disclosures) where the chained sd-jwt is used to establish trust (via the original issuer) and resolve the key (confirmation claim) for signature validation. For implementations, this should not add too much effort as it would just be a recursive call to verify the contained sd-jwt vc.\r\n\r\nI am not entirely sure it makes sense to bring in the additional complexity (and privacy concerns) but on the other hand I do see benefit in supporting some kind of credential chaining / delegation mechanism within the credential format itself. Do you think that this is something worth discussing and would this be the right spec to do so?",
      "createdAt": "2024-02-10T14:03:24Z",
      "updatedAt": "2024-06-11T17:56:43Z",
      "closedAt": "2024-06-11T17:56:43Z",
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "NONE",
          "body": "good point, since the delegation in a SSI model must be perfomed by the end-user and not centralized in a credential issuer, the idea that came to my mind is to:\r\n\r\n- define a credential type for this specific purpose\r\n- define a data model for this specific purpose\r\n- issue a self-issued token using SIOPv2 using a personal wallet\r\n- encapsulate in this token two credential presentation (with the disclosure minimized for the purpose of the delegation):\r\n  - the one of the delegator with the aud set to the final RP and the delegated subject\r\n  - the one of the delegated with the aud set to the final RP and the delegator subject\r\n- the token that encapsulate these two presented credentials with disclosure must be signed using the private key related to the public key to the delegator credential, contained in this token (providing the proof of possession)\r\n- the delegator provides this token to the delegated\r\n\r\nthe RP that received this token from the delegated, in a VP_Token during a presentation, recognize the type and then the corresponding data model. \r\n\r\nExtracts the two VC, evaluates the trust with both their issuers, evaluates the pop of the delegator, evaluates the pop of the delegator in the presentation, then authenticates/grants the delegated.\r\n\r\nhow these tokens can be exchanges should be further defined. In my assumoption cannot exist delegation for any RP, each delegation must be configured with a specific RP or a set of RPs (aud). the chained approach is nested using attribute and cryptografic bindinds.\r\n\r\nto be continued ... :-)\r\n",
          "createdAt": "2024-02-10T14:24:17Z",
          "updatedAt": "2024-02-10T14:24:17Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree with @peppelinux that this is not an SD-JWT VC spec question, it is a credential type question. IMO, this is out of scope of this spec.",
          "createdAt": "2024-04-30T17:17:04Z",
          "updatedAt": "2024-04-30T17:17:04Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I would concur that this is beyond the scope of this spec.",
          "createdAt": "2024-04-30T18:01:09Z",
          "updatedAt": "2024-04-30T18:01:09Z"
        },
        {
          "author": "c2bo",
          "authorAssociation": "MEMBER",
          "body": "I generally agree (which is also why I was unsure if I should raise this issue here), but that poses the question: Where would we propose a structure for this? Imho it would make sense to propose a general approach that is shared at least to some degree between different credential types.",
          "createdAt": "2024-05-07T14:26:45Z",
          "updatedAt": "2024-05-07T14:26:45Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "NONE",
          "body": "@c2bo a brand new draft should born explaining a \"shared credential\", where the holder of this shared credential presents the enveloped credential(s) is a brand new type of credential specifically born for this use case\r\n\r\nI share to you my Car key credential (shortlived), you present this to my Car and drive it untill the credential is valid (unexpired/revoked).\r\n\r\nthis - definitively - exalts concepts of sharing vs. presentation and also delegated presentation.",
          "createdAt": "2024-05-08T13:12:52Z",
          "updatedAt": "2024-05-08T13:12:52Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "> @c2bo a brand new draft should born explaining a \"shared credential\", where the holder of this shared credential presents the enveloped credential(s) is a brand new type of credential specifically born for this use case\r\n> \r\n> I share to you my Car key credential (shortlived), you present this to my Car and drive it untill the credential is valid (unexpired/revoked).\r\n> \r\n> this - definitively - exalts concepts of sharing vs. presentation and also delegated presentation.\r\n\r\nI would expect those things to be very ecosystem (EUDIW) or even domain-specific (car vendors). However, SD-JWT VC is extensible by design and can include any sort of claims and even another PID credential as a claim (if needed), so I believe this use case is supported in general but out-of-scope of this specification.\r\n\r\n@c2bo @peppelinux Marking this as pending close for one week and then close if no activity.",
          "createdAt": "2024-05-24T10:03:39Z",
          "updatedAt": "2024-05-24T10:03:39Z"
        },
        {
          "author": "c2bo",
          "authorAssociation": "MEMBER",
          "body": "I agree that this is likely going to be somewhat ecosystem specific, but I do believe one place to create an \"example\" / best practice could still help though. I agree that this draft is probably not the right place though -> let's figure out where this would fit.",
          "createdAt": "2024-05-24T11:54:44Z",
          "updatedAt": "2024-05-24T11:54:44Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "> I agree that this is likely going to be somewhat ecosystem specific, but I do believe one place to create an \"example\" / best practice could still help though. I agree that this draft is probably not the right place though -> let's figure out where this would fit.\r\n\r\nBest practices depend on ecosystem-specific requirements. For instance, in some countries you won't have (Q)EEAs that are bound to a public key, or won't have an identifier in the PID that can be used to bind the (Q)EEAs to the PID, and and and.\r\n\r\nThere are many different ways how this can be solved. Simple and more complex. The following is no guidance but should show there are many different options and they depend heavily on ecosystem capabilities such as the presence of a PID, usage policy of PIDs (one-time vs multipe-times, ...) etc, and the anticipated user experience.\r\n\r\nFor example, the delegation could be a SD-JWT VC (a (Q)EAA) issued by the delegator that contains:\r\n- claims about the delegator.\r\n- claims about the delegate or the PID key of the delegate to establish some form of linking later.\r\n- In case the SD-JWT VC was signed by the PID key of the delegator, then it would probably also contain the PID of the delegator with the claims to allow the verifier to do claims matching at presentation time. In that case, you probably don't need the claims about the delegate explicitly.\r\n- signature of the delegator (produced by the key bound to the delegator's PID, or by a QES or AES authorized by the delegator potentially by presenting their PID)\r\n- if the signature was produced by the PID, it would probably even include the PID of the delegator, or QES/AES cert.\r\n\r\nInstead of binding this to claims about the delegate, you could also include the key of the PID of the delegate instead (or some other key the delegate controls) which will require that the delegator has that information.\r\n\r\nPerhaps a simpler example would be, the SD-JWT VC would be issued by the receiving party, e.g., delivery website, let's call it Foo, in case somebody else wants to get a delivery on behalf of the delegator. In that case, a flow could be,\r\n- delegator goes to Foo website and authenticates using their PID\r\n- delegator enters information about the delegate, e.g., firstname, lastname\r\n- Foo issues an SD-JWT VC with no cryptographic binding, delegator receives it and stores in their wallet.\r\n- Delegator sends SD-JWT VC to delegate and delegate stores the SD-JWT VC in their wallet as well.\r\n- Delegate presents their PID and the SD-JWT VC (with no KB-JWT) to Foo\r\n- Foo verifies linking based on claim matching\r\n\r\nIn the above example, Foo could be also the wallet of the delegator, and instead of claims, one could issue the SD-JWT VC to a specific key provided by the delegate.\r\n\r\nI can think of many many variations of this. Without understanding requirements of the specific use case better, I'm not sure if we could come up with best practices and include such an example.\r\n\r\n@c2bo is there a list of use cases with more specific requirements? ",
          "createdAt": "2024-05-24T12:56:03Z",
          "updatedAt": "2024-05-24T13:08:09Z"
        },
        {
          "author": "c2bo",
          "authorAssociation": "MEMBER",
          "body": "I am not aware of a somewhat complete list of use-cases. The main use-cases that I have seen mentioned and been asked about (and also ones that we are most interested in) goes into the direction of Power of Attorney. Acting on behalf of another entity via some sort of signed credential/document.\r\n\r\nShould we close this issue here and figure out a better place to have this discussion?",
          "createdAt": "2024-06-03T11:48:41Z",
          "updatedAt": "2024-06-03T11:48:41Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing now since it is out of scope.",
          "createdAt": "2024-06-11T17:56:43Z",
          "updatedAt": "2024-06-11T17:56:43Z"
        }
      ]
    },
    {
      "number": 211,
      "id": "I_kwDOJbVClc5_O58b",
      "title": "Consider supporting IPLD links in vct field",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/211",
      "state": "CLOSED",
      "author": "oed",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "discuss"
      ],
      "body": "Currently the value for the `vct` field is defined as follows:\r\n> The vct value MUST be a case-sensitive `StringOrURI` (see [[RFC7519](https://drafts.oauth.net/oauth-sd-jwt-vc/draft-ietf-oauth-sd-jwt-vc.html#RFC7519)]) value serving as an identifier for the type of the SD-JWT VC.\r\n\r\nThis puts some unfortunate limitations on how the `vct` can be represented. [IPLD](https://ipld.io/docs/) is a data format that allows developers to represent \"merkle dags\", essentially arbitrary hash linked data structures. A key concept within IPLD is the concept of a `link`, which is represented using the hash of the linked content (encoded as a \"CID\"). Specifically for [dag-json](https://ipld.io/specs/codecs/dag-json/spec/), an link is represented as follows (example below points to a [wikipedia mirror](https://explore.ipld.io/#/explore/bafybeiaysi4s6lnjev27ln5icwm6tueaw2vdykrtjkwiphwekaywqhcjze)):\r\n```json\r\n{\r\n  \"wikipedia\": { \"/\": \"bafybeiaysi4s6lnjev27ln5icwm6tueaw2vdykrtjkwiphwekaywqhcjze\" }\r\n}\r\n```\r\n\r\nIt would be great if the `vct` could be represented as an immutable object referred to as a hash, and retain compatibility with existing IPLD tooling. Therefore, it would be great if the spec for `vct` could be extended to support the following:\r\n```json\r\n{\r\n  \"vct\": { \"/\": \"bafymyhash...\" }\r\n}\r\n```\r\n\r\nAn alternative approach that would be compatible with the current `vct` spec would be to represent the hash as an ipfs url, e.g. `ipfs://bafymyhash...`. However, this would mean that compatibility is broken with existing tooling such as [explore.ipld.io](https://explore.ipld.io)",
      "createdAt": "2024-02-14T15:29:23Z",
      "updatedAt": "2024-06-10T13:51:11Z",
      "closedAt": "2024-06-10T13:51:11Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I think using the URL would be the appropriate way here:\r\n\r\n- it avoids us having a dependency on IPFS specs,\r\n- it is self-describing and I suppose a resolving strategy is defined somewhere, and finally\r\n- it allows implementers to treat vct as a string, which is quite important for (e.g.) comparing two vct values.",
          "createdAt": "2024-02-14T15:56:12Z",
          "updatedAt": "2024-02-14T15:56:12Z"
        },
        {
          "author": "oed",
          "authorAssociation": "NONE",
          "body": "> it avoids us having a dependency on IPFS specs,\r\n\r\nDoesn't need to rely on the IPFS spec, just need more flexibility\r\n\r\n> it is self-describing and I suppose a resolving strategy is defined somewhere, and finally\r\n\r\nIt would break resolution in IPLD though. Generally you can query through an IPLD graph with a path: `<cid-object1>/field/object2/field` where `field` of object1 contains a CID. This works if the CID conforms to the IPLD data model, but not if you are using `ipfs://<cid>`\r\n\r\n",
          "createdAt": "2024-02-14T17:26:49Z",
          "updatedAt": "2024-02-14T17:26:49Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "> > it avoids us having a dependency on IPFS specs,\r\n> \r\n> Doesn't need to rely on the IPFS spec, just need more flexibility\r\n\r\nChanging this would have a lot of consequences for the spec, and if we wouldn't refer to the IPFS spec, allowing this flexibility without a good reason is a hard sell. \r\n\r\n> > it is self-describing and I suppose a resolving strategy is defined somewhere, and finally\r\n> \r\n> It would break resolution in IPLD though. Generally you can query through an IPLD graph with a path: `<cid-object1>/field/object2/field` where `field` of object1 contains a CID. This works if the CID conforms to the IPLD data model, but not if you are using `ipfs://<cid>`\r\n\r\nI'm not really familiar with the IPFS concepts, so please excuse my ignorance, but from the outside, what you describe seems like a shortcoming of the URI scheme to me. Or is there something I'm missing?",
          "createdAt": "2024-02-14T18:30:53Z",
          "updatedAt": "2024-02-14T18:30:53Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "There has been some discussion on this here: https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/231#discussion_r1601608898\r\n\r\nMy questions above are still open - please address @oed ",
          "createdAt": "2024-06-04T15:46:52Z",
          "updatedAt": "2024-06-04T15:46:52Z"
        },
        {
          "author": "oed",
          "authorAssociation": "NONE",
          "body": "@danielfett so this issue actually got resolved by a PR to the dag-jose codec spec: https://github.com/ipld/ipld/pull/326\r\nEssentially making the jose spec use `ipfs://<cid>` instead of the object approach.\r\n\r\nThe issue described in #231 is different, basically it wants to avoid a self reference on the `vct` field since that's incompatible with content addressing. ",
          "createdAt": "2024-06-10T13:51:11Z",
          "updatedAt": "2024-06-10T13:51:11Z"
        }
      ]
    },
    {
      "number": 212,
      "id": "I_kwDOJbVClc5_diFv",
      "title": "Embedded Issuer Policies",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/212",
      "state": "CLOSED",
      "author": "paulbastian",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "discuss",
        "pending close",
        "future-extension",
        "policy"
      ],
      "body": "For high-security usecases or use cases with sensitive data, some Issuers may want to require that VCs are only released to authorized Verifiers. One of the options to establish such a mechanism is to embed such a policy in the credential itself.\r\n\r\nDo you believe this is something that should be solved by SD-JWT VC or does this belong into a profile / trust framework?\r\n\r\nFor example, an SD-JWT VC may contain a `issuer_policy` claim, that references a X509 PKI CA indicating to wallets that only Relying Parties authenticated with a certificate form this CA are allowed to receive a presentation of this VC.",
      "createdAt": "2024-02-16T11:52:19Z",
      "updatedAt": "2025-09-16T18:30:38Z",
      "closedAt": "2025-09-16T18:30:37Z",
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "NONE",
          "body": "interesting feature, it brings some requirements:\r\n\r\n- definition of entity categories, a grouping of entities for specific purpose or compliance profile\r\n- verifiable attestations/trust marks to proof the compliance of an entity to a specific purpose\r\n\r\nI would not call it issuer_policy otherwise it seems that the subject of the policy is the issuer, while the issuer is the issuer and the subject is the credential, then credential_policy seems more appropriate if you agree. At the same time the issuer does not represent an authority in the trust ecosystem. The policy should be defined in a trust framework by trust authorities in a large ecosystem where multiple issuers operates. Ideally, the trust authority publishes the catalogue of the issuers granted for some credential issuances (eg: using OpenID Federation we have trust_mark_issuers that maps trust mark ids with entities id).\r\n\r\nIn your proposal once the wallet has obtained the credential, evaluates the credential_policy to kow to which entity categories it can present it. \r\n\r\nThe RP should send a presentation request providing the trust mark/verifiable attestation that give the proof of its compliance to some profile/entity categories enabled in the credential_policy. Then the wallet evaluates the trust with the RP, then evaluates the Trust Marks and present the credential.\r\n\r\nthe model you propose is interesting but can be simplified and make more flexible by saying that:\r\n\r\n- the credential_policy should be provided in the credential definition published in the issuer metadata, preventing the revocation of the credential when the policy might change in the future (or be extended with additional audiences)\r\n\r\nthe requirement of the trust-markls/verifiable attestation remains for the RP.\r\n\r\na question is: is these policy enables with a sort of policy language (as the openid federation metadata policy) or are static and audience focused?",
          "createdAt": "2024-02-16T12:05:49Z",
          "updatedAt": "2024-02-16T12:05:49Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> Do you believe this is something that should be solved by SD-JWT VC or does this belong into a profile / trust framework? \r\n\r\nI don't know, to be honest, but my intuition is that SD-JWT VC isn't the right place. I'm not sure putting that kind of policy in credential itself is the right place either.  ",
          "createdAt": "2024-02-16T23:21:12Z",
          "updatedAt": "2024-02-16T23:21:12Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "we did have a use-case where the issuers wanted to ensure that credentials are not being used by unauthorized verifiers, and wanted to ensure that by including legal policy reference inside the credential.",
          "createdAt": "2024-02-17T01:44:23Z",
          "updatedAt": "2024-02-17T01:44:23Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "It seems that there is not much interest in this topic, at least it has not come up in any discussions in the last months. Unless there is a really good use case, we will close this issue.",
          "createdAt": "2024-08-06T18:18:25Z",
          "updatedAt": "2024-08-06T18:18:25Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "It has been suggested that there might still be interest in this topic. But the path forward is still unclear (at best). The aud claim could potentially be (mis)used for this? Or nothing here at this layer. Or expressed in metadata. Or part of a vct or sub-vct definition. ",
          "createdAt": "2024-08-13T18:23:51Z",
          "updatedAt": "2024-08-14T17:47:06Z"
        },
        {
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "body": "From the eIDAS implementing act proposals there is:\r\n(12) \u2018embedded disclosure policy\u2019 means a set of rules, embedded in an electronic\r\nattestation of attributes by its provider, that indicates the conditions that a wallet\r\nrelying party has to meet to access the electronic attestation of attributes;",
          "createdAt": "2024-08-26T07:04:04Z",
          "updatedAt": "2024-08-26T07:04:04Z"
        },
        {
          "author": "c2bo",
          "authorAssociation": "MEMBER",
          "body": "Recent discussions about transaction data in OpenID4VP have also brought up the topic of issuer policy regarding intended usage (not only allowed audience) of a credential (https://github.com/openid/OpenID4VP/pull/197#issuecomment-2318238646). Should this be a new issue or do you think it fits in this one?",
          "createdAt": "2024-09-01T19:40:19Z",
          "updatedAt": "2024-09-01T19:40:19Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "This issue seems to be related to the discussion: https://github.com/openid/OpenID4VP/issues/232\r\n\r\nIMO, there are 2 options going forward\r\n\r\n- defining how to express policies in this specification\r\n- leave it to the \"trust framework\" by allowing custom claims to express different policies\r\n\r\nIf this specification is/plans to be decoupled from the VC issuance/presentation protocols and/or trust frameworks, option 2 should be considered.\r\n\r\nWe introduced an approach: https://hub.ebsi.eu/vc-framework/trust-model/policies, but this approach is exchange-protocol dependent (at least query language dependent), which comes with limitations and certain specification lock-in.",
          "createdAt": "2024-09-06T14:16:33Z",
          "updatedAt": "2024-09-06T14:16:33Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "> This issue seems to be related to the discussion: [openid/OpenID4VP#232](https://github.com/openid/OpenID4VP/issues/232)\r\n> \r\n> IMO, there are 2 options going forward\r\n> \r\n> * defining how to express policies in this specification\r\n> * leave it to the \"trust framework\" by allowing custom claims to express different policies\r\n> \r\n> If this specification is/plans to be decoupled from the VC issuance/presentation protocols and/or trust frameworks, option 2 should be considered.\r\n> \r\n> We introduced an approach: https://hub.ebsi.eu/vc-framework/trust-model/policies, but this approach is exchange-protocol dependent (at least query language dependent), which comes with limitations and certain specification lock-in.\r\n\r\nI'm in favor of option 2. I think it is really hard for us to anticipate how to encode these policies. We would end up having something that W3C VCDM has which is an extension point for policies (they call it terms of use) without actually defining them which has not much value because it has to be defined per trust framework or ecosystem anyways.\r\n\r\nI'd be in favor of adding an example of how this can be done without providing normative statements.\r\n\r\nI understand there are protocol-specific features that require things in the SD-JWT VC but I was wondering whether it makes more sense to have a profile of SD-JWT VC for these protocols which defines a common set of claims to support these protocols. OID4VP `transaction_data` could be one of these features. Another example might be `session_transcript` (b64u-encoded CBOR blob) if SD-JWT VC is used with ISO 18013-5.\r\n\r\nAny thoughts? @c2bo @alenhorvat @paulbastian \r\n\r\n\r\n\r\n",
          "createdAt": "2024-10-10T12:47:22Z",
          "updatedAt": "2024-10-10T12:48:04Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "You could define a generic placeholder \"policies\" (pol?) with a \"typ\" or \"type\" member, where typ/type value is either registered in IANA or is a private value defined by the framework.\r\nPolicy can be embedded or referenced (URL + digest). Whether the policy is machine readable or not, depends on the use case.\r\n\r\nSimilar to RFC7800.\r\n\r\n(I think ETSI defines some policies for x509, so they may include the x509 itself or translate them to JSON)",
          "createdAt": "2024-10-10T12:53:32Z",
          "updatedAt": "2024-10-10T12:54:25Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "@paulbastian Is this issue superseded by recent developments? I understand EUDI now has a different proposal for encoding authorization policies, correct? Do we still need to define this in SD-JWT VC, and if so, is there a proposal we can review?",
          "createdAt": "2025-09-16T14:41:08Z",
          "updatedAt": "2025-09-16T14:41:08Z"
        },
        {
          "author": "c2bo",
          "authorAssociation": "MEMBER",
          "body": "I think we need some mechanism to embed such policies, but I tend to agree that this seems to be something that needs to be defined in the scope of the trust ecosystem. @cre8 is that in line with the direction ETSI is going?",
          "createdAt": "2025-09-16T16:11:42Z",
          "updatedAt": "2025-09-16T16:11:42Z"
        },
        {
          "author": "cre8",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, the implementing acts are mentioning three approaches, in the German Blueprint we defined a fourth one that will also be standardised, see: \n\nhttps://bmi.usercontent.opencode.de/eudi-wallet/eidas-2.0-architekturkonzept/content/appendix/06-disclosure-policies/#use-case-scenarios\n\nThe policy is referenced in the vci issuer metadata (required by the arf) and has to be fetched and saved by the wallet during the issuance process.\n\nSo the disclosure policy is independent from the credential format and requires no special changes or additions to SD jwt vc\n\n@awoie there is already an implementation for an issuer, see: https://openwallet-foundation-labs.github.io/eudiplo/main/getting-started/issuance/advanced-features/#embedded-disclosure-policy\n\nBut I have no wallet available to test the full flow",
          "createdAt": "2025-09-16T16:28:00Z",
          "updatedAt": "2025-09-16T16:31:01Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing, since for 1.0 this is out of scope. For 1.1 we could consider this as future extension.",
          "createdAt": "2025-09-16T18:30:38Z",
          "updatedAt": "2025-09-16T18:30:38Z"
        }
      ]
    },
    {
      "number": 215,
      "id": "I_kwDOJbVClc6AnYEv",
      "title": "the wallet finding the user claims in the credential",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/215",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Ready-for-PR"
      ],
      "body": "when the user-related claims attested claims are top-level, how does the wallet knows which claims are about the user vs metadata claims vs status related claims? One could say, first validate and remove all metadata claims, than validate and remove all status related claims, and what is left is the claims about the users, but that is not always realistic. for example, issuer put aud, and wallet is not expecting it, how does it know aud is not a claim about the user? or there are multiple mechanisms to express status, when the wallet supports only one of those, how does the wallet know that claim is not a user claim. it would be a bad UX if the wallet accidentally displays those claims to the user.\r\nthe suggestion would be to have a top-level `claims` claim where the issuer puts the claims it is attesting about the user/subject, so that the wallets/verifiers can know clearly, which are the claims about the user.\r\ncc @dangodb",
      "createdAt": "2024-02-27T23:44:20Z",
      "updatedAt": "2025-08-19T18:33:05Z",
      "closedAt": "2025-08-19T18:33:05Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Maybe that top-level claim could be called `credentialSubject`...\r\n\r\nMore seriously though I think this is something that's just kinda inherent to JWT in general and while there are potential issues there as you describe there are also things in place to help.  https://datatracker.ietf.org/doc/html/rfc7519#section-4 says to ignore claims not understood (`aud` is defined and registered so needs to be understood btw) and `vct` with something like prospective [SD-JWT VC Type Metadata](https://github.com/vcstuff/sd-jwt-vc-types) and/or [OID4VCI's credential issuer metadata](https://openid.net/specs/openid-4-verifiable-credential-issuance-1_0-13.html#name-credential-issuer-metadata-6) give tools to \"understand\" claims in a given context.  \r\n\r\n",
          "createdAt": "2024-03-01T18:52:38Z",
          "updatedAt": "2024-03-01T18:54:41Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "This issue raises a point that we discussed a while ago, essentially having all metadata-related claims in the header. What about having a dedicated metadata claim instead of having a dedicated claims claim?",
          "createdAt": "2024-03-12T14:07:25Z",
          "updatedAt": "2024-03-12T14:07:25Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Also what metadata are you interested in? Or are you including things like status/iat/nbf/cnf as metadata?",
          "createdAt": "2024-03-12T14:08:41Z",
          "updatedAt": "2024-03-12T14:08:41Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "I am not necessarily arguing to put metadata in the header - that would probably make it harder to leverage the existing JWT libraries. and for the sake of this point, I am calling metadata anything that is not a claim about the holder/subject.\r\n\r\nI mean, nothing stops implementations from using \"claims\" JWT claim on top of what is currently defined in sd-jwt vc draft, but I worry that that would result in non-interoperable implementations, defining \"claims\" parameter seems like a non-brainer that could help with interoperability here..",
          "createdAt": "2024-03-20T23:57:32Z",
          "updatedAt": "2024-03-20T23:57:32Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Would it make sense to instead put dedicated VC metadata that is SD-JWT VC instance (not `vct`) specific into a dedicated metadata claim instead? This way, existing JWT claims can be used.",
          "createdAt": "2024-04-30T17:21:59Z",
          "updatedAt": "2024-04-30T17:21:59Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "This can be solved with metadata. In particular, the wallet can check if there is display metadata associated with a certain claim or not. We should add a sentence explaining how that works to the metadata spec as soon as the display metadata was added, see #236 ",
          "createdAt": "2024-08-06T18:24:00Z",
          "updatedAt": "2024-08-06T18:24:59Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> We should add a sentence explaining how that works to the metadata spec as soon as the display metadata was added, see https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/236\r\n\r\nShould we add something now that #236 has been incorporated? Or just close this?  ",
          "createdAt": "2024-12-02T17:54:00Z",
          "updatedAt": "2024-12-02T17:54:00Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "It's not clear to me that any changes or additions are needed here. But others might disagree. Would said others propose something? Or can we close this? It has had the `Ready-for-PR` label on it for over a year.\n",
          "createdAt": "2025-08-19T16:02:05Z",
          "updatedAt": "2025-08-19T16:02:05Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "this is outdated",
          "createdAt": "2025-08-19T18:33:05Z",
          "updatedAt": "2025-08-19T18:33:05Z"
        }
      ]
    },
    {
      "number": 218,
      "id": "I_kwDOJbVClc6Bxjmp",
      "title": "example for key binding",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/218",
      "state": "CLOSED",
      "author": "c2bo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "The example at 4.2 (https://drafts.oauth.net/oauth-sd-jwt-vc/draft-ietf-oauth-sd-jwt-vc.html#name-examples) seems to be broken in its current state:\r\n\r\n```\r\neyJhbGciOiAiRVMyNTYiLCAidHlwIjogInZjK3NkLWp3dCIsICJraWQiOiAiZG9jLXNp\r\nZ25lci0wNS0yNS0yMDIyIn0.eyJfc2QiOiBbIjA5dktySk1PbHlUV00wc2pwdV9wZE9C\r\nVkJRMk0xeTNLaHBINTE1blhrcFkiLCAiMnJzakdiYUMwa3k4bVQwcEpyUGlvV1RxMF9k\r\nYXcxc1g3NnBvVWxnQ3diSSIsICJFa084ZGhXMGRIRUpidlVIbEVfVkNldUM5dVJFTE9p\r\nZUxaaGg3WGJVVHRBIiwgIklsRHpJS2VpWmREd3BxcEs2WmZieXBoRnZ6NUZnbldhLXNO\r\nNndxUVhDaXciLCAiSnpZakg0c3ZsaUgwUjNQeUVNZmVadTZKdDY5dTVxZWhabzdGN0VQ\r\nWWxTRSIsICJQb3JGYnBLdVZ1Nnh5bUphZ3ZrRnNGWEFiUm9jMkpHbEFVQTJCQTRvN2NJ\r\nIiwgIlRHZjRvTGJnd2Q1SlFhSHlLVlFaVTlVZEdFMHc1cnREc3JaemZVYW9tTG8iLCAi\r\namRyVEU4WWNiWTRFaWZ1Z2loaUFlX0JQZWt4SlFaSUNlaVVRd1k5UXF4SSIsICJqc3U5\r\neVZ1bHdRUWxoRmxNXzNKbHpNYVNGemdsaFFHMERwZmF5UXdMVUs0Il0sICJpc3MiOiAi\r\naHR0cHM6Ly9leGFtcGxlLmNvbS9pc3N1ZXIiLCAiaWF0IjogMTY4MzAwMDAwMCwgImV4\r\ncCI6IDE4ODMwMDAwMDAsICJ2Y3QiOiAiaHR0cHM6Ly9jcmVkZW50aWFscy5leGFtcGxl\r\nLmNvbS9pZGVudGl0eV9jcmVkZW50aWFsIiwgIl9zZF9hbGciOiAic2hhLTI1NiIsICJj\r\nbmYiOiB7Imp3ayI6IHsia3R5IjogIkVDIiwgImNydiI6ICJQLTI1NiIsICJ4IjogIlRD\r\nQUVSMTladnUzT0hGNGo0VzR2ZlNWb0hJUDFJTGlsRGxzN3ZDZUdlbWMiLCAieSI6ICJa\r\neGppV1diWk1RR0hWV0tWUTRoYlNJaXJzVmZ1ZWNDRTZ0NGpUOUYySFpRIn19fQ.RYAGd\r\n0CrhTtnSJeZX9TlAxOqVq1cHg9DeVlzGMQ5GcPLMli_ymAThQVm9lP-XDndP2heaTjQd\r\ncAvTNtbe2sOfg~WyJRZ19PNjR6cUF4ZTQxMmExMDhpcm9BIiwgImFkZHJlc3MiLCB7In\r\nN0cmVldF9hZGRyZXNzIjogIjEyMyBNYWluIFN0IiwgImxvY2FsaXR5IjogIkFueXRvd2\r\n4iLCAicmVnaW9uIjogIkFueXN0YXRlIiwgImNvdW50cnkiOiAiVVMifV0~eyJhbGciOi\r\nAiRVMyNTYiLCAidHlwIjogImtiK2p3dCJ9.eyJub25jZSI6ICIxMjM0NTY3ODkwIiwgI\r\nmF1ZCI6ICJodHRwczovL2V4YW1wbGUuY29tL3ZlcmlmaWVyIiwgImlhdCI6IDE3MDk1N\r\nzk3MjYsICJzZF9oYXNoIjogIjYyZjM0eDRmRTRZZG1SU3RHSVdBQ1FpemdoVUFzdEE1Y\r\nW9GV2JTUFA4VlUifQ.H0Fi2Wc3UjuAsZbhfhKWqgZYd2oj20bnY_tKWP6sg3cKbhDpRC\r\nh_vCPmoHgR6MNGC1B4JcmftOxPMJ13dE3g5w\r\n```\r\nhas only 1 disclosure and the digest does not match any of the ones defined in the payload.",
      "createdAt": "2024-03-09T14:45:27Z",
      "updatedAt": "2024-03-12T20:22:48Z",
      "closedAt": "2024-03-12T20:22:48Z",
      "comments": [
        {
          "author": "c2bo",
          "authorAssociation": "MEMBER",
          "body": "Never mind regarding the digest, that matches - that was a mistake on my side.\r\nDo you think it makes sense to add a short remark that this example only discloses the address? It reads like it should have the same disclosures as the ones given before, but is configured to only disclose the address.",
          "createdAt": "2024-03-09T14:55:36Z",
          "updatedAt": "2024-03-09T14:55:36Z"
        },
        {
          "author": "lukasjhan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think that example is originated from encoded example in section 3.3 (https://drafts.oauth.net/oauth-sd-jwt-vc/draft-ietf-oauth-sd-jwt-vc.html#name-example). They have `address` disclosure.\r\n\r\nAnd also short description exist in 4.2. but it's separated before and after the example. So I guess I'm a little confused.\r\n\r\n> The following is a non-normative example of a presentation of the SD-JWT shown above including a Key Binding JWT:\r\n\r\n> In this presentation, the Holder provides only the Disclosure for the claim address. Other claims are not disclosed to the Verifier.\r\n\r\nHow about writing it all at once? I'm proposing like:\r\n\r\n> The following is a non-normative example of a presentation of the SD-JWT  shown above(3.3). In this presentation, the Holder provides only the Disclosure for the claim address including a Key Binding JWT. Other claims are not disclosed to the Verifier:\r\n",
          "createdAt": "2024-03-09T15:18:25Z",
          "updatedAt": "2024-03-09T15:19:45Z"
        },
        {
          "author": "c2bo",
          "authorAssociation": "MEMBER",
          "body": "Yeah, that would help imho. My main concern was that the example didn't properly work for some reason but that was an error on my part / my implementation.\r\nI am also fine with just closing this as it would only be a very minor change, but I do believe it would be a bit easier to understand if it's together in one part - especially if people are just searching for some examples to test with implementations.",
          "createdAt": "2024-03-09T16:17:32Z",
          "updatedAt": "2024-03-09T16:33:52Z"
        },
        {
          "author": "lukasjhan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@c2bo Good I'll open a PR for it :) ",
          "createdAt": "2024-03-09T23:36:53Z",
          "updatedAt": "2024-03-09T23:36:53Z"
        }
      ]
    },
    {
      "number": 221,
      "id": "I_kwDOJbVClc6DnEfy",
      "title": "Security considerations on integrity of Type Metadata",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/221",
      "state": "CLOSED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "pending close",
        "metadata"
      ],
      "body": "Here are considerations we could put into the security considerations section - or think about a mechanism solving the problem:\r\n\r\n## Authenticity of Provided Type Metadata\r\n\r\nIf the Type Metadata is retrieved from an HTTPS URL, it can be assumed that the retrieved information is authentic from the party in control of the URL. However, if the Type Metadata is provided via glue documents by the issuer, no such guarantees are provided and the issuer may accidentally or deliberately deliver outdated/wrong/manipulated Type Metadata. Note that `vct#integrity` claim protects the integrity of the type information, but does not guarantee that the information is authentic. The Issuer may deliver a `vct#integrity` claim that matches the metadata in the glue documents. ",
      "createdAt": "2024-03-26T12:04:25Z",
      "updatedAt": "2025-09-23T18:31:01Z",
      "closedAt": "2025-09-23T18:30:47Z",
      "comments": [
        {
          "author": "c2bo",
          "authorAssociation": "MEMBER",
          "body": "I was wondering about this part as well when reading the PR. My gut feeling would be that It might make sense to provide some mechanism with signed metadata as an option (for the cases where cannot make meaningful assumptions about the transport/provider of the metadata).",
          "createdAt": "2024-04-05T17:47:12Z",
          "updatedAt": "2024-04-05T17:47:12Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "The (largely unwritten?) threat model behind all this credential and token stuff assumes trust in the issuer.  I recognize this is potentially perceived different because the provider of type metadata is likely/sometimes not the same entity as the issuer. But the issuer still needs to be trusted and if not, aren't there bigger concerns than the integrity of Type Metadata?",
          "createdAt": "2024-05-14T17:06:37Z",
          "updatedAt": "2024-05-14T17:06:37Z"
        },
        {
          "author": "cre8",
          "authorAssociation": "CONTRIBUTOR",
          "body": "In the EUDI Wallet eco system the trust of authorization is not self claimed by the issuer which is done with linking to self controlled metadata. But done by rulebooks that define governance.\n\nSo the `vct#integrity` gives authenticity in the data the issuer wants to ship together with the sd-jwt vc, but gives no authenticity for the usage of a credential inside an eco system (e.g. education sector)",
          "createdAt": "2025-08-28T09:48:28Z",
          "updatedAt": "2025-08-28T09:48:28Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "@danielfett since we dropped glue documents from the spec in -11, can we close this issue? I suggest pending close.",
          "createdAt": "2025-09-16T14:43:48Z",
          "updatedAt": "2025-09-16T14:43:48Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Confirmed on the editor's call, closing this issue since glue documents were removed.",
          "createdAt": "2025-09-23T18:31:01Z",
          "updatedAt": "2025-09-23T18:31:01Z"
        }
      ]
    },
    {
      "number": 222,
      "id": "I_kwDOJbVClc6Dqvi_",
      "title": "Add JWS JSON serialization example",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/222",
      "state": "OPEN",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "Ready-for-PR"
      ],
      "body": "Since SD-JWT allows JWS JSON serialization, we should add an example of how one could do that with SD-JWT VC.",
      "createdAt": "2024-03-26T18:33:42Z",
      "updatedAt": "2025-09-16T15:57:00Z",
      "closedAt": null,
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "This is blocked by the pending JWS JSON Serialization in SD-JWT: https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/414/",
          "createdAt": "2024-05-14T16:51:03Z",
          "updatedAt": "2024-05-14T16:51:03Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "The PR has been merged, this can now be added.",
          "createdAt": "2024-06-05T08:24:44Z",
          "updatedAt": "2024-06-05T08:24:44Z"
        },
        {
          "author": "babisRoutis",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Something like the following?\r\n\r\nDisplay the [Example 3.3](https://www.ietf.org/archive/id/draft-ietf-oauth-sd-jwt-vc-06.html#name-example)\r\n```json\r\n{\r\n    \"payload\": \"eyJfc2QiOiBbIjA5dktySk1PbHlUV00wc2pwdV9wZE9CVkJRMk0xeTNLaHBINTE1blhrcFkiLCAiMnJzakdiYUMwa3k4bVQwcEpyUGlvV1RxMF9kYXcxc1g3NnBvVWxnQ3diSSIsICJFa084ZGhXMGRIRUpidlVIbEVfVkNldUM5dVJFTE9pZUxaaGg3WGJVVHRBIiwgIklsRHpJS2VpWmREd3BxcEs2WmZieXBoRnZ6NUZnbldhLXNONndxUVhDaXciLCAiSnpZakg0c3ZsaUgwUjNQeUVNZmVadTZKdDY5dTVxZWhabzdGN0VQWWxTRSIsICJQb3JGYnBLdVZ1Nnh5bUphZ3ZrRnNGWEFiUm9jMkpHbEFVQTJCQTRvN2NJIiwgIlRHZjRvTGJnd2Q1SlFhSHlLVlFaVTlVZEdFMHc1cnREc3JaemZVYW9tTG8iLCAiamRyVEU4WWNiWTRFaWZ1Z2loaUFlX0JQZWt4SlFaSUNlaVVRd1k5UXF4SSIsICJqc3U5eVZ1bHdRUWxoRmxNXzNKbHpNYVNGemdsaFFHMERwZmF5UXdMVUs0Il0sICJpc3MiOiAiaHR0cHM6Ly9leGFtcGxlLmNvbS9pc3N1ZXIiLCAiaWF0IjogMTY4MzAwMDAwMCwgImV4cCI6IDE4ODMwMDAwMDAsICJ2Y3QiOiAiaHR0cHM6Ly9jcmVkZW50aWFscy5leGFtcGxlLmNvbS9pZGVudGl0eV9jcmVkZW50aWFsIiwgIl9zZF9hbGciOiAic2hhLTI1NiIsICJjbmYiOiB7Imp3ayI6IHsia3R5IjogIkVDIiwgImNydiI6ICJQLTI1NiIsICJ4IjogIlRDQUVSMTladnUzT0hGNGo0VzR2ZlNWb0hJUDFJTGlsRGxzN3ZDZUdlbWMiLCAieSI6ICJaeGppV1diWk1RR0hWV0tWUTRoYlNJaXJzVmZ1ZWNDRTZ0NGpUOUYySFpRIn19fQ\",\r\n    \"header\": {\r\n        \"disclosures\": [\r\n            \"WyIyR0xDNDJzS1F2ZUNmR2ZyeU5STjl3IiwgImdpdmVuX25hbWUiLCAiSm9obiJd\",\r\n            \"WyJlbHVWNU9nM2dTTklJOEVZbnN4QV9BIiwgImZhbWlseV9uYW1lIiwgIkRvZSJd\",\r\n            \"WyI2SWo3dE0tYTVpVlBHYm9TNXRtdlZBIiwgImVtYWlsIiwgImpvaG5kb2VAZXhhbXBsZS5jb20iXQ\",\r\n            \"WyJlSThaV205UW5LUHBOUGVOZW5IZGhRIiwgInBob25lX251bWJlciIsICIrMS0yMDItNTU1LTAxMDEiXQ\",\r\n            \"WyJRZ19PNjR6cUF4ZTQxMmExMDhpcm9BIiwgImFkZHJlc3MiLCB7InN0cmVldF9hZGRyZXNzIjogIjEyMyBNYWluIFN0IiwgImxvY2FsaXR5IjogIkFueXRvd24iLCAicmVnaW9uIjogIkFueXN0YXRlIiwgImNvdW50cnkiOiAiVVMifV0\",\r\n            \"WyJBSngtMDk1VlBycFR0TjRRTU9xUk9BIiwgImJpcnRoZGF0ZSIsICIxOTQwLTAxLTAxIl0\",\r\n            \"WyJQYzMzSk0yTGNoY1VfbEhnZ3ZfdWZRIiwgImlzX292ZXJfMTgiLCB0cnVlXQ\",\r\n            \"WyJHMDJOU3JRZmpGWFE3SW8wOXN5YWpBIiwgImlzX292ZXJfMjEiLCB0cnVlXQ\",\r\n            \"WyJsa2x4RjVqTVlsR1RQVW92TU5JdkNBIiwgImlzX292ZXJfNjUiLCB0cnVlXQ\"\r\n        ]\r\n    },\r\n    \"protected\": \"eyJhbGciOiAiRVMyNTYiLCAidHlwIjogImRjK3NkLWp3dCIsICJraWQiOiAiZG9jLXNpZ25lci0wNS0yNS0yMDIyIn0\",\r\n    \"signature\": \"cWT4VMs1G0iqUt-ajx98dCwq0I4djdqC9vX6ELCpjYBNrhRNK6u3wds9cSwB8REuA1RRCE9BprDDyjOVDLgLvg\"\r\n}\r\n```\r\n\r\nAnd this for [Example 4.2](https://www.ietf.org/archive/id/draft-ietf-oauth-sd-jwt-vc-06.html#name-examples)\r\n\r\n```json\r\n{\r\n    \"payload\": \"eyJfc2QiOiBbIjA5dktySk1PbHlUV00wc2pwdV9wZE9CVkJRMk0xeTNLaHBINTE1blhrcFkiLCAiMnJzakdiYUMwa3k4bVQwcEpyUGlvV1RxMF9kYXcxc1g3NnBvVWxnQ3diSSIsICJFa084ZGhXMGRIRUpidlVIbEVfVkNldUM5dVJFTE9pZUxaaGg3WGJVVHRBIiwgIklsRHpJS2VpWmREd3BxcEs2WmZieXBoRnZ6NUZnbldhLXNONndxUVhDaXciLCAiSnpZakg0c3ZsaUgwUjNQeUVNZmVadTZKdDY5dTVxZWhabzdGN0VQWWxTRSIsICJQb3JGYnBLdVZ1Nnh5bUphZ3ZrRnNGWEFiUm9jMkpHbEFVQTJCQTRvN2NJIiwgIlRHZjRvTGJnd2Q1SlFhSHlLVlFaVTlVZEdFMHc1cnREc3JaemZVYW9tTG8iLCAiamRyVEU4WWNiWTRFaWZ1Z2loaUFlX0JQZWt4SlFaSUNlaVVRd1k5UXF4SSIsICJqc3U5eVZ1bHdRUWxoRmxNXzNKbHpNYVNGemdsaFFHMERwZmF5UXdMVUs0Il0sICJpc3MiOiAiaHR0cHM6Ly9leGFtcGxlLmNvbS9pc3N1ZXIiLCAiaWF0IjogMTY4MzAwMDAwMCwgImV4cCI6IDE4ODMwMDAwMDAsICJ2Y3QiOiAiaHR0cHM6Ly9jcmVkZW50aWFscy5leGFtcGxlLmNvbS9pZGVudGl0eV9jcmVkZW50aWFsIiwgIl9zZF9hbGciOiAic2hhLTI1NiIsICJjbmYiOiB7Imp3ayI6IHsia3R5IjogIkVDIiwgImNydiI6ICJQLTI1NiIsICJ4IjogIlRDQUVSMTladnUzT0hGNGo0VzR2ZlNWb0hJUDFJTGlsRGxzN3ZDZUdlbWMiLCAieSI6ICJaeGppV1diWk1RR0hWV0tWUTRoYlNJaXJzVmZ1ZWNDRTZ0NGpUOUYySFpRIn19fQ\",\r\n    \"header\": {\r\n        \"disclosures\": [\r\n            \"WyJsa2x4RjVqTVlsR1RQVW92TU5JdkNBIiwgImlzX292ZXJfNjUiLCB0cnVlXQ\",\r\n            \"WyJRZ19PNjR6cUF4ZTQxMmExMDhpcm9BIiwgImFkZHJlc3MiLCB7InN0cmVldF9hZGRyZXNzIjogIjEyMyBNYWluIFN0IiwgImxvY2FsaXR5IjogIkFueXRvd24iLCAicmVnaW9uIjogIkFueXN0YXRlIiwgImNvdW50cnkiOiAiVVMifV0\"\r\n        ],\r\n        \"kb_jwt\": \"eyJhbGciOiAiRVMyNTYiLCAidHlwIjogImtiK2p3dCJ9.eyJub25jZSI6ICIxMjM0NTY3ODkwIiwgImF1ZCI6ICJodHRwczovL2V4YW1wbGUuY29tL3ZlcmlmaWVyIiwgImlhdCI6IDE3MzE1MzA3MDQsICJzZF9oYXNoIjogImNUNkRmMXRCODNxM3EtQVFjdGYxVXFncXBhaW5BOVFSNmVmS3NQdFBFQ2cifQ.fp4Dgu3k1oU09BHnP7U2aU2v_z96JSi8T1T7f47qUW5ypQsh_39F1S4EOtnT09YNGp9nZbETjor3nCzM0J0MvQ\"\r\n    },\r\n    \"protected\": \"eyJhbGciOiAiRVMyNTYiLCAidHlwIjogImRjK3NkLWp3dCIsICJraWQiOiAiZG9jLXNpZ25lci0wNS0yNS0yMDIyIn0\",\r\n    \"signature\": \"cWT4VMs1G0iqUt-ajx98dCwq0I4djdqC9vX6ELCpjYBNrhRNK6u3wds9cSwB8REuA1RRCE9BprDDyjOVDLgLvg\"\r\n}\r\n```",
          "createdAt": "2024-11-29T16:36:47Z",
          "updatedAt": "2024-11-29T16:36:47Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Yeah @babisRoutis, something along those lines. If we still want to add this. Which I'm not sure about myself. But we'd want to use the tooling to generate the examples consistent with the rest of them. ",
          "createdAt": "2024-12-02T18:32:36Z",
          "updatedAt": "2024-12-02T18:32:36Z"
        },
        {
          "author": "babisRoutis",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Yeah @babisRoutis, something along those lines. If we still want to add this. Which I'm not sure about myself. But we'd want to use the tooling to generate the examples consistent with the rest of them.\r\n\r\nTo be frank I didn't notice that it was an old issuer. Was just cleaning up some of my [tests](https://github.com/eu-digital-identity-wallet/eudi-lib-jvm-sdjwt-kt/blob/main/src/test/kotlin/eu/europa/ec/eudi/sdjwt/vc/SdJwtVcIssuanceTest.kt) that use examples provided by the spec.\r\n\r\nAt some point, I have to figure out which tooling is being used  :smile: \r\n\r\n",
          "createdAt": "2024-12-02T20:32:30Z",
          "updatedAt": "2024-12-02T20:32:30Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "The example generation tooling is [openwallet-foundation-labs/sd-jwt-python](https://github.com/openwallet-foundation-labs/sd-jwt-python) and the same as core SD-JWT. It is described better there https://github.com/oauth-wg/oauth-selective-disclosure-jwt?tab=readme-ov-file#building-the-examples--draft ",
          "createdAt": "2024-12-02T20:43:21Z",
          "updatedAt": "2024-12-02T20:43:21Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "@bc-pi does the tooling support JWS JSON serialization yet?",
          "createdAt": "2025-09-16T14:46:27Z",
          "updatedAt": "2025-09-16T14:46:27Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> [@bc-pi](https://github.com/bc-pi) does the tooling support JWS JSON serialization yet?\n\nYes, @danielfett added that a long time ago. I don't necessarily think an example of that is needed. But the tooling is in place. ",
          "createdAt": "2025-09-16T15:57:00Z",
          "updatedAt": "2025-09-16T15:57:00Z"
        }
      ]
    },
    {
      "number": 223,
      "id": "I_kwDOJbVClc6EU2up",
      "title": "lang vs. locale in type display metadata [was: I18N for Metadata]",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/223",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "danielfett"
      ],
      "labels": [
        "discuss",
        "Ready-for-PR",
        "metadata",
        "PRIO"
      ],
      "body": "Once the type metadata gets merged #220 , we should consider I18N. \r\n\r\n@OR13 Since you raised the point on #220 . would we need to consider I18N only for information that is displayed to end-users or also to information intended for developers, e.g., name/description?",
      "createdAt": "2024-04-02T09:51:21Z",
      "updatedAt": "2025-10-02T11:58:17Z",
      "closedAt": "2025-10-02T11:58:17Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I'd think it should be only for information that is intended for display to end-users.",
          "createdAt": "2024-04-02T17:59:32Z",
          "updatedAt": "2024-04-02T17:59:32Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "This is done via `lang` in https://datatracker.ietf.org/doc/html/draft-ietf-oauth-sd-jwt-vc-10#section-8-1 and https://datatracker.ietf.org/doc/html/draft-ietf-oauth-sd-jwt-vc-10#section-9.2 , no? Although we did have some discussion on `lang` vs. `locale` as is currently used in https://openid.net/specs/openid-4-verifiable-credential-issuance-1_0-16.html#section-11.2.4-2.10.2.2 and etc. ",
          "createdAt": "2025-07-18T22:30:18Z",
          "updatedAt": "2025-07-18T22:30:18Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "`lang` vs. `locale` difference still exits (new [-17 of VCI](https://openid.net/specs/openid-4-verifiable-credential-issuance-1_0-17.html#section-11.2.4-2.10.2.2) and soon to be final and this one still  at -10) but there seems to be no appetite or interest in reconciliation.  And the actual need behind the issue has been resolved for a long time.  ",
          "createdAt": "2025-09-02T18:57:31Z",
          "updatedAt": "2025-09-02T18:57:31Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "@danielfett volunteered to do a PR.",
          "createdAt": "2025-09-23T18:34:23Z",
          "updatedAt": "2025-09-23T18:34:23Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Dr. @danielfett did a PR [#353](https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/353)",
          "createdAt": "2025-09-29T20:02:55Z",
          "updatedAt": "2025-09-29T20:02:55Z"
        }
      ]
    },
    {
      "number": 224,
      "id": "I_kwDOJbVClc6EY7J4",
      "title": "Add type metadata for basic display/rendering information",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/224",
      "state": "CLOSED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "danielfett"
      ],
      "labels": [
        "metadata",
        "wg-05"
      ],
      "body": "> This is qualified with \"for example\" but the type metadata in the PR currently doesn't define this stuff. I'm still unsure about leaving portions of sd-jwt-vc-types like claims and display out of this PR. But should we at least track that in an issue?\r\n\r\n_Originally posted by @bc-pi in https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/220#discussion_r1548311395_\r\n\r\nthe \"stuff\" mentioned was other content/concepts from https://github.com/vcstuff/sd-jwt-vc-types, which PR #220 was based on \r\n            ",
      "createdAt": "2024-04-02T18:07:46Z",
      "updatedAt": "2024-10-10T13:00:27Z",
      "closedAt": "2024-10-10T13:00:27Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "For an MVP (i.e., our next draft release), we should IMO add:\r\n\r\n- [ ] Basic display/rendering information for the credential itself\r\n- [ ] Basic display/rendering information for claims\r\n- [x] JSON schema",
          "createdAt": "2024-04-03T07:18:35Z",
          "updatedAt": "2024-06-05T08:23:42Z"
        },
        {
          "author": "babisRoutis",
          "authorAssociation": "CONTRIBUTOR",
          "body": "A single issue tracking the features to be added (from types),  I think, is not so convenient.\r\n\r\nPerhaps it would be better to use some more specific labels like for instance `meta-display` and /or `meta-claims` for annotate related issues. In this way, issues reported to types repo can be transferred here and new issues can be added freely.\r\n",
          "createdAt": "2024-04-11T15:34:14Z",
          "updatedAt": "2024-04-11T15:34:14Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "> A single issue tracking the features to be added (from types), I think, is not so convenient.\r\n> \r\n> Perhaps it would be better to use some more specific labels like for instance `meta-display` and /or `meta-claims` for annotate related issues. In this way, issues reported to types repo can be transferred here and new issues can be added freely.\r\n\r\nYou can also create new issues if you believe other things are missing for your use case.",
          "createdAt": "2024-04-12T07:58:17Z",
          "updatedAt": "2024-04-12T07:58:17Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "@bc-pi @danielfett I believe we have addressed all items in this issue in the spec. I believe we can close this issue, right?",
          "createdAt": "2024-10-10T12:50:45Z",
          "updatedAt": "2024-10-10T12:50:45Z"
        }
      ]
    },
    {
      "number": 225,
      "id": "I_kwDOJbVClc6EZG6q",
      "title": "Consider recommending a way to encode other data types.",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/225",
      "state": "OPEN",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "discuss"
      ],
      "body": "The spec should define a way to support other data types. Pictures of the credential holders will be a common case, but other data types might occur as well.\r\n\r\nOpenID Connect already defines a claim:\r\n> `picture` \tstring \tURL of the End-User's profile picture. This URL MUST refer to an image file (for example, a PNG, JPEG, or GIF image file), rather than to a Web page containing an image.\r\n\r\nIn that sense, we could just recommend that data types other than the native JSON types should be encoded, for example, as data URIs (that would be compatible to the definition of `picture` above).",
      "createdAt": "2024-04-02T18:35:55Z",
      "updatedAt": "2025-09-16T14:59:22Z",
      "closedAt": null,
      "comments": [
        {
          "author": "babisRoutis",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hi @danielfett \r\n\r\nI find your proposal really useful. \r\n\r\n \"Data URIs\" are those described in [RFC2397](https://datatracker.ietf.org/doc/html/rfc2397) ?\r\n\r\n",
          "createdAt": "2024-04-06T09:39:04Z",
          "updatedAt": "2024-04-06T09:39:04Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm supportive of this approach as well.",
          "createdAt": "2024-10-10T12:52:09Z",
          "updatedAt": "2024-10-10T12:52:09Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "If we do this, we need security considerations since there could go a lot wrong when not sanitized properly before used in web pages or mobile apps:\n- XSS if the data URI has `data:text/html`, or `data:text/javascript`, an attacker could embed an executable script.\n- Phishing / UI Redressing, e.g., if `data:text/html;base64` payload renders a fake login page or misleading UI inside an `<iframe>` or popup.\n- Resource exhaustion / DoS, e.g., very large data URIs (MBs of base64) can crash parsers, browsers, or mobile apps.\n- Bypassing content security policies, e.g., if Content Security Policy does not block `data:` and content could be injected.\n- File handling quirks, e.g., if the data URI encodes an unexpected file type (SVG, PDF, etc.), it could contain embedded scripts or trigger exploits in certain renderers.",
          "createdAt": "2025-09-16T14:58:55Z",
          "updatedAt": "2025-09-16T14:59:09Z"
        }
      ]
    },
    {
      "number": 226,
      "id": "I_kwDOJbVClc6FXArS",
      "title": "SD-JWT-VC Types repository",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/226",
      "state": "CLOSED",
      "author": "babisRoutis",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "There is a companion specification for metadata hosted at [SD-JWT-VC Types](https://github.com/vcstuff/sd-jwt-vc-types)\r\n\r\nI would like to ask if the aforementioned repository is the correct place to raise some questions or comments about the metadata or the metadata specification will be merged here in SD-JWT-VC?",
      "createdAt": "2024-04-11T10:26:46Z",
      "updatedAt": "2024-04-12T07:59:18Z",
      "closedAt": "2024-04-12T07:59:18Z",
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "IMO, it would be best if you could already comment on this https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/220 which tries to establish the common framework. If this gets merged, we will create PRs for individual parameters and features of metadata. ",
          "createdAt": "2024-04-11T12:07:07Z",
          "updatedAt": "2024-04-11T12:07:07Z"
        },
        {
          "author": "babisRoutis",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> IMO, it would be best if you could already comment on this #220 which tries to establish the common framework. If this gets merged, we will create PRs for individual parameters and features of metadata.\r\n\r\nHi @awoie thanks for the reply.\r\n\r\nPerhaps yet another naive question, I hope you bear with me :  \r\n\r\nIs SD-JWT-VC Types to become a specification on its own thus #220 just tries to connect SD-JWT-VC and SD-JWT-VC types or SD-JWT-VC is going to \"absorb\" SD-JWT-VC Types ?\r\n\r\nI am asking this because the #220 keeps just a sort sub-set of the metadata attributes defined in SD-JWT-VC Types.",
          "createdAt": "2024-04-11T14:11:06Z",
          "updatedAt": "2024-04-11T14:11:06Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "> > IMO, it would be best if you could already comment on this #220 which tries to establish the common framework. If this gets merged, we will create PRs for individual parameters and features of metadata.\r\n> \r\n> Hi @awoie thanks for the reply.\r\n> \r\n> Perhaps yet another naive question, I hope you bear with me :\r\n> \r\n> Is SD-JWT-VC Types to become a specification on its own thus #220 just tries to connect SD-JWT-VC and SD-JWT-VC types or SD-JWT-VC is going to \"absorb\" SD-JWT-VC Types ?\r\n> \r\n> I am asking this because the #220 keeps just a sort sub-set of the metadata attributes defined in SD-JWT-VC Types.\r\n\r\nThe idea is SD-JWT VC absorbs SD-JWT VC Types feature-by-feature incrementally to give the community a chance to comment on each feature individually. PR #220 is a first step that will allow us to extend the metadata as needed. We have an issue that keeps track of features that were raised by the community already and we are considering for SD-JWT VC here https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/224. \r\n\r\nIt is best if you provide your feedback on the PR #220 and/or on the issue here https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/224.",
          "createdAt": "2024-04-11T14:20:10Z",
          "updatedAt": "2024-04-11T14:20:10Z"
        },
        {
          "author": "babisRoutis",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks @awoie It is clear now",
          "createdAt": "2024-04-11T14:22:31Z",
          "updatedAt": "2024-04-11T14:22:31Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this issue since the question was answered. @babisRoutis please create new issues if you think something else is missing that is not already covered by other issues.",
          "createdAt": "2024-04-12T07:59:16Z",
          "updatedAt": "2024-04-12T07:59:16Z"
        }
      ]
    },
    {
      "number": 227,
      "id": "I_kwDOJbVClc6H9sWD",
      "title": "Add reference to new status list ietf",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/227",
      "state": "CLOSED",
      "author": "cre8",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Old: https://datatracker.ietf.org/doc/html/draft-looker-oauth-jwt-cwt-status-list-01\r\n\r\nNew: https://datatracker.ietf.org/doc/draft-ietf-oauth-status-list/",
      "createdAt": "2024-05-06T15:04:36Z",
      "updatedAt": "2024-05-07T08:47:31Z",
      "closedAt": "2024-05-07T08:47:31Z",
      "comments": []
    },
    {
      "number": 229,
      "id": "I_kwDOJbVClc6IDqZ1",
      "title": "Schema for type metadata",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/229",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "awoie"
      ],
      "labels": [
        "HAS PR",
        "wg-04",
        "metadata",
        "PRIO"
      ],
      "body": "Define how schemas can be included in type metadata.\r\n\r\nRequirement is that it should allow JSON schema.",
      "createdAt": "2024-05-07T08:48:40Z",
      "updatedAt": "2024-07-08T15:50:10Z",
      "closedAt": "2024-07-08T15:50:10Z",
      "comments": []
    },
    {
      "number": 232,
      "id": "I_kwDOJbVClc6JGgxv",
      "title": "Constraints on using JWT VC Isser metadata and x5c",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/232",
      "state": "CLOSED",
      "author": "paulbastian",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "bc-pi"
      ],
      "labels": [
        "HAS PR",
        "wg-04"
      ],
      "body": "The text currently says:\r\n\r\n> JWT VC Issuer Metadata: If a recipient supports JWT VC Issuer Metadata and if the iss value contains an HTTPS URI, the recipient MUST obtain the public key using JWT VC Issuer Metadata as defined in [Section 5](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-sd-jwt-vc-03#jwt-vc-issuer-metadata).\r\n\r\n> X.509 Certificates: If the recipient supports X.509 Certificates, the recipient MUST obtain the public key from the leaf X.509 certificate defined by the x5c JWT header parameters of the Issuer-signed JWT and validate the X.509 certificate chain in the following cases: [...]\r\n\r\nIt must by the Issuer's choice to support either x5c, jwt-vc metadata or both, this is also how HAIP defines it. Extending this thought, the Verifier has no means of understanding what the issuer supports, given that `iss` may be an HTTPS URI but no support is avaiblable for jwt-vc metadata. This is because `kid` is the best indicator but in Section 5 only described as RECOMMENDED.\r\n\r\nProposal is that the Issuer may chose this and that the presence of `kid` in SD-JWT VC indicates jwt-vc metadata.",
      "createdAt": "2024-05-16T11:48:36Z",
      "updatedAt": "2024-07-08T15:54:36Z",
      "closedAt": "2024-07-08T15:54:36Z",
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "This is from HAIP:\r\n> This profile supports two ways to represent and resolve the key required to validate the issuer signature of an SD-JWT VC, the web PKI-based key resolution and the x.509 certificates.\r\n> Web-based key resolution: The key used to validate the Issuer's signature on the SD-JWT VC MUST be obtained from the SD-JWT VC issuer's metadata as defined in Section 5 of [[I-D.ietf-oauth-sd-jwt-vc](https://openid.github.io/oid4vc-haip-sd-jwt-vc/openid4vc-high-assurance-interoperability-profile-sd-jwt-vc-wg-draft.html#I-D.ietf-oauth-sd-jwt-vc)]. The JOSE header kid MUST be used to identify the respective key.\r\n> x.509 certificates: the SD-JWT VC contains the issuer's certificate along with a trust chain in the x5c JOSE header. In this case, the iss value MUST be an URL with a FQDN matching a dNSName Subject Alternative Name (SAN) [[RFC5280](https://openid.github.io/oid4vc-haip-sd-jwt-vc/openid4vc-high-assurance-interoperability-profile-sd-jwt-vc-wg-draft.html#RFC5280)] entry in the leaf certificate.\r\n> Note: The issuer MAY decide to support both options. In which case, it is at the discretion of the Wallet and the Verifier which key to use for the issuer signature validation.\r\n\r\nBy following the HAIP text, I don't understand how an issuer can support both options in an SD-JWT VC? Can you give an example?\r\n\r\nFurthermore, DNS name is not a URI and strictly speaking is this not allowed as per SD-JWT VC where `iss` has to be a URI. For that reason, SD-JWT VC says that the `iss` value needs to be encoded using the dns URI scheme.\r\n\r\nI'm not saying SD-JWT VC should not be changed in that regards because I do see some potential for improvement and I think as well that an issuer might want to support both and that needs to be addressed. We should discuss ways how this can be achieved.\r\n\r\nBut I don't think `kid` is appropriate for this to control whether a verifier fetches well-known or not. I would assume that a verifier will likely know which issuer (`iss` value) to trust and also know if the issuer is part of some trust framework that supports well-known. If not, the verifier will have to try in the same way as they try other well-knowns. I don't see the need to connect the presence of `kid` with the presence of well-known if this is what you suggested.\r\n\r\nFurthermore, I believe your specific use cases is already supported by:\r\n1. using an HTTPS URI for the `iss` value\r\n2. hosting a well-known for that URI\r\n3. including a x5c header with a URI SAN entry that matches the `iss` value",
          "createdAt": "2024-05-16T12:09:23Z",
          "updatedAt": "2024-05-16T12:24:03Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't think using `kid` to indicate whether well-known is supported is a good solution. I don't think we need this indication for the reasons pointed out above.\r\n\r\n(we can discuss whether `dns` URI scheme is a good solution in general but this is a separate topic and whether we should not limit `iss` to be a URI)",
          "createdAt": "2024-05-16T12:28:42Z",
          "updatedAt": "2024-05-16T12:28:42Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "NONE",
          "body": "@awoie at least for using kid with openid federation is resonable, because that kid is resolved within a federation trust chain",
          "createdAt": "2024-05-16T13:03:00Z",
          "updatedAt": "2024-05-16T13:03:00Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "> @awoie at least for using kid with openid federation is resonable, because that kid is resolved within a federation trust chain\r\n\r\nI think there is nothing wrong with:\r\n1. using an HTTPS URI for the `iss` value\r\n2. hosting a well-known for that URI\r\n3. including a `x5c` header with a URI SAN entry that matches the iss value\r\n4. adding `kid` to the header\r\n\r\nIn that case, using the `kid` to indicate whether well-known is supported or not would not work because like @peppelinux mentioned, apparently OpenID federation uses `kid` as well and I believe in that case, well-known is not required. Please correct me if I'm wrong. \r\n\r\n@peppelinux Can you explain how OpenID federation resolves the `kid`?",
          "createdAt": "2024-05-16T13:08:47Z",
          "updatedAt": "2024-05-16T13:08:47Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "> > @awoie at least for using kid with openid federation is resonable, because that kid is resolved within a federation trust chain\r\n> \r\n> I think there is nothing wrong with:\r\n> \r\n> 1. using an HTTPS URI for the `iss` value\r\n> 2. hosting a well-known for that URI\r\n> 3. including a `x5c` header with a URI SAN entry that matches the iss value\r\n> 4. adding `kid` to the header\r\n\r\nTo be clear, the above is valid.\r\n\r\n> In that case, using the `kid` to indicate whether well-known is supported or not would not work because like @peppelinux mentioned, apparently OpenID federation uses `kid` as well and I believe in that case, well-known is not required. Please correct me if I'm wrong.\r\n\r\nTo be clear, the above just means that using `kid` to control how the verifier has to resolve the key does not work because people using OpenID federation might not host a well-known endpoint but will also need a `kid`.\r\n ",
          "createdAt": "2024-05-16T13:10:25Z",
          "updatedAt": "2024-05-16T13:10:25Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "NONE",
          "body": "@awoie sure, thank you for asking\r\n\r\nimagine the federation trust chain like an object, related to a subject (giuseppe, a trustable entity) linked to a trust anchor (a trusted party over all the others), wwhere in the middle we may have zero, one or more intermediaries between the subject (leaf) and trust anchor.\r\n\r\nthe leaf's metadata can be overloaded by the statements within the chain, along the trust anchor. Therefore the jwks the leafs claims to use, and any other protocol specific metadata, can be dynamically overloaded within the trust chain, by applying the metadata policies.\r\n\r\nonce the policies are applied, the resulting metadata is called final metadata and contains all the jwks related to an entity, for each protocol (since a federation entity configuration may have more than a single metadata creafted for a speicifc role, such as VCI, RP, OP and so on).\r\n\r\nusing the final metadata, the kid is needed in the form of lookup parameter within the JWKs provided within the final metadata\r\n\r\n\r\n\r\n\r\n",
          "createdAt": "2024-05-16T13:31:27Z",
          "updatedAt": "2024-05-16T13:31:27Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "NONE",
          "body": "the resolution of the kid is interesting\r\n\r\nwe may have a discovery, using well known endpoints\r\nwe may have a static trust chain, provided like a x.509 certificate chain\r\n\r\n",
          "createdAt": "2024-05-16T13:33:17Z",
          "updatedAt": "2024-05-16T13:33:17Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "> > > @awoie at least for using kid with openid federation is resonable, because that kid is resolved within a federation trust chain\r\n> > \r\n> > \r\n> > I think there is nothing wrong with:\r\n> > \r\n> > 1. using an HTTPS URI for the `iss` value\r\n> > 2. hosting a well-known for that URI\r\n> > 3. including a `x5c` header with a URI SAN entry that matches the iss value\r\n> > 4. adding `kid` to the header\r\n> \r\n> To be clear, the above is valid.\r\n> \r\n> > In that case, using the `kid` to indicate whether well-known is supported or not would not work because like @peppelinux mentioned, apparently OpenID federation uses `kid` as well and I believe in that case, well-known is not required. Please correct me if I'm wrong.\r\n> \r\n> To be clear, the above just means that using `kid` to control how the verifier has to resolve the key does not work because people using OpenID federation might not host a well-known endpoint but will also need a `kid`.\r\n\r\n@paulbastian To be even more clear, they might not host a SD-JWT VC Issuer Metadata well-known endpoint but they might host an OpenID Federation well-known endpoint.\r\n\r\n",
          "createdAt": "2024-05-16T13:35:04Z",
          "updatedAt": "2024-05-16T13:35:04Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "> @awoie sure, thank you for asking\r\n> \r\n> imagine the federation trust chain like an object, related to a subject (giuseppe, a trustable entity) linked to a trust anchor (a trusted party over all the others), wwhere in the middle we may have zero, one or more intermediaries between the subject (leaf) and trust anchor.\r\n> \r\n> the leaf's metadata can be overloaded by the statements within the chain, along the trust anchor. Therefore the jwks the leafs claims to use, and any other protocol specific metadata, can be dynamically overloaded within the trust chain, by applying the metadata policies.\r\n> \r\n> once the policies are applied, the resulting metadata is called final metadata and contains all the jwks related to an entity, for each protocol (since a federation entity configuration may have more than a single metadata creafted for a speicifc role, such as VCI, RP, OP and so on).\r\n> \r\n> using the final metadata, the kid is needed in the form of lookup parameter within the JWKs provided within the final metadata\r\n\r\nThank you for this elaboration! It means that in this case, you won't need SD-JWT VC Issuer Metadata well-known, right?",
          "createdAt": "2024-05-16T13:37:02Z",
          "updatedAt": "2024-05-16T13:37:02Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "NONE",
          "body": "> Thank you for this elaboration! It means that in this case, you won't need SD-JWT VC Issuer Metadata well-known, right?\r\n\r\nusing federation the metadata must be signed and evaluated within the trust chain, therefore, yes, there are no direct dependencies with the SD-JWT VC Issuer Metadata well-known endpoint, even if these two can cohexist within the same entity.\r\n",
          "createdAt": "2024-05-16T14:07:18Z",
          "updatedAt": "2024-05-16T14:07:18Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm supportive of changing `iss` value requirements for the following reasons:\r\n- using `dns://` could be a bit misleading\r\n- using `https://example.com` to match against the SAN DNS value is error prone (some devs might forget to do `FQDN(iss) == SAN DNS value` and instead do `iss == SAN DNS value`) and\r\n- perhaps misleading if `https://example.com` does not exist (although the domain exists). Perhaps an edge case but it might have security implications.",
          "createdAt": "2024-05-24T13:26:34Z",
          "updatedAt": "2024-05-24T13:26:34Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "> I'm supportive of changing iss value requirements\r\n\r\nto chage the `iss` requirement to be not a URI but a string for cases when `iss` is a DNS SAN value?\r\n\r\nthe point of `https://<DNS SAN>` in HAIP was that the issuer can use the same `iss` value in sd-jwt vc to support various key resolution mechanisms - web-based key resolution (.well-known/jwt_vc_issuer with or without openid federation) or x509. so I am supportive of keeping `iss` a URI in sd-jwt vc, but change the scheme to `https:` as opposed to `dns:` regarding your points 2 and 3, for example, in HAIP, the idea was for the issuer to support both key resolution mechanisms, so the chance of devs forgetting doing `https://<dns name>` is low, and the verifier supporting x509, would have to extract dns name from `https://<dns name>` as part of validations steps, so I see your points, but still think the the benefits of the same `iss` with different key resolution mechanisms is strong.",
          "createdAt": "2024-05-24T15:18:23Z",
          "updatedAt": "2024-05-24T15:22:04Z"
        },
        {
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "body": "I support this, see my reasoning here:\nhttps://github.com/openid/oid4vc-haip-sd-jwt-vc/issues/103#issuecomment-2129485355",
          "createdAt": "2024-05-24T20:02:34Z",
          "updatedAt": "2024-05-24T20:02:34Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "@awoie and I chatted briefly and are leaning towards keeping the requirement on iss to be a URI while using an https scheme for both key resolution mechanisms. ",
          "createdAt": "2024-05-28T20:51:04Z",
          "updatedAt": "2024-05-28T20:51:04Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> @awoie and I chatted briefly and are leaning towards keeping the requirement on iss to be a URI while using an https scheme for both key resolution mechanisms.\r\n\r\n@Sakurann said she *might* have some suggested text or a PR along those lines ",
          "createdAt": "2024-06-04T15:54:21Z",
          "updatedAt": "2024-06-04T15:54:21Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> > @awoie and I chatted briefly and are leaning towards keeping the requirement on iss to be a URI while using an https scheme for both key resolution mechanisms.\r\n> \r\n> @Sakurann said she _might_ have some suggested text or a PR along those lines\r\n\r\n@Sakurann, I'm going to work on this tomorrow (hopefully) so if you have anything that might help in that effort, please comment or post it or whatever works. ",
          "createdAt": "2024-06-30T12:46:35Z",
          "updatedAt": "2024-06-30T12:46:35Z"
        }
      ]
    },
    {
      "number": 233,
      "id": "I_kwDOJbVClc6JPFG_",
      "title": "Fix resolving type metadata from URL and limit to HTTPS URLs",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/233",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "danielfett"
      ],
      "labels": [],
      "body": "Current text:\r\n> In an SD-JWT VC, a URI in the `vct` claim can be used to express a type. If the type is a URL, metadata can be retrieved from the URL https://<authority>/.well-known/vct/<type>, i.e., by inserting /.well-known/vct after the authority part of the URL.\r\n\r\nSince well-known only applies to HTTPS URLs, we should limit the section to HTTPS URLs although other URLs would be still possible, e.g., `ipfs://...`.\r\n\r\nAdditionally, also the `<type>` in `https://<authority>/.well-known/vct/<type>` is probably not correct since the type refers to the `vct` value itself which would not make sense to the full `vct` value here which would also include the scheme for instance.\r\n\r\nI suggest we update the title to \"From an HTTPS URL in the `vct` claim\" and update the language to something like this:\r\n> If the `vct` value is an HTTPS URL, Type Metadata can be retrieved from the URL constructed by inserting `\"/.well-known/vct\"` after the authority part of the URL in the `vct` value. For example, a `vct` value of `\"https://example.com/foo/bar/mytype\"` would result in `\"https://example.com/.well-known/vct/foo/bar/mytype\"`.\r\n",
      "createdAt": "2024-05-17T11:00:57Z",
      "updatedAt": "2024-12-02T17:05:29Z",
      "closedAt": "2024-12-02T17:05:29Z",
      "comments": []
    },
    {
      "number": 234,
      "id": "I_kwDOJbVClc6LG_kJ",
      "title": "Label example in Section 6.1",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/234",
      "state": "CLOSED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "HAS PR",
        "editorial"
      ],
      "body": "The first example in Section 6.1 shows a credential, not a type metadata document, but is not labelled as such.\r\n\r\nThe example in question:\r\n```\r\n{\r\n  \"vct\": \"https://betelgeuse.example.com/education_credential\",\r\n  \"vct#integrity\": \"sha256-WRL5ca_xGgX3c1VLmXfh-9cLlJNXN-TsMk-PmKjZ5t0\",\r\n  ...\r\n}\r\n```\r\n",
      "createdAt": "2024-06-04T15:50:16Z",
      "updatedAt": "2024-07-01T19:32:59Z",
      "closedAt": "2024-07-01T19:32:58Z",
      "comments": []
    },
    {
      "number": 237,
      "id": "I_kwDOJbVClc6OGc-H",
      "title": "Distinguish between issuance and presentation schemas",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/237",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "discuss",
        "schema"
      ],
      "body": "Since a holder is interested in receiving a valid credential, and a verifier a valid presentation of a credential, perhaps the cardinality of both schemas might be slightly different. \r\n\r\nShould we consider introducing a dedicated schema for presentation to reflect changes in cardinality?",
      "createdAt": "2024-07-01T14:49:31Z",
      "updatedAt": "2025-09-23T19:23:41Z",
      "closedAt": "2025-09-23T19:23:41Z",
      "comments": [
        {
          "author": "babisRoutis",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Currently, type metadata provide a single JSON Schema (or a list, taking into account extend associations).\nTo my understanding, this means that this JSON Schema has to be applicable to both the holder and to the verifier side.\n\nAs a consequence, this single JSON Schema must take into account the absence of not disclosed attributes. That is, this schema is for the verifier but it can also be used by the holder (to partially validate the issued credential).\n\nYet the above is my understanding, or my interpretation. Others may have different interpretations, mainly that JSON Schema is primarily to be used from the holder and that this single schema should not take into account the absence of disclosable attributes simply because for an issued SD-JWT we have all disclosures.\n\nThus in case of keeping a single JSON Schema (current status), spec should clarify whether cardinality of attributes is related to the sd property or not.\n\n\nFor what is worth, I believe that it would be challenging to keep consistent two separate JSON Schemas.\n",
          "createdAt": "2025-07-04T15:10:12Z",
          "updatedAt": "2025-07-04T15:10:12Z"
        }
      ]
    },
    {
      "number": 238,
      "id": "I_kwDOJbVClc6OG6d9",
      "title": "Is it required to validate the whole chain of schemas?",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/238",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "schema"
      ],
      "body": "If the leaf JSON Schema document includes the full schema, it might be easier to just validate against the leaf and not against all schemas in the chain? ",
      "createdAt": "2024-07-01T15:46:14Z",
      "updatedAt": "2025-09-23T19:23:41Z",
      "closedAt": "2025-09-23T19:23:41Z",
      "comments": [
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "Schema validator always validates the full schema. \r\nBut note that SD-JWT renders the JSON schema validation useless as it breaks the (original) structure.",
          "createdAt": "2024-12-09T21:18:30Z",
          "updatedAt": "2024-12-09T21:18:30Z"
        }
      ]
    },
    {
      "number": 240,
      "id": "I_kwDOJbVClc6O0GWM",
      "title": "Add language on x5c protection",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/240",
      "state": "OPEN",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "discuss"
      ],
      "body": "To mitigate attacks described in the X.509 IETF RFC [here](https://www.rfc-editor.org/rfc/rfc2634#section-5.1), we should add something like the following language:\r\n\r\nIf `x5c` is the in unprotected header or was received out-of-band, the verifier MUST check the `x5t` **protected** header.\r\n\r\nNote that COSE has this language built in, but JOSE leaves that open.\r\n",
      "createdAt": "2024-07-08T16:04:08Z",
      "updatedAt": "2024-11-26T19:26:30Z",
      "closedAt": null,
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Noting that the current text requires using x5c and says nothing about protected vs. unprotected \r\n\r\nhttps://www.ietf.org/archive/id/draft-ietf-oauth-sd-jwt-vc-04.html#name-issuer-signed-jwt-verificat",
          "createdAt": "2024-07-08T16:21:01Z",
          "updatedAt": "2024-07-08T16:21:01Z"
        }
      ]
    },
    {
      "number": 241,
      "id": "I_kwDOJbVClc6PX2yc",
      "title": "Claim 'vct' is missing in Type Metadata Format",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/241",
      "state": "CLOSED",
      "author": "jtalir",
      "authorAssociation": "NONE",
      "assignees": [
        "danielfett"
      ],
      "labels": [
        "HAS PR"
      ],
      "body": "I'm not sure why 'vct' is not (as REQUIRED) in 6.2 Type Metadata Format. Is it bug or is this some sort of implicit? It is in the  6.1. Type Metadata Example and also it is twice referenced in 6.3.5 From Type Metadata Glue Documents: \"the Consumer MUST ensure that the vct claim in the credential matches the one in the Type Metadata document\" and \"the Consumer MUST ensure that the value of the extends property in the Type Metadata document matches that of the vct in the Type Metadata document\"\r\n",
      "createdAt": "2024-07-12T11:49:07Z",
      "updatedAt": "2025-10-02T17:08:34Z",
      "closedAt": "2025-10-02T17:08:34Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "This does seem like an oversight but I'll defer to @danielfett to ask if there was a reason behind the omission or if vct needs to be added to that section https://www.ietf.org/archive/id/draft-ietf-oauth-sd-jwt-vc-04.html#name-type-metadata-format ",
          "createdAt": "2024-07-30T23:42:02Z",
          "updatedAt": "2024-07-30T23:42:02Z"
        },
        {
          "author": "babisRoutis",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I believe that `vct` & `vct#integrity` have to been added to the section mentioned by @bc-pi ,\r\n\r\nCurrently, examples  do include those two, and to me  are not aligned with the section. ",
          "createdAt": "2024-11-27T16:30:44Z",
          "updatedAt": "2024-11-27T16:30:44Z"
        },
        {
          "author": "jtalir",
          "authorAssociation": "NONE",
          "body": "> I believe that `vct` & `vct#integrity` have to been added to the section mentioned by @bc-pi ,\r\n> \r\n> Currently, examples do include those two, and to me are not aligned with the section.\r\n\r\nI don't think so. Claim vct#integrity belongs into sd-jwt vc, not into type metadata. In the example section #type-metadata-example, there is first example with sd-jwt vc and only second example is with type metadata. In type metadata `vct` serves as \"backward reference\" and not as a link to be resolved.",
          "createdAt": "2024-12-02T17:15:50Z",
          "updatedAt": "2024-12-02T17:15:50Z"
        },
        {
          "author": "babisRoutis",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Dear @jtalir \r\n\r\nOn second thought, I agree with this. \r\nMainly I was missing `vct` from Type metadata. \r\n ",
          "createdAt": "2024-12-03T10:38:17Z",
          "updatedAt": "2024-12-03T10:38:17Z"
        }
      ]
    },
    {
      "number": 242,
      "id": "I_kwDOJbVClc6PX6oC",
      "title": "Add 'vct' in well-known registry",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/242",
      "state": "CLOSED",
      "author": "jtalir",
      "authorAssociation": "NONE",
      "assignees": [
        "danielfett"
      ],
      "labels": [],
      "body": "Type Metadata introduced new well-known URI /.well-known/vct/ in \"6.3.1. From a URL in the vct\" , but this is not reflected in appendix-A.3 Well-Known URI Registry.\r\n\r\nAdditionally, using <type> in sentence \"Metadata can be retrieved from the URL https://<authority>/.well-known/vct/<type>, i.e., by inserting /.well-known/vct after the authority part of the URL.\" seems to me a little bit confusing as type is considered to refer to whole URI. Maybe use <path> or <uri_suffix>(to include also query and fragment URI components)?",
      "createdAt": "2024-07-12T11:59:16Z",
      "updatedAt": "2024-12-02T17:05:30Z",
      "closedAt": "2024-12-02T17:05:30Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Thank you and yes, the registration request is missing and needs to be added. And that sentence could also be improved. ",
          "createdAt": "2024-07-30T23:36:17Z",
          "updatedAt": "2024-07-30T23:36:17Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Although the use of .well-known for type metadata is being reconsidered #264",
          "createdAt": "2024-10-31T18:51:36Z",
          "updatedAt": "2024-10-31T18:51:36Z"
        }
      ]
    },
    {
      "number": 243,
      "id": "I_kwDOJbVClc6PoGFM",
      "title": "use SD-JWT+KB in place of SD-JWT with a Key Binding JWT",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/243",
      "state": "CLOSED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "awoie"
      ],
      "labels": [],
      "body": "As of [SD-JWT -09](https://datatracker.ietf.org/doc/draft-ietf-oauth-selective-disclosure-jwt/09/) which \"[Distinguished SD-JWT from SD-JWT+KB](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-09.html#name-document-history)\" the phrase \"SD-JWT with a Key Binding JWT\" may/should be replaced with \"SD-JWT+KB\" ",
      "createdAt": "2024-07-15T21:13:05Z",
      "updatedAt": "2024-12-17T21:01:03Z",
      "closedAt": "2024-12-17T21:01:03Z",
      "comments": [
        {
          "author": "selfissued",
          "authorAssociation": "NONE",
          "body": "I disagree with this, as this textual substitution would make the meaning of the specification less clear.  \"SD-JWT with a Key Binding JWT\" is an accurate, self-evident description, whereas \"SD-JWT+KB\" is opaque (at best).  It's not like having an optional key binding be present makes the SD-JWT any less of an SD-JWT, just like having a \"cnf\" claim present doesn't make a JWT any less a JWT.  In both cases, they are simply utilizing an optional feature, and should continue to be described that way.",
          "createdAt": "2024-07-15T22:07:52Z",
          "updatedAt": "2024-07-15T22:07:52Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "This issue was mostly a note/todo to reconcile terminology usage here with the contributions @bifurcation made to the underlying core SD-JWT document, which were iterated on for over six months before being incorporated https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/394 \r\n\r\nBut I honestly don't care enough about this one to push either way and would happily close, if the other editors are okay with it. ",
          "createdAt": "2024-08-14T19:32:33Z",
          "updatedAt": "2024-08-14T19:32:33Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "At a minimum we should use the term \"SD-JWT+KB\" somewhere so that it is clear what we're talking about.",
          "createdAt": "2024-10-01T18:28:59Z",
          "updatedAt": "2024-10-01T18:28:59Z"
        }
      ]
    },
    {
      "number": 245,
      "id": "I_kwDOJbVClc6QZHWN",
      "title": "Ambiguity what should happen when no `kid` parameter is present in header when DID is used as `iss` value",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/245",
      "state": "CLOSED",
      "author": "TimoGlastra",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The spec mentions that a `kid` is optional when the `iss` value is a DID. The same seems to be true when using JWT Issuer Metadata (although there it mentions it is RECOMMENDED at least). It doesn't describe however what should happen if no KID is present.\r\n\r\nThis has caused some interop issues with implementations not including a `kid` field when a DID is used when e.g. `did:key` or `did:jwk` is used as you can infer which key is meant. However this means you have to make exceptions for specific did methods instead of following a general pattern.\r\n\r\nIs there a specific reason to make the `kid` optional if the `iss` value is a DID (and also similarly when JWT Issuer Metadata is used)? If a DID is used, it MUST be signed with a key in the did document right? And it also mentions that \"If a recipient cannot validate that the public verification key corresponds to the iss value of the Issuer-signed JWT, the SD-JWT VC MUST be rejected.\"\r\n\r\nSo I don't see a very good reason here to make the usage of `kid` optional, as it results in ambiguity. If there is a good reason to make it optional, would it be possible to also add the RECOMMENDED to using a `kid` when `iss` is a DID, that way we can at least promote other implementation to always include a `kid` when using a DID.",
      "createdAt": "2024-07-22T10:19:55Z",
      "updatedAt": "2024-11-13T13:12:23Z",
      "closedAt": "2024-11-13T13:12:23Z",
      "comments": [
        {
          "author": "peacekeeper",
          "authorAssociation": "NONE",
          "body": "I agree that there should not be any DID method specific exceptions. Even though we know that `did:key` and `did:jwk` basically encode a single public key, there should not be any logic in this specification which assumes this for all DIDs. DIDs resolve to DID documents that can potentially contain several public keys, therefore it is necessary to identify the specific public key using a DID URL, not just a DID.",
          "createdAt": "2024-07-23T20:45:25Z",
          "updatedAt": "2024-07-23T20:45:25Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "The resolution described in #250 would address this.",
          "createdAt": "2024-07-27T14:51:18Z",
          "updatedAt": "2024-07-27T14:51:18Z"
        },
        {
          "author": "decentralgabe",
          "authorAssociation": "NONE",
          "body": "In implementations of DIDs I have worked on, with JWTs, we have required that `kid` is always a _fully-qualified key identifier_ such as `did:example:abcd#key-1`, where the `iss` would be `did:example:abcd`.\r\n\r\nHandling all the variations of using fragments (`#key-1`, `key-1`, etc.) make things complex, so clearly requiring fully qualified key identifiers from DID Document Verification Methods is a simple choice.",
          "createdAt": "2024-07-29T17:46:46Z",
          "updatedAt": "2024-07-29T17:46:46Z"
        },
        {
          "author": "babisRoutis",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I also believe that `kid` should be:\r\n\r\n- mandatory and perhaps most importantly\r\n- a fully-qualified DID URL (as per @decentralgabe  comment)\r\n\r\nIn addition, a check should be required to ensure that `kid` is a DID URL (sub-resource) of the DID in the `iss` claim.",
          "createdAt": "2024-08-22T08:58:55Z",
          "updatedAt": "2024-08-22T08:58:55Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> The resolution described in #250 would address this.\r\n\r\nThis issue then has been overcome by events. \r\n\r\nI encourage interested parties and proponents of DID usage in this context -- which, despite any potential misunderstanding, remains permissible -- to work on specifying it in a manner and forum befitting its importance. \r\n\r\nIn #250 @kimdhamilton pointed to a recent initiative that might be relevant for those interested in contributing to DID method standardization: https://identity.foundation/publications/LOI-DIDMethodStandardization.pdf",
          "createdAt": "2024-11-13T13:12:17Z",
          "updatedAt": "2024-11-13T13:12:17Z"
        }
      ]
    },
    {
      "number": 246,
      "id": "I_kwDOJbVClc6Qb0Um",
      "title": "clarify example(s)  ",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/246",
      "state": "CLOSED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Select parts of a conversation from an encrypted messaging service copied here. Editorial liberties have been taken to extract the most relevant parts of the discussion and protect the identities of the participants. \r\n\r\n> ... why does the example in https://datatracker.ietf.org/doc/html/draft-ietf-oauth-sd-jwt-vc#section-3.3 not include an \"iss\" claim?  \\[ note specifically https://www.ietf.org/archive/id/draft-ietf-oauth-sd-jwt-vc-04.html#section-3.3-2 ]\r\n\r\n> ...\r\n\r\n> the idea, as I understand it from the guy that wrote the tool and most of the \\[\"...\"] around it, is that first JSON in sec 3.3 https://www.ietf.org/archive/id/draft-ietf-oauth-sd-jwt-vc-04.html#section-3.3-2 is just showing stuff about the user and the \"meta\" claims like iss, exp, and iat show up in the next part of the example https://www.ietf.org/archive/id/draft-ietf-oauth-sd-jwt-vc-04.html#section-3.3-4\r\n\r\n> ...\r\n\r\n> I would find it useful to have an example showing the payload of the credential in clear text (not the salted hashes) + all the metadata required to do validity checks and trust checks. Basically how the data would look like before it gets chopped into pieces or after they have been reverted. A credential without iss value does not make sense to me.\r\n\r\n> ...\r\n\r\n> ... useful if we could give this thing a name: https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/443\r\n\r\n> ...\r\n\r\n> it is intentional that that part does not include iss, iat, exp, etc\r\n> maybe we can clarify the intro text more, but basically the idea has been to make a distinction between the user claims and all the metadata around it.\r\n>- the first example is just user claims that are being secured\r\n>- the second example is user claims + metadata that is necessary to be added when signing the sd-jwt\r\n\r\nIMHO it would be worthwhile to expand the example in https://www.ietf.org/archive/id/draft-ietf-oauth-sd-jwt-vc-04.html#vc-sd-jwt-example with some additions to https://www.ietf.org/archive/id/draft-ietf-oauth-sd-jwt-vc-04.html#name-examples to also show the content of the thing that needs a name.\r\n",
      "createdAt": "2024-07-22T15:52:27Z",
      "updatedAt": "2024-09-12T21:04:36Z",
      "closedAt": "2024-09-12T21:04:36Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Seems related to #194",
          "createdAt": "2024-08-06T18:19:12Z",
          "updatedAt": "2024-08-06T18:19:12Z"
        }
      ]
    },
    {
      "number": 247,
      "id": "I_kwDOJbVClc6Qdy1b",
      "title": "Potential Privacy implications of verifier knowing display information",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/247",
      "state": "OPEN",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "pending close",
        "blocked"
      ],
      "body": "Per John Bradley comment during IETF 120",
      "createdAt": "2024-07-22T20:37:32Z",
      "updatedAt": "2025-10-06T21:07:37Z",
      "closedAt": null,
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Per the meeting minutes:\r\n\r\n> John B: Metadata is interesting - nothing in metadata is disclosed to\r\n> verifier?\r\n> Brian: intended for holder, but could be used by verifier - not secret\r\n> and is retrievable\r\n> John B: Might leak what claims are availabile - might be some reasons\r\n> not to disclose to the verifier\r\n> John B: Should disucss policies for wallets, etc? e.g. Some gov may only\r\n> want to permit disclosure or presentation to approved parties - if we\r\n> want interop we should consider issuer to wallet policies - could\r\n> metadata help with this?\r\n> Question - is metadata a way of annotating policy type info?\r\n> Brian: metadata could be, but debate around this and it is yet to be\r\n> determined\r\n> John B: we should figure this out\r\n> Brian: agree\r\n> John B: we should have an answer around privacy and consider it\r\n> especially in regards to metadata",
          "createdAt": "2024-09-24T18:28:07Z",
          "updatedAt": "2024-09-24T18:28:07Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "This needs to be reviewed again after it became clear what the scope of the first version will be.",
          "createdAt": "2024-11-26T19:24:39Z",
          "updatedAt": "2024-11-26T19:24:39Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "IMO\r\n- metadata should be shared with the verifier as some elements, as schema/contexts/... are required for verification purposes\r\n- display information will typically reveal the credential type and with it structure/schemas/...\r\nSo it's more of a question: what and how should/can be disclosed when SD is used. It mainly comes from the business requirements.\r\n\r\nIn use cases, when structure should not be revealed when selectively disclosing claims, both data model and display information must be designed accordingly. Cases when structure should be revealed/hidden should be treated independently.\r\n\r\nDisclosure/presentation policy info should be in the credential (example: work credential might contain disclosure policies depending on the position -- same VC metadata is used for all work credentials, but different positions may have -> different disclosure policies).",
          "createdAt": "2024-12-05T23:09:04Z",
          "updatedAt": "2024-12-05T23:09:04Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Over a year later, if @ve7jtb has some actionable suggestion for this, let's consider it. Otherwise, will close this in some reasonable time frame. ",
          "createdAt": "2025-09-02T19:23:35Z",
          "updatedAt": "2025-09-02T19:23:35Z"
        },
        {
          "author": "cre8",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It depends on the result of #342 :\nif the vct includes a schema that is used to validation during presentation, vct has to be disclosed.\n\nIn the EUDI ecosystem the policy for disclosure (to whom can the credential be shared), have to passed in the oid4vci issuer metadata.",
          "createdAt": "2025-09-09T21:15:22Z",
          "updatedAt": "2025-09-09T21:15:22Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Sorry @cre8 but I don't understand. ",
          "createdAt": "2025-09-09T21:17:59Z",
          "updatedAt": "2025-09-09T21:17:59Z"
        },
        {
          "author": "cre8",
          "authorAssociation": "CONTRIBUTOR",
          "body": "In the issue or some other we talked about if the schema should be either used by the holder to verify the schema of the issued credential or by the verifier to verify the presentation. In the last case, the schema has to be disclosed to the verifier. \n\nWhen using OID4VP with DCQL, the credential is requested anyway by the vct value. Therefore the URI should be known to the verifier in advance with all it's values. And since metadata value is not unique for each person, we are not sharing any personal critical data.",
          "createdAt": "2025-09-09T21:28:19Z",
          "updatedAt": "2025-09-09T21:28:19Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "The result of #342 is that JSON schema is no longer part of type metadata but I think the sentiment behind @cre8's https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/247#issuecomment-3272330455 \"since metadata value is not unique for each person, we are not sharing any personal critical data\" remains. I will not claim perfect privacy but don't see this as overtly problematic. So I'm back to this https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/247#issuecomment-3246523715 from a month ago - if @ve7jtb or anyone has some actionable suggestion for this, let's consider it. Otherwise, I plan to close this in some reasonable time frame.",
          "createdAt": "2025-10-06T21:06:47Z",
          "updatedAt": "2025-10-06T21:07:37Z"
        }
      ]
    },
    {
      "number": 248,
      "id": "I_kwDOJbVClc6QkO4N",
      "title": "Provide information where a credential can be obtained",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/248",
      "state": "OPEN",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "pending close"
      ],
      "body": "We should consider adding type metadata that can help a wallet to guide a user to a place where they can have a credential of a specific type issued.",
      "createdAt": "2024-07-23T14:51:01Z",
      "updatedAt": "2025-09-16T15:14:12Z",
      "closedAt": null,
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Would this type metadata be different if the same `vct` was used by multiple different issuers? It might be hard to make this work across issuers since the type metadata is static, right?",
          "createdAt": "2024-07-23T17:12:28Z",
          "updatedAt": "2024-07-23T17:12:28Z"
        },
        {
          "author": "wbl",
          "authorAssociation": "NONE",
          "body": "Maybe I'm dense, but I don't get why that goes in this document",
          "createdAt": "2024-12-13T06:07:42Z",
          "updatedAt": "2024-12-13T06:07:42Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> I don't get why that goes in this document\n\nI tend to agree that this kind of \"where a credential can be obtained\" thing doesn't really belong in this document",
          "createdAt": "2025-06-10T18:27:51Z",
          "updatedAt": "2025-06-10T18:27:51Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree as well that this it out of scope of this document. I suggest to mark this as pending close unless @danielfett makes a strong case why this belongs in this specification.",
          "createdAt": "2025-09-16T15:14:02Z",
          "updatedAt": "2025-09-16T15:14:02Z"
        }
      ]
    },
    {
      "number": 249,
      "id": "I_kwDOJbVClc6Q2tO8",
      "title": "Suggestion: Should this spec be more open to multiple Credential formats? [W3C Verifiable Credentials 2.0]",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/249",
      "state": "CLOSED",
      "author": "goncalo-frade-iohk",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "pending close"
      ],
      "body": "Hi there. Hope everyone is ok. I would like to know your opinion on this subject.\r\n\r\nAfter I read the spec I got the feeling that this spec could be more open to other credential types like W3C Verifiable Credentials 2.0.\r\n\r\nAn Appendix already exists for W3C Verifiable credentials 2.0 in the [SD-JWT spec](https://datatracker.ietf.org/doc/draft-ietf-oauth-selective-disclosure-jwt/).\r\n\r\nThe important missing part is about the revocation payload that should always be in plain format.\r\nThe problem is in W3C VC 2.0 spec this is called `credentialStatus` not `status` like in this spec and the status-list is of a different type.\r\n\r\nI was wondering if this Spec could be more broad so it can support other credentials formats and their revocation mechanisms? Maybe more examples with other credential formats and not describe a single mechanism like `I-D.ietf-oauth-status-list` and leave this to the credential specification itself.",
      "createdAt": "2024-07-25T15:09:50Z",
      "updatedAt": "2024-09-24T18:19:28Z",
      "closedAt": "2024-09-24T18:19:28Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "It sounds like [Securing Verifiable Credentials using JOSE and COSE](https://www.w3.org/TR/vc-jose-cose/) is more along the lines of what you're looking for. ",
          "createdAt": "2024-07-30T23:00:59Z",
          "updatedAt": "2024-07-30T23:00:59Z"
        },
        {
          "author": "goncalo-frade-iohk",
          "authorAssociation": "NONE",
          "body": "Hi @bc-pi. First thanks for pointing me to that spec, I had not find it before.",
          "createdAt": "2024-07-31T11:04:19Z",
          "updatedAt": "2024-07-31T11:04:19Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Two months since pending close, no further activity, closing this issue.",
          "createdAt": "2024-09-24T18:19:28Z",
          "updatedAt": "2024-09-24T18:19:28Z"
        }
      ]
    },
    {
      "number": 250,
      "id": "I_kwDOJbVClc6Q_dWH",
      "title": "Drop all references to DIDs and DID resolution",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/250",
      "state": "CLOSED",
      "author": "leifj",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "discuss"
      ],
      "body": "Section 3.5 references DIDs and DID resolution but does so in a very underspecified way. The document already supports extensibility so there is no reason why specific ecosystem processing rules need to be in this document at all. The DID community should write a profile doc that describes DID related processing rules in detail. ",
      "createdAt": "2024-07-26T16:16:43Z",
      "updatedAt": "2025-02-23T20:54:47Z",
      "closedAt": "2024-11-13T12:36:20Z",
      "comments": [
        {
          "author": "selfissued",
          "authorAssociation": "NONE",
          "body": "DIDs are non-interoperable, since there are no mandatory-to-implement DID methods.  It's easy for the spec to say \"the recipient MUST retrieve the public key from the DID Document resolved from the DID in the iss value\" but that doesn't make it practically implementable.\r\n\r\nTherefore, I agree with dropping DIDs from the spec.  As the spec says, \"Separate specifications or ecosystem regulations MAY define rules complementing the rules defined above\".  Let DIDs be handled in that manner.",
          "createdAt": "2024-07-26T18:10:41Z",
          "updatedAt": "2024-07-26T18:10:41Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "[Speaking as an individual] I am in 100% agreement with @leifj and @selfissued and favor (or favour here in Canada) of completely removing all the DID content from this draft. For reasons already mentioned. And others.",
          "createdAt": "2024-07-26T21:31:18Z",
          "updatedAt": "2024-08-10T03:04:15Z"
        },
        {
          "author": "peacekeeper",
          "authorAssociation": "NONE",
          "body": "-1, this is a bad idea for various reasons:\r\n\r\n- DIDs provide an extensibility mechanism that makes it much easier to plug in different public key distribution and discovery mechanisms through DID methods. If you want to use a different discovery mechanism than HTTP, you can simply use a DID method for your favorite (decentralized) public key infrastructure. Several DID methods are already specified, implemented, and used in production.\r\n- The argument \"DIDs are non-interoperable, since there are no mandatory-to-implement DID methods\" has been discussed many times (e.g. [here](https://www.w3.org/2019/did-wg/faqs/2021-formal-objections/)), so it makes no sense to repeat that here. Due to the design mentioned above, DIDs actually enable interoperability.\r\n- DIDs are used in various large EU projects that also have an interest in SD-JWT VC, e.g. EBSI, Gaia-X, etc. Removing DIDs would create unnecessary interoperability issues for these projects.\r\n- A [proposal](https://github.com/eu-digital-identity-wallet/eudi-doc-architecture-and-reference-framework/issues/278) to include DIDs in the EUDI Wallet's ARF has received more thumbs-ups than any other issue in that repository.\r\n- DIDs are used in various ways in connection with OID4VC and OAuth2, which have a close relationship with this specification here.\r\n- Many implementations and applications of the [Verifiable Credentials Data Model (VCDMs)](https://www.w3.org/TR/vc-data-model-2.0/) use DIDs. The fact that this specification here has adopted and overloaded the term \"VC\" is already causing a lot of [confusion](https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/249) and [technical ambiguity](https://github.com/w3c/vc-jose-cose/pull/283). Removing DIDs from this specification would only lead to further unnecessary divergence.\r\n- The [W3C DID Working Group](https://www.w3.org/2024/04/did-wg-charter.html) is currently standardizing DID Resolution, and efforts to standardize specific DID methods are also underway.\r\n- The [SD-JWT VCDM proposal](https://github.com/danielfett/sd-jwt-vc-dm), which apparently [is already being standardized](https://github.com/eu-digital-identity-wallet/eudi-doc-architecture-and-reference-framework/issues/200#issuecomment-2184162532) somewhere, mentions that it is based on SD-JWT VC and that it supports DIDs.\r\n- There is also an ideological argument. The concept of VCs has historically emerged out of a desire to enable decentralized identity, self-sovereign identity (SSI), and decentralized public key infrastructure (DPKI), and to use identifiers that are independent of central authorities and intermediaries. To attempt to eliminate elements of decentralization from a specification that contains the term \"VC\" raises concerns about the goals and values behind this effort.\r\n\r\nPlease don't reply with \"nobody stops you from creating a profile that uses DIDs\" or with \"standards are about making choices\". Support for DIDs is described as optional anyway, so there are no downsides of supporting them, but many upsides (see list above).",
          "createdAt": "2024-07-29T13:55:40Z",
          "updatedAt": "2024-07-29T18:13:00Z"
        },
        {
          "author": "decentralgabe",
          "authorAssociation": "NONE",
          "body": "The arguments made against DIDs are not only inaccurate (as @peacekeeper notes), they're irrelevant. Retrieving keys from DID Documents in a consistent manner should be all that is needed. This is a close analog to how well-known issuer metadata is resolved with JWKs.\r\n\r\nDIDs are and will continue to be used by many organizations, companies, and individuals. Dropping support for them harms interoperability.\r\n\r\nWhat the specification can do, is make it clearer how DIDs can be used with SD-JWT-VCs in a consistent manner. I made [a comment here speaking to one such recommendation](https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/245#issuecomment-2256555560).\r\n\r\nThere are already plenty of [open source tools](https://dev.uniresolver.io/) and [demonstrations](https://w3c.github.io/did-test-suite/) that meet this set of capabilities. Not only that, like Markus mentioned, the DID WG is currently working on a Recommendation-track document to further specify DID Resolution, which will only make things better.\r\n\r\nThere are other ideas we can explore too, like requiring DID Documents to have [`publicKeyJwk` based Verification Methods](https://www.w3.org/TR/did-spec-registries/#publickeyjwk), which should even further lower the barrier to interoperability.\r\n\r\nI am happy to help construct language improvements to [Section 3.5](https://drafts.oauth.net/oauth-sd-jwt-vc/draft-ietf-oauth-sd-jwt-vc.html#section-3.5) in service of this effort.",
          "createdAt": "2024-07-29T17:57:00Z",
          "updatedAt": "2024-07-29T17:57:00Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I understand there are some ardent supporters of DIDs and the VCDM. And some folks who are not. But this issue isn't the place to try and litigate any of that. ",
          "createdAt": "2024-07-30T23:18:11Z",
          "updatedAt": "2024-07-30T23:18:11Z"
        },
        {
          "author": "peacekeeper",
          "authorAssociation": "NONE",
          "body": "@bc-pi What do you mean by \"litigate any of that\"? Isn't the point of Github issues to discuss (and ideally, offer arguments) whether a certain change should be made or not, in this case, removing DIDs and DID resolution from this specification?",
          "createdAt": "2024-07-31T00:17:31Z",
          "updatedAt": "2024-07-31T00:17:31Z"
        },
        {
          "author": "ssanchocanela",
          "authorAssociation": "NONE",
          "body": "I'm afraid I have to disagree with this proposal; I don't see any argument in its favour. My proposal is the opposite: to specify examples of DID usage in SD-JWT VC to increase adoption and strengthen the specification. A broad community of wallets supports DIDs, including all those EBSI Conformance. Ignoring DIDs in the specification is a statement of intent.",
          "createdAt": "2024-07-31T17:39:38Z",
          "updatedAt": "2024-07-31T17:39:38Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> @bc-pi What do you mean by \"litigate any of that\"? Isn't the point of Github issues to discuss (and ideally, offer arguments) whether a certain change should be made or not, in this case, removing DIDs and DID resolution from this specification?\r\n\r\nWell, it sure seems to me that the arguments offered veered well into the territory of general advocacy for the wonders of Decentralized Identifiers from the DID community itself. While also misunderstanding or misconstruing the actual implications of removal from this draft. This issue isn't the place for that. And honestly it's tiresome. Also probably not having the effect you think or hope it is. ",
          "createdAt": "2024-07-31T22:47:02Z",
          "updatedAt": "2024-07-31T22:47:02Z"
        },
        {
          "author": "peacekeeper",
          "authorAssociation": "NONE",
          "body": "> Well, it sure seems to me that the arguments offered veered well into the territory of general advocacy for the wonders of Decentralized Identifiers from the DID community itself. While also misunderstanding or misconstruing the actual implications of removal from this draft.\r\n\r\nApologies, I admit I'm not so familiar with the process and culture of this group. If advocacy for the benefits (not \"wonders\") of a feature that is being proposed for removal is not welcome here, and considered \"tiresome\", then what would be a more acceptable way of expressing a dissenting opinion about this proposal?",
          "createdAt": "2024-08-01T00:11:12Z",
          "updatedAt": "2024-08-01T01:13:31Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Apologies if I've been unable to articulate myself in a meaningful way but I believe the point has been missed. ",
          "createdAt": "2024-08-01T12:35:54Z",
          "updatedAt": "2024-08-01T12:35:54Z"
        },
        {
          "author": "kimdhamilton",
          "authorAssociation": "NONE",
          "body": "Of relevance; for any interested in contributing to DID method standardization: https://identity.foundation/publications/LOI-DIDMethodStandardization.pdf\r\n",
          "createdAt": "2024-08-09T23:56:41Z",
          "updatedAt": "2024-08-09T23:56:41Z"
        },
        {
          "author": "leifj",
          "authorAssociation": "NONE",
          "body": "Getting back to this (apologies for the late feedback). Much has been made in this thread of the importance of DIDs in the ecosystem. My proposal has nothing to do with the importance or non-importance of DIDs but is all about weather the current language is appropriate guidance for implementors. If in fact DIDs are important they deserve more care than half a paragraph and a separate specification that profiles this specification for use with DIDs is imo entirely appropriate in that case. IETF standards are not marketing documents but technical specifications and as such the current language on DIDs is unusable for an implementer.\r\n\r\nI propose that the the proponents of keeping DIDs in the current specification open a PR with language that ensures interoperability - something which is clearly a requirement for a standards-track IETF document.",
          "createdAt": "2024-08-15T07:19:04Z",
          "updatedAt": "2024-08-15T07:19:04Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "@peacekeeper @kimdhamilton @decentralgabe Do you have an implementation of SD-JWT VC that uses DIDs and did you have the feeling the current spec was clear enough?",
          "createdAt": "2024-08-23T13:40:03Z",
          "updatedAt": "2024-08-23T13:40:03Z"
        },
        {
          "author": "decentralgabe",
          "authorAssociation": "NONE",
          "body": "@awoie we are planning an implementation at TBD. Reviewing the spec, here is where I think there's room for improvement to support DIDs:\r\n\r\n* [Section 5](https://drafts.oauth.net/oauth-sd-jwt-vc/draft-ietf-oauth-sd-jwt-vc.html#section-5) on Issuer Metadata. Supporting other mechanisms to fetch metadata besides `/.well-known/jwt-vc-issuer` would be useful. \r\n  * Something like being able to fetch this metadata by resolving a DID Document. It could be included directly in a DID Document itself, through a service, or another property registered as an extension. Language speaking to these possibilities and examples would be great.\r\n  * Today, if issuers wanted to use DIDs it would be quite tough to interop with the JWT VC Issuer Metadata ... there would need to be intermediary/translating services to map what a DID surfaces to the expected request/response model defined by this spec. \r\n\r\n* Similarly the guidance in [8.1. Server-Side Request Forgery](https://drafts.oauth.net/oauth-sd-jwt-vc/draft-ietf-oauth-sd-jwt-vc.html#name-server-side-request-forgery) would need to be updated to note retrieving issuer metadata from sources other than the issuer itself, such as a Verifiable Data Registry (VDR) that could house a DID Document.\r\n\r\n* The guidance in [8.4 Robust Retrieval of Type Metadata](https://drafts.oauth.net/oauth-sd-jwt-vc/draft-ietf-oauth-sd-jwt-vc.html#name-robust-retrieval-of-type-me) would need to be updated to include deferring resolution guidance to a DID method's best practices. Caching may not always be a recommended approach.\r\n\r\n* [9.3. Issuer Phone-Home](https://drafts.oauth.net/oauth-sd-jwt-vc/draft-ietf-oauth-sd-jwt-vc.html#section-9.3) could mention that certain DID methods prevent this vector entirely, since with DID methods like [did:dht](https://did-dht.com/) issuers would have no way of forcing a phone home.\r\n\r\n* As I [commented here](https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/245#issuecomment-2256555560) I would recommend updating [this guidance in 3.5](https://drafts.oauth.net/oauth-sd-jwt-vc/draft-ietf-oauth-sd-jwt-vc.html#name-issuer-signed-jwt-verificat) to require absolute DID URL references when using DIDs.\r\n\r\n* In [4.1 Key Binding JWT](https://drafts.oauth.net/oauth-sd-jwt-vc/draft-ietf-oauth-sd-jwt-vc.html#name-key-binding-jwt) there is room to improve guidance on key binding when interfacing with DIDs. The simple approach would to something like \"DID Documents may have multiple keys, or rotate keys over time; however, key binding relies on a persistent key. If that key is removed from a DID Document binding is no longer possible.\" IOW -- there is no _DID Binding_ but instead there is _binding to a key present in a DID Document_.\r\n\r\n* Another concern when interfacing with DIDs is accessing key material that's not in a JWK format (`publicKeyJwk`), since other key formats are supported like [`publicKeyMultibase`](https://www.w3.org/TR/did-core/#verification-material). A simple solution would be to only support `publicKeyJwk`, or require those using non-JWK key representations to support a transformation to a JWK.\r\n\r\nWith these tweaks (and maybe some more...) I would say the spec is \"clear enough\" in interfacing with DIDs. I hope these points illustrate why I believe it's a bad idea to remove DID content from this spec. Doing so would maintain the existing confusion I highlighted and guarantee interoperability issues.",
          "createdAt": "2024-08-23T18:35:59Z",
          "updatedAt": "2024-08-23T18:35:59Z"
        },
        {
          "author": "peacekeeper",
          "authorAssociation": "NONE",
          "body": "@awoie We are also working on an implementation, and will be happy to share updates as our work progresses.",
          "createdAt": "2024-08-28T20:19:28Z",
          "updatedAt": "2024-08-28T20:19:28Z"
        },
        {
          "author": "kimdhamilton",
          "authorAssociation": "NONE",
          "body": "In a former life I made a toy implementation of it and had some minor issues with the sd-jwt spec at the time, but I'm sure those have been addressed. No issues with DIDs in my recollection. Here's the [writeup with links to code](https://hackmd.io/XhUd63TaRVSdbTzSf3JXpA) fwiw, but take this with a grain of salt.",
          "createdAt": "2024-08-28T21:46:58Z",
          "updatedAt": "2024-08-28T21:46:58Z"
        },
        {
          "author": "peacekeeper",
          "authorAssociation": "NONE",
          "body": "Those who are following this thread here should be aware of a PR that would remove support for DIDs: https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/251",
          "createdAt": "2024-09-20T14:46:48Z",
          "updatedAt": "2024-09-20T14:46:48Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "standards are about making choices and nobody stops you from creating a profile that uses DIDs ",
          "createdAt": "2024-11-13T12:43:32Z",
          "updatedAt": "2024-11-13T12:43:32Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "My assessment, acting as co-editor of this draft and endeavoring to represent the rough consensus of the WG, is that consensus favors removal of the references. ",
          "createdAt": "2024-11-13T12:48:45Z",
          "updatedAt": "2024-11-13T12:48:45Z"
        },
        {
          "author": "peacekeeper",
          "authorAssociation": "NONE",
          "body": "> rough consensus of the WG, is that consensus favors removal of the references\r\n\r\nHow does the co-editor understand \"rough consensus\", and how has he come to this assessment?",
          "createdAt": "2024-11-13T16:31:19Z",
          "updatedAt": "2024-11-13T16:31:29Z"
        },
        {
          "author": "decentralgabe",
          "authorAssociation": "NONE",
          "body": "> > rough consensus of the WG, is that consensus favors removal of the references\r\n> \r\n> How does the co-editor understand \"rough consensus\", and how has he come to this assessment?\r\n\r\nClearly, when 5 people express dissent a co-editor can declare \"consensus.\"",
          "createdAt": "2024-11-13T16:35:23Z",
          "updatedAt": "2024-11-13T16:35:23Z"
        },
        {
          "author": "andorsk",
          "authorAssociation": "NONE",
          "body": "For consensus building, there are a number of RFC's describing the IETF process. The conversations here seem to indicate to me there is no \"rough consensus\". \r\n\r\nIn particular, [RFC7282 Section 6](https://datatracker.ietf.org/doc/html/rfc7282#section-6) and many of the other sections in [RFC7282](https://datatracker.ietf.org/doc/html/rfc7282#section-4) focused on \"rough\" consensus building. \r\n\r\nAlso, it should be noted a PR was submitted that seems to be a result of this issue #251 but was not linked. It was also named `Tightened exposition of Issuer-signed JWT Verification Key Validation` section #251 which seems to provide a perception of distance to this issue, when clearly they are related.  This harms the visibility of discussion and context for the PR, which from my understanding, is not aligned with [IETF Mission Statement](https://www.rfc-editor.org/rfc/rfc3935#section-1) around an open/transparent process for discourse.\r\n\r\nI understand there are two camps of thought here, but there are solid reasons (technically and practically) provided by pro-DID side, and there is consensus procedure to deal with the objections raised here which need to be addressed and do not seem like they have been. \r\n\r\nAccording to [Section 3 of RFC7282](https://datatracker.ietf.org/doc/html/rfc7282#section-3), rough consensus can be achieved when all issues are addressed, but not necessarily accommodated:\r\n\r\n> What can't happen is that the chair bases their decision solely on hearing a large\r\n   number of voices simply saying, \"The objection isn't valid.\"  That\r\n   would simply be to take a vote.  A valid justification needs to me\r\n   made. \r\n\r\nThat seems to contradict the actions here: https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/250#issuecomment-2473526620\r\n\r\nIt seems to me this issue has not been appropriately addressed given the concerns raised. Stating one is \"tired\" of discussing the issue is not a valid argument, and I for one would like to see the concerns addressed by the previous commenters addressed. ",
          "createdAt": "2024-11-13T21:03:56Z",
          "updatedAt": "2024-11-13T21:27:03Z"
        },
        {
          "author": "ottomorac",
          "authorAssociation": "NONE",
          "body": "DIDs are a long standing W3C recommended standard.  Removing this from the spec is not a good idea.",
          "createdAt": "2024-11-27T18:42:11Z",
          "updatedAt": "2024-11-27T18:42:11Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Those who are following this thread here should be aware of a PR that would add back the DID language https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/278",
          "createdAt": "2024-12-02T19:23:09Z",
          "updatedAt": "2024-12-02T19:23:09Z"
        },
        {
          "author": "za8457",
          "authorAssociation": "NONE",
          "body": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/250",
          "createdAt": "2025-02-23T20:54:46Z",
          "updatedAt": "2025-02-23T20:54:46Z"
        }
      ]
    },
    {
      "number": 253,
      "id": "I_kwDOJbVClc6Wr3og",
      "title": "Issuer-signed JWT Verification Key Validation - Separation of signature and identity verification/validation?",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/253",
      "state": "CLOSED",
      "author": "alenhorvat",
      "authorAssociation": "NONE",
      "assignees": [
        "awoie"
      ],
      "labels": [
        "discuss"
      ],
      "body": "There seem to be several mechanisms for issuer key validation (section 3.5).\r\n\r\nTwo mechanisms define fetching of keys (issuer metadata, DID), and one can be embedded or referenced (x509).\r\n\r\nWould it make sense to enable signature validation at all times and\r\n- require a `jwk` header with the issuer's signing key (https://datatracker.ietf.org/doc/html/rfc7515#section-4.1.3)\r\nSignature is always verified using this key.\r\n\r\nPublic key - identity binding can be verified\r\n- using x509 certificate that is in the jwk.x5c claim (https://datatracker.ietf.org/doc/html/rfc7517#section-4.7) - key certificate or the full chain.\r\n\r\n`kid` could be misused to express the validation mechanism or one could define an additional header claim where identity verification mechanism is specified:\r\n- calling the /.well-known/jwt-vc-issuer\r\n- resolving a DID\r\n- using Federation ...\r\n- ...",
      "createdAt": "2024-09-16T10:31:44Z",
      "updatedAt": "2025-07-09T22:57:51Z",
      "closedAt": "2025-06-18T02:16:09Z",
      "comments": [
        {
          "author": "peacekeeper",
          "authorAssociation": "NONE",
          "body": "I think this makes sense only in the case of embedded X509 certificate.\r\n\r\nOtherwise, I think the \"validation mechanism\" (e.g. resolving the DID or downloading the keys from a web server) would always have to be executed anyway. There would be no extra value in having an embedded signing key, since an attacker that can replace the signature can also replace the signing key. And there would be a risk that implementers create security holes by considering the \"validation mechanism\" as something optional...\r\n\r\nOr am I missing anything?",
          "createdAt": "2024-09-19T10:54:31Z",
          "updatedAt": "2024-09-19T10:54:31Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "Excellent point @peacekeeper!\r\n\r\nThere are always 2 processes\r\n\r\n1. Verifying the signature: By embedding a key, the signature can be always verified. This does not exclude an option to resolve the key.\r\n2. Verifying the signer's identity: each method defines it's own process: x509 embedded or referenced (referenced x509 is almost never used); .well-known -> resolve the URL, DID -> resolve the DID (URL)\r\n\r\nIn many environments (high-loads, low connectivity, ...) we cannot rely on \". resolving the DID or downloading the keys from a web server would always have to be executed anyway\". Furthermore, if the resource is not available, again, signature validation fails. Hence, these mechanisms (well-known, DIDs) should also define how identity information could be embedded in the signature (like x509, OIDFed, advanced signatures are already doing) - but this is out of scope of this specification and discussion.",
          "createdAt": "2024-09-19T11:40:37Z",
          "updatedAt": "2024-09-19T11:40:37Z"
        },
        {
          "author": "peacekeeper",
          "authorAssociation": "NONE",
          "body": "Thanks @alenhorvat \r\n\r\n> By embedding a key, the signature can be always verified.\r\n\r\nYes, but what's the value of knowing that a payload has been signed by \"someone\", if you don't know who that key belongs to?\r\n\r\n>  define how identity information could be embedded in the signature\r\n\r\nYes that sounds useful!",
          "createdAt": "2024-09-19T13:16:41Z",
          "updatedAt": "2024-09-19T13:16:41Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "> Yes, but what's the value of knowing that a payload has been signed by \"someone\", if you don't know who that key belongs to?\r\n\r\nGoal is a bit broader - to clearly split and define the two processes, and show that x509 verification or .well-known/DIDs are all process of verifying the identity/identifier of the signer (link between a public key and an identifier).",
          "createdAt": "2024-09-19T13:24:10Z",
          "updatedAt": "2024-09-19T13:24:10Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "> * require a `jwk` header with the issuer's signing key (https://datatracker.ietf.org/doc/html/rfc7515#section-4.1.3)\r\n>   Signature is always verified using this key.\r\n\r\nWe discussed this topic with the other editor's. Our opinion is that including the `jwk` in the header would be quite dangerous since it would encourage implementations to always use the `jwk` and skip all the other validation checks.\r\n\r\n@alenhorvat  Is there a specific use case you have in mind that would be blocked by this?",
          "createdAt": "2024-10-10T12:33:35Z",
          "updatedAt": "2024-10-10T12:33:35Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "Challenges\r\n\r\n- RP needs to resolve a key to verify a signature - issues for offline cases\r\n- if RP needs to verify a high number of VCs issued by different issuers, results with additional effort to resolve the keys\r\n- managing and resolving historical keys/key rotation -- you can have several key rotation in the lifecycle of a credential.\r\n\r\nImplementers MUST understand how to verify the identity, independently of the signature validation. This also forces the standard to clearly define the two verification streams.",
          "createdAt": "2024-10-10T12:43:54Z",
          "updatedAt": "2024-10-10T12:43:54Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "Related question:\r\nWhat prevents a malicious issuer to define an issuer identifier: happy-issuer.com/issuers/google.com?\r\n\r\nHow can the Verifier/RP know whether issuer is truly Google or not?",
          "createdAt": "2024-10-10T12:45:44Z",
          "updatedAt": "2024-10-10T12:45:44Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "> Challenges\r\n> \r\n> * RP needs to resolve a key to verify a signature - issues for offline cases\r\n> * if RP needs to verify a high number of VCs issued by different issuers, results with additional effort to resolve the keys\r\n> * managing and resolving historical keys/key rotation -- you can have several key rotation in the lifecycle of a credential.\r\n> \r\n> Implementers MUST understand how to verify the identity, independently of the signature validation. This also forces the standard to clearly define the two verification streams.\r\n\r\nI think one way to address this is as follows and you have alluded to the same thing in your previous post:\r\n- use an X.509 chain with a trusted root cert\r\n- include the end-entity certificate in the `x5c` header that signs the SD-JWT\r\n- end-entity certificate is issued by trusted root cert\r\n\r\nThis way, a verifier can cache the trusted root cert and use the contained end-entity cert in the `x5c` to validate the X.509 chain and verify the signature.\r\n\r\nFor simplicity I didn't mention intermediate certs but they can be included in the `x5c` header as well.\r\n\r\nThis behaviour is enforced by X.509 itself (RFC5280) which requires certificate chain validation. If implementations don't have a trust point, the `x5c` would not be trusted and therefore rejected.\r\n\r\nIt seems you want to define the same thing for `jwk`?  Why is using X.509 not an option in this case?\r\n\r\nIf you want to use DIDs and/or issuer metadata, wouldn't it be possible to support the use cases you just mentioned by simply caching DID resolution or the issuer metadata URL?\r\n\r\n",
          "createdAt": "2024-10-10T14:31:05Z",
          "updatedAt": "2024-10-10T14:31:48Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "IMO x5c/x5u+x5t are enough, but this document puts x509, jwk+URL, and DID on the same level.\r\nIt might work for some DID methods and it might work if JWK \"trust model\" is clearly defined; e.g., see the example above where a malicious actor lists an issuer as one of their clients. It can be translated to an x509 model, where RP must define which \"Root JWKs\" it trusts (e.g., service providers that offer VC issuance as a service and URL contains 2 identifiers, of the provider (e.g., mattr) and the actual issuer (e.g., university of wonderland))",
          "createdAt": "2024-10-10T14:39:18Z",
          "updatedAt": "2024-10-10T14:39:18Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "> Related question: What prevents a malicious issuer to define an issuer identifier: happy-issuer.com/issuers/google.com?\r\n> \r\n> How can the Verifier/RP know whether issuer is truly Google or not?\r\n\r\nNothing, but I believe this issue is solved by the trust framework and the provided trust points, isn't it? There are various mechanisms and based on my prior observations of different trust frameworks, there can be a lot of differences.\r\n\r\nIn your specific example which I think has to be corrected (since an attacker would need to use Google's domain in the issuer identifier and not happy-issuer.com, to pretend to be Google), I believe the trust point is Internet PKI and if you don't trust the Internet PKI, it probably makes no sense to rely on issuer well-known alone or at all. \r\n\r\nYou can combine this with X.509 (or even DIDs if required).",
          "createdAt": "2024-10-10T14:55:23Z",
          "updatedAt": "2024-10-10T14:55:23Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "> In your specific example which I think has to be corrected (since an attacker would need to use Google's domain in the issuer identifier and not happy-issuer.com, to pretend to be Google)\r\n\r\nwouldn't the \"iss\" value be: happy-issuer.com/issuers/google.com?\r\nI don't need to know google's domain to do that. I only need my domain.\r\n\r\nx509 -> originates from own framework and defines the rules; no problems here\r\nDID method (if defined well), can achieve same as x509\r\njwk -> you are defining a trust model for this in section 5 (https://www.ietf.org/archive/id/draft-ietf-oauth-sd-jwt-vc-05.html#name-jwt-vc-issuer-metadata)",
          "createdAt": "2024-10-10T15:01:02Z",
          "updatedAt": "2024-10-10T15:01:02Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "> > In your specific example which I think has to be corrected (since an attacker would need to use Google's domain in the issuer identifier and not happy-issuer.com, to pretend to be Google)\r\n> \r\n> wouldn't the \"iss\" value be: happy-issuer.com/issuers/google.com? I don't need to know google's domain to do that. I only need my domain.\r\n\r\nPerhaps we are talking past each other but I thought you were concerned about impersonating Google in your example. I was saying that there is no reason for a verifier to think that the identity of happy-issuer.com/issuers/google.com is Google if it doesn't use one of Google's domains, right?",
          "createdAt": "2024-10-10T16:36:06Z",
          "updatedAt": "2024-10-10T16:36:06Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "What is google's identifier if they are using service hosted by the happy issuer? \r\nhappy user is managing signing keys of google and it assigned google an identifier in their multi-tenant system as happy-issuer.com/issuers/google.com\r\n\r\n(in the case of using jwk + URL in the iss; when using x509 and (some) DID methods it's clear and it's irrelevant if the service is self-managed or is managed by a 3rd party)",
          "createdAt": "2024-10-10T17:50:23Z",
          "updatedAt": "2024-10-10T18:01:15Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "@bc-pi how does the PR answer the last question above?\n\nThank you!",
          "createdAt": "2025-06-18T17:42:37Z",
          "updatedAt": "2025-06-18T17:42:37Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> [@bc-pi](https://github.com/bc-pi) how does the PR answer the last question above?\n\nCould you help clarify the specific question? I have struggled a bit to follow the conversation in this issue. \n",
          "createdAt": "2025-06-18T18:13:51Z",
          "updatedAt": "2025-06-18T18:13:51Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "> > [@bc-pi](https://github.com/bc-pi) how does the PR answer the last question above?\n> \n> Could you help clarify the specific question? I have struggled a bit to follow the conversation in this issue.\n\nJust the last one:\n\nWhat is google's identifier if they are using service hosted by the happy issuer?\nhappy user is managing signing keys of google and it assigned google an identifier in their multi-tenant system as happy-issuer.com/issuers/google.com\n\n(in the case of using jwk + URL in the iss; when using x509 and (some) DID methods it's clear and it's irrelevant if the service is self-managed or is managed by a 3rd party)\n\nThank you.",
          "createdAt": "2025-06-18T18:16:37Z",
          "updatedAt": "2025-06-18T18:17:04Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm admittedly still struggling to follow but I think that in that hypothetical case, the identifier in the `iss` claim would be `https://happy-issuer.com/issuers/google.com`\n\nA verifier would need to have policy or configuration, somewhat akin to a CA list, that it trusts happy-issuer.com as a multi-tenant host of credential issuers and `https://happy-issuer.com/issuers/google.com` to issue whatever the credential in question. If that policy is in place, then metadata and ultimately keys can be found at `https://happy-issuer.com/.well-known/jwt-vc-issuer/issuers/google.com`. ",
          "createdAt": "2025-06-18T22:55:36Z",
          "updatedAt": "2025-06-18T22:55:51Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "Thank you, however the question is different: it's not about the signing key location, it's about how to express google.com as an issuer identifier independently from the signing key location. E.g., google.com moves from happy-issuer to funky-issuer.com;\nIssuer's identifier is still google.com, even though the signing keys is now found at a different location, e.g., https://funky-issuer.com/issuers/google.com\n\nFrom the verifier perspective, the credential issuer it's the same entity (google.com), regardless of the signing key location.",
          "createdAt": "2025-06-19T06:12:59Z",
          "updatedAt": "2025-06-19T06:12:59Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I guess I don't understand then. Apologies. https://funky-issuer.com/issuers/google.com and https://happy-issuer.com/issuers/google.com are different issuers. There's nothing at this layer that would provide anything like that. Intentionally. ",
          "createdAt": "2025-06-19T22:40:31Z",
          "updatedAt": "2025-06-19T22:40:31Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "A simpler example: In both cases, it's the same organisation issuing the credential (google.com), they are only using different service providers. E.g., with x509, it doesn't matter whom you receive your certificate from (you have a certificate issuer != certificate subject, where cert subject is the one signing the credential). Using x509, your issuer identifier will be always the same, regardless of the issuing service provider.\n\nWith iss == URL (as defined now) the identifier is of the service provider, not the actual issuer (or at least they are coupled, and there's no prescription on how to distinguish between the service provider and the issuer).",
          "createdAt": "2025-06-20T06:30:55Z",
          "updatedAt": "2025-06-20T06:30:55Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I suppose the prescription on how to distinguish between the service provider and the issuer would be to use x509 or for service providers to offer some reasonable DNS integration features so that e.g., `number-one-best-credentials.win` would be the issuer and the URL regardless of where it's hosted - AWS, GCP, happy cloud, super issuers dot com, budget digital verifiable credentials, shopify, etc.. \n",
          "createdAt": "2025-06-20T12:36:26Z",
          "updatedAt": "2025-06-20T12:39:38Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "Yes. So question is, should the specification (for interoperability purposes) prescribe on how to express the issuer vs service provider identifier (when applicable)?\n\nThank you!",
          "createdAt": "2025-06-20T13:19:40Z",
          "updatedAt": "2025-06-20T13:19:40Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> Yes. So question is, should the specification (for interoperability purposes) prescribe on how to express the issuer vs service provider identifier (when applicable)?\n\nMy intuition is no. ",
          "createdAt": "2025-07-09T22:57:51Z",
          "updatedAt": "2025-07-09T22:57:51Z"
        }
      ]
    },
    {
      "number": 256,
      "id": "I_kwDOJbVClc6XElX_",
      "title": "Fetch vct from URL or from registry",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/256",
      "state": "CLOSED",
      "author": "alenhorvat",
      "authorAssociation": "NONE",
      "assignees": [
        "danielfett"
      ],
      "labels": [],
      "body": "https://www.ietf.org/archive/id/draft-ietf-oauth-sd-jwt-vc-05.html#section-6.3.1\r\n\r\nIs defining that if vct is an https:// it should check the metadata under the well known (at least the 2nd part of the text reads like this:\r\n>  i.e., by inserting /.well-known/vct after the authority part of the URL.)\r\n\r\nMany registries are, and will be accessible via URLs, hence the metadata type is expressed via an URL; Adding or maintaining a .well-known might not fit in the existing API designs. Also note that .well-known has well-known issues with multi-tenancy. Most use cases will delegate the hosting of the information to registries.\r\n\r\nAlso\r\n> URL https://<authority>/.well-known/vct/<type>, i.e., by inserting /.well-known/vct after the authority part of the URL.\r\n\r\nQuestions:\r\n- if schema is https, should the full URL be provided? (no ambiguity with .well-known, you can host schema on github, ...)\r\n- metadata retrieval category re-consideration:\r\n\r\n1) Fetch vct from a remote source:\r\n    a) URL: HTTPS schema -> full URL that points to a schema\r\n    b) URN: domain-defined URN that MUST be understood by the wallet; The URN method defines how to map the URN to URL and retrieve the data\r\n\r\n2) Fetch vct the metadata locally\r\n    a) local cache\r\n    b) Signature (signed or unsigned header); Whether or not metadata is shared in the (un)protected header is defined by the signature format, hence out of scope of this document.\r\n\r\n2b: point to consider for the OID4VP: should there be a flag: \"archival mode\" or similar, that would flag that the wallet needs to provide all the referenced content in an unprotected JWS header?",
      "createdAt": "2024-09-18T19:45:34Z",
      "updatedAt": "2024-12-02T17:05:30Z",
      "closedAt": "2024-12-02T17:05:30Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "#272 removes the requirement to insert .well-known (discussion in #264)",
          "createdAt": "2024-11-14T14:47:21Z",
          "updatedAt": "2024-11-14T14:47:21Z"
        }
      ]
    },
    {
      "number": 257,
      "id": "I_kwDOJbVClc6ZL6C3",
      "title": "ed: sentence clarification",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/257",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "awoie"
      ],
      "labels": [],
      "body": "I don't understand this sentence that points to the claims that are REQUIRED: `If present, the following registered JWT claims MUST be included in the SD-JWT and MUST NOT be included in the Disclosures, i.e. cannot be selectively disclosed:` the sentence also uses two normative statements in one. Could it be clarified/simplified as something like: `The following registered JWT claims MUST NOT be included in the Disclosures, i.e. cannot be selectively disclosed:`\r\nThanks.\r\n",
      "createdAt": "2024-10-07T10:38:15Z",
      "updatedAt": "2025-03-11T19:13:04Z",
      "closedAt": "2025-03-11T19:13:04Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Discussed on the editors' call. Yes, the first part of the sentence is not great. What you propose makes sense, we may want to add that the context is \"during issuance\".",
          "createdAt": "2024-10-08T18:20:00Z",
          "updatedAt": "2024-10-08T18:20:00Z"
        }
      ]
    },
    {
      "number": 258,
      "id": "I_kwDOJbVClc6ZMJAy",
      "title": "Why vct is not selectively disclosable, but vct#integrity is not?",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/258",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "danielfett"
      ],
      "labels": [
        "Ready-for-PR"
      ],
      "body": "Would also be good to add rationale why chosen certain claims are not selectively disclosable.",
      "createdAt": "2024-10-07T11:04:18Z",
      "updatedAt": "2025-09-02T18:40:44Z",
      "closedAt": "2025-09-02T18:40:43Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "also what about `extends` and `extends#integrity` claims?",
          "createdAt": "2024-10-07T11:18:12Z",
          "updatedAt": "2024-10-07T11:18:12Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Right, `vct#integrity` should be added/mentioned here: https://drafts.oauth.net/oauth-sd-jwt-vc/draft-ietf-oauth-sd-jwt-vc.html#section-3.2.2.2\r\n\r\n`extends` and `extends#integrity` are not in the credential, so are not affected.",
          "createdAt": "2024-10-08T18:15:31Z",
          "updatedAt": "2024-10-08T18:15:31Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "this text is/was about application profiles (like SD-JWT VC) saying what claims the issuer can make selectively disclosable and maybe has text that could serve as inspiration https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-12.html#name-selectively-disclosable-val ",
          "createdAt": "2024-10-08T19:03:07Z",
          "updatedAt": "2024-10-08T19:03:07Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I think I maybe meant for that https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/258#issuecomment-2400607967 to go on #257 but maybe works here too ",
          "createdAt": "2024-10-08T21:39:43Z",
          "updatedAt": "2024-10-08T21:39:43Z"
        },
        {
          "author": "cre8",
          "authorAssociation": "CONTRIBUTOR",
          "body": "working on this",
          "createdAt": "2025-08-28T06:38:59Z",
          "updatedAt": "2025-08-28T06:38:59Z"
        }
      ]
    },
    {
      "number": 259,
      "id": "I_kwDOJbVClc6ZML3s",
      "title": "Free text in description.",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/259",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "danielfett"
      ],
      "labels": [],
      "body": "There are certain risks associated with free text, some of which are elaborated in threads like these (though not entirely) [https://github.com/openid/OpenID4VP/pull/220#discussion_r1696310253(https://github.com/openid/OpenID4VP/pull/220#discussion_r1696310253)\r\n\r\nI probably won't be able to convince the authors in removing the free text `description` property from the metadata, which is defined as `A human-readable description for the type, intended for developers reading the JSON document.` So at least would be great if security considerations for free text can be added.\r\nThanks.",
      "createdAt": "2024-10-07T11:09:45Z",
      "updatedAt": "2025-03-11T18:31:54Z",
      "closedAt": "2025-03-11T18:31:54Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I'm not sure... While the risk is real, so are many other risks. It's 2024 and developers should have learned not to trust information. We also don't consider warning people of SQL injection attacks via JSON metadata files. But maybe we should?\r\n\r\nAnyway and nonetheless, to see what it would look like, I drafted a PR: https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/262",
          "createdAt": "2024-10-08T18:00:44Z",
          "updatedAt": "2024-10-08T18:00:44Z"
        }
      ]
    },
    {
      "number": 260,
      "id": "I_kwDOJbVClc6ZMRAp",
      "title": "display and claims definition in section 6.2",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/260",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "HAS PR"
      ],
      "body": "For SD-JWT VC type metadata, display and claims are defined as objects in https://datatracker.ietf.org/doc/html/draft-ietf-oauth-sd-jwt-vc-05#section-6.2, only later in sections 8 and 9 to be clarified as Array of objects, can you please define these as array of objects in section 6.2 as well?\r\n\r\nAlso why the title of section 6 is not `SD-JWT VC type metadata` and is simply `type metadata`? `SD-JWT VC type metadata` would be clearer IMO.",
      "createdAt": "2024-10-07T11:17:30Z",
      "updatedAt": "2024-10-08T18:11:09Z",
      "closedAt": "2024-10-08T18:11:09Z",
      "comments": []
    },
    {
      "number": 264,
      "id": "I_kwDOJbVClc6aWFQJ",
      "title": "second-guess the choice to use .well-known for type metadata documents",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/264",
      "state": "CLOSED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "danielfett"
      ],
      "labels": [
        "discuss"
      ],
      "body": "Dr. Fett, PhD:\r\n>Gentlemen,\r\nSome feedback I received (on top of the comments we already got in the issuers) makes me second-guess the choice to use a .well-known URL for the type metadata documents. In fact, RFC 5785 tells us that .well-known is mainly to be used for site-wide information or information about a specific host.\r\n>>   As such, the well-known URI space was created with the expectation\r\n   that it will be used to make site-wide policy information and other\r\n   metadata available directly (if sufficiently concise), or provide\r\n   references to other URIs that provide such metadata.\r\n\r\nBrian Campbell, B.A.:\r\n>That feedback seems not wrong to me. We've got probably a lot of somewhat questionable uses of .well-known but type metadata is maybe less well suited than most. And less needed. \r\n>It could just point to the json document. Or we make up some convention. Or something with uri templates. \r\n",
      "createdAt": "2024-10-15T17:53:17Z",
      "updatedAt": "2024-12-02T17:05:29Z",
      "closedAt": "2024-12-02T17:05:29Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Relevant related issues: #256, #242, #233",
          "createdAt": "2024-10-15T17:58:52Z",
          "updatedAt": "2024-10-15T17:58:52Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "I believe that lifting the restriction is not preventing the use of .well-known;\r\nIMO there are two approaches\r\n- provide the full link\r\n- signal that the metadata is under the well-known\r\n\r\nHowever, metadata owner must be aware of the responsibility to take care of the versioning. As mentioned in #256, should there be a requirement to either use hash links or protect the remote content via vct#digest?\r\n\r\nDr. Horvat, PhD",
          "createdAt": "2024-11-14T18:11:38Z",
          "updatedAt": "2024-11-14T18:11:38Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Maybe I'm missing something, but the change in PR #272 should mostly solve this, I think. It now requires to provide the full URL to the metadata. (If someone wants to provide it under .well-known, that is their choice, but doesn't influence the requester at all).\r\n\r\nFor versioning I filed a [new issue](https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/273). Not sure about making #digest mandatory, but we should also discuss this separately.",
          "createdAt": "2024-11-15T10:45:48Z",
          "updatedAt": "2024-11-15T10:45:48Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "#digest mandatory, but we should also discuss this separately.\r\n\r\n-> if it's an external resource, it should be defined how it is protected",
          "createdAt": "2024-11-15T11:27:02Z",
          "updatedAt": "2024-11-15T11:27:02Z"
        }
      ]
    },
    {
      "number": 266,
      "id": "I_kwDOJbVClc6comQ-",
      "title": "[IANA #1392244] Early review: draft-ietf-oauth-sd-jwt-vc-05 (IETF 121)",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/266",
      "state": "CLOSED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "> [IANA #1392244] Early review: draft-ietf-oauth-sd-jwt-vc-05 (IETF 121)\r\n\r\n> Amanda Baber via RT via ietf.org \r\n>\tto draft-ietf-oauth-sd-jwt-vc.all\r\n\r\n\r\n> Dear Authors,\r\n> \r\n> Before the IETF meeting, we check working group agendas for documents with IANA-related issues. We have one note about this document:\r\n> \r\n> https://datatracker.ietf.org/doc/html/draft-ietf-oauth-sd-jwt-vc-05\r\n> \r\n> In Section A.3.1, please add the \u201cStatus\u201d field for the well-known URI registration.\r\n> \r\n> If you have any questions, just let us know. If you'd like to talk in person, you can find us next to the RFC Editor's table from Monday through Thursday. You can also request another review at any time by contacting us at [iana@iana.org](mailto:iana@iana.org).\r\n> \r\n> For more information about IANA Considerations section requirements, please see\r\n> \r\n> https://www.iana.org/help/protocol-registration\r\n> \r\n> Best regards,\r\n> \r\n> Amanda Baber\r\n> IANA Operations Manager",
      "createdAt": "2024-10-31T21:45:13Z",
      "updatedAt": "2024-11-13T14:20:15Z",
      "closedAt": "2024-11-13T14:20:15Z",
      "comments": []
    },
    {
      "number": 267,
      "id": "I_kwDOJbVClc6daoH8",
      "title": "Document reasons for not using existing JSON query languages",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/267",
      "state": "CLOSED",
      "author": "aaronpk",
      "authorAssociation": "MEMBER",
      "assignees": [
        "danielfett"
      ],
      "labels": [],
      "body": "Repeating my live comment from the IETF 121 meeting... It would be worth documenting the reasons for creating a new JSON query syntax instead of using JSONPath or alternatives.",
      "createdAt": "2024-11-07T13:14:31Z",
      "updatedAt": "2025-03-11T18:32:48Z",
      "closedAt": "2025-03-11T18:32:48Z",
      "comments": [
        {
          "author": "babisRoutis",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Haven't followed the reasoning to introduce `Claim Path` yet to my understanding:\r\n- JSON Poinrter\r\n  - Too narrow to express requirements as verifier (What to present), given that it misses a wild-card for arrays.\r\n  - Could be used by wallet to calculate disclosures to include in a presentation\r\n- JSON Path\r\n  - Too broad for both the verifier and the wallet\r\n  - Ultimately leads to interoperability issues.\r\n  \r\n**Claim Path**\r\nThat's the sweet spot. I think it as a DSL pointer.\r\n- Easy to implement\r\n- Allows verifier to use wildcards for arrays\r\n- Allows wallet to calculate disclosures (Practically omitting wildcard is one-to-one mapping with JSONPointer, except the root)     \r\n",
          "createdAt": "2024-12-05T23:17:32Z",
          "updatedAt": "2024-12-05T23:17:32Z"
        }
      ]
    },
    {
      "number": 270,
      "id": "I_kwDOJbVClc6eUfQH",
      "title": "Define how X509 certificate can be used as user's identifier",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/270",
      "state": "CLOSED",
      "author": "cre8",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Close to #205 we want to bind an sd-jwt-vc to an existing x509 certificate to reuse the trustchain and also to allow a\r\n proof-of-possession.\r\n\r\nThe approach to extract the public key from the x509, put into the existing `jwk` field and compare later the public keys seems a bit hacky...\r\n\r\nIs your suggestion the same as in #205 to define a new spec or is there an existing approach that can be used for such a scenario?",
      "createdAt": "2024-11-13T17:01:19Z",
      "updatedAt": "2024-11-13T20:38:55Z",
      "closedAt": "2024-11-13T20:33:05Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "If I'm understanding correctly, the existing `x5t#S256` Certificate Thumbprint Confirmation Method sounds like it'd work? \r\n\r\nhttps://www.iana.org/assignments/jwt/jwt.xhtml#confirmation-methods \r\n\r\nhttps://www.rfc-editor.org/rfc/rfc8705.html#name-jwt-certificate-thumbprint-",
          "createdAt": "2024-11-13T17:28:59Z",
          "updatedAt": "2024-11-13T20:38:55Z"
        },
        {
          "author": "cre8",
          "authorAssociation": "NONE",
          "body": "@bc-pi for now it should work, thank you!",
          "createdAt": "2024-11-13T20:33:05Z",
          "updatedAt": "2024-11-13T20:33:05Z"
        }
      ]
    },
    {
      "number": 273,
      "id": "I_kwDOJbVClc6epMV1",
      "title": "Provide guidance on versioning",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/273",
      "state": "OPEN",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [
        "danielfett"
      ],
      "labels": [],
      "body": "[Dr. Horvat, PhD](https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/264#issuecomment-2477101068):\r\n> However, metadata owner must be aware of the responsibility to take care of the versioning.\r\n\r\nWe could add this as a consideration to the spec.",
      "createdAt": "2024-11-15T10:44:07Z",
      "updatedAt": "2025-09-16T15:17:00Z",
      "closedAt": null,
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "@danielfett couldn't the version be encoded in the `vct` value itself? However, I think it wouldn't be the worst to provide some guidance on versioning. Do you have a proposal @alenhorvat @danielfett ?",
          "createdAt": "2025-09-16T15:17:00Z",
          "updatedAt": "2025-09-16T15:17:00Z"
        }
      ]
    },
    {
      "number": 274,
      "id": "I_kwDOJbVClc6ey1I8",
      "title": "Non-existent section referred for key binding JWT rules due to a typo",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/274",
      "state": "CLOSED",
      "author": "georgepadayatti",
      "authorAssociation": "NONE",
      "assignees": [
        "bc-pi"
      ],
      "labels": [],
      "body": "Section 4.1. Key Binding JWT, says the following:\r\n\r\n> If the presentation of the SD-JWT VC includes a Key Binding JWT, the Key Binding JWT MUST adhere to the rules defined in Section 5.3 of [[I-D.ietf-oauth-selective-disclosure-jwt](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-selective-disclosure-jwt-13)].\r\n\r\nBut Section 5.3 does not exist in the referred spec. Instead, it should be Section 4.3",
      "createdAt": "2024-11-16T10:04:27Z",
      "updatedAt": "2024-12-02T16:37:44Z",
      "closedAt": "2024-12-02T16:37:44Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks @georgepadayatti! A couple sections in SD-JWT were consolidated around draft 12 or 13 and other sections were renumbered as a result. We'll fix this reference and check for others that might need updating too.",
          "createdAt": "2024-11-17T04:12:48Z",
          "updatedAt": "2024-11-17T04:12:48Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "see #275 including https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/275/commits/5b2589a14d3ece7f1c4b56ad46c2a24455375165 ",
          "createdAt": "2024-11-19T09:09:39Z",
          "updatedAt": "2024-11-19T09:09:39Z"
        }
      ]
    },
    {
      "number": 276,
      "id": "I_kwDOJbVClc6g4bPj",
      "title": "Wrong attribute name in the example",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/276",
      "state": "CLOSED",
      "author": "babisRoutis",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This [example](https://www.ietf.org/archive/id/draft-ietf-oauth-sd-jwt-vc-06.html#name-example-2-type-metadata) uses the attribute names : `schema_url` & `schema_url#integrity` instead of `schema_uri` & `schema_uri#integrity`,\r\n\r\n```json\r\n  \"schema_url\": \"https://exampleuniversity.com/public/credential-schema-0.9\",\r\n  \"schema_url#integrity\": \"sha256-o984vn819a48ui1llkwPmKjZ5t0WRL5ca_xGgX3c1VLmXfh\"\r\n  ```",
      "createdAt": "2024-11-27T16:45:39Z",
      "updatedAt": "2024-12-02T17:54:15Z",
      "closedAt": "2024-12-02T17:54:15Z",
      "comments": []
    },
    {
      "number": 281,
      "id": "I_kwDOJbVClc6h41n0",
      "title": "Should the verifier stop issuer key discovery if they already got one that worked for them?",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/281",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "If the verifier supports multiple different ways of issuer key discovery, the spec currently suggests that they would need to perform all of these different ways to validate the public key. Perhaps this is a good thing, but perhaps this is an unnecessary thing? Especially if the verifier supports HTTPS and X.509, should they do both?",
      "createdAt": "2024-12-03T21:41:43Z",
      "updatedAt": "2025-06-18T02:16:09Z",
      "closedAt": "2025-06-18T02:16:09Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "In my thinking, one good/working key validation/discovery is all that's needed. But, looking again, I can see how https://www.ietf.org/archive/id/draft-ietf-oauth-sd-jwt-vc-08.html#section-3.5 could be read as saying to always* do both.\r\n\r\nSo I would say it's unnecessary and we need to clarify or qualify that text.\r\n\r\n\\* if as a verifier you support both ",
          "createdAt": "2024-12-03T22:05:27Z",
          "updatedAt": "2024-12-03T22:05:41Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Wondering, assuming really, that this came about from this https://mailarchive.ietf.org/arch/msg/oauth/oRhW0bxoDrel1mnDJR_rokHq85I/ ",
          "createdAt": "2024-12-03T22:16:39Z",
          "updatedAt": "2024-12-03T22:16:39Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "> Wondering, assuming really, that this came about from this https://mailarchive.ietf.org/arch/msg/oauth/oRhW0bxoDrel1mnDJR_rokHq85I/\r\n\r\nIndeed, it was inspired. I was supposed to send to the mailing list but then only replied individually.",
          "createdAt": "2024-12-03T22:35:22Z",
          "updatedAt": "2024-12-03T22:35:22Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "Signature validation key discovery and resolution mechanism is in most specifications defined by the signature profile and  in the VC it must be unambiguous which mechanism should be used. If the mechanism is not unique (e.g., there are 3 ways to resolve the keys) and the issuer is supporting only one, two other mechanisms could be misused by an attacker",
          "createdAt": "2024-12-05T22:59:49Z",
          "updatedAt": "2024-12-05T22:59:49Z"
        },
        {
          "author": "babisRoutis",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hi @awoie , @bc-pi \r\n\r\nI was wondering the same. Have implemented this as follows:\r\n\r\n| Supported Method (Wallet/RP) | `iss` | Method Used                                  | \r\n|------------------------------|-------|----------------------------------------------|\r\n| issuer metadata              | HTTPS | issuer metadata, using `kid` if presented    |\r\n| `x5c`                        | HTTPS | `x5c` (SAN DNS or SAN URI), if `x5c` present |\r\n| x5c & issuer metadata        | HTTPS | `x5c` if there is `x5c`, metadata otherwise  |\r\n| `did` (outside of sd-jwt-vc scope) | DID| `did`, using optionally `kid` (DID URL) if present|\r\n\r\n\r\nIn all cases, at most one method is used, with no fallback on error.\r\n\r\nGiven that if `x5c`method is eligible, then issuer metadata is eligible,  I think that the former (`x5c`) must take precedence, if verifier/wallet support both.\r\n",
          "createdAt": "2024-12-05T23:01:53Z",
          "updatedAt": "2024-12-05T23:01:53Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> Given that if x5cmethod is eligible, then issuer metadata is eligible, I think that the former (x5c) must take precedence, if verifier/wallet support both.\r\n\r\nI think that's very reasonable @babisRoutis but the text in the draft needs some work and I'm sure could reasonably be interpreted differently. And there was some support/suggestion in yesterday's interim around having some explicit signal. Which probably/might have some relation to the concerns here https://mailarchive.ietf.org/arch/msg/oauth/ho6D8dc_7GQgJxwycS7khTM9_qw/. Some more thinking and/or work is needed in this area. ",
          "createdAt": "2024-12-10T21:51:57Z",
          "updatedAt": "2024-12-10T21:55:05Z"
        },
        {
          "author": "babisRoutis",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> > Given that if x5cmethod is eligible, then issuer metadata is eligible, I think that the former (x5c) must take precedence, if verifier/wallet support both.\r\n> \r\n> I think that's very reasonable @babisRoutis but the text in the draft needs some work and I'm sure could reasonably be interpreted differently. And there was some support/suggestion in yesterday's interim around having some explicit signal. Which probably/might have some relation to the concerns here https://mailarchive.ietf.org/arch/msg/oauth/ho6D8dc_7GQgJxwycS7khTM9_qw/. Some more thinking and/or work is needed in this area.\r\n\r\n@bc-pi Thanks for sharing this. \r\nHope that this will not end up with `issuer_id_scheme` :smile: \r\n",
          "createdAt": "2024-12-10T22:24:22Z",
          "updatedAt": "2024-12-10T22:24:22Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Ecosystems will likely define acceptable resolution methods and it makes no sense to have more than one, or if multiple are accepted, it makes at least no sense to use more than one. Therefore, this specification should not mandate any particular method. While I believe it does not, this should be explicitly clarified. Instead, the verifier (or ecosystem) should have the discretion to choose a method (based on ecosystem rules maybe), as long as the necessary information to obtain the public key is present in the credential.\n\nTo further clarify, we could specify that both `x5c` and `iss` are optional, allowing an issuer to provide only the `x5c` header for key resolution. In the case of `x5c`, I assume the issuer is read from the X.509 certificate anyway, meaning the `iss` value should be ignored. This would further allow us to remove the awkward restriction on SAN entries having to match the `iss` value which a lot of people don't check anyways (based on my experience in interop events).",
          "createdAt": "2025-03-21T10:33:23Z",
          "updatedAt": "2025-03-21T10:40:04Z"
        },
        {
          "author": "babisRoutis",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Dear @awoie \n\nWhat you propose, IMO, effectively will remove one of the strongest advantages of using sd-jwt-vc format. That is,  the ability to \"discover\" the issuer's pub key using one of the predefined options and streamline the validation of SD-JWT-VC.\n\nI believe that ultimately this will reduce interoperability.\n\nPS1: Interoperability events against rapidly changing drafts sounds like an oxymoron \ud83d\ude04 ",
          "createdAt": "2025-03-21T11:30:01Z",
          "updatedAt": "2025-03-21T11:30:01Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "> Dear [@awoie](https://github.com/awoie)\n> \n> What you propose, IMO, effectively will remove one of the strongest advantages of using sd-jwt-vc format. That is, the ability to \"discover\" the issuer's pub key using one of the predefined options and streamline the validation of SD-JWT-VC.\n> \n> I believe that ultimately this will reduce interoperability.\n> \n> PS1: Interoperability events against rapidly changing drafts sounds like an oxymoron \ud83d\ude04\n\nIMO, this would increase interoperability by having less options but I can see that is a bigger topic.\n\nHowever, to solve this particular issue, I still believe the following:\n\nThe Verifier is not required to use more than one key resolution option even if the Verifier can. It is at the discretion of the Verifier which option is acceptable and used.",
          "createdAt": "2025-03-21T12:35:21Z",
          "updatedAt": "2025-03-21T12:35:21Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "From experience, the signature profile should clearly define one key resolution approach (I consider embedded and referenced keys in same format and same verification logic as one method) .",
          "createdAt": "2025-03-21T12:38:52Z",
          "updatedAt": "2025-03-21T12:38:52Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "> From experience, the signature profile should clearly define one key resolution approach (I consider embedded and referenced keys in same format and same verification logic as one method) .\n\nIt would be also my preference if there is no ambiguity on the key resolution approach.",
          "createdAt": "2025-03-21T12:43:21Z",
          "updatedAt": "2025-03-21T12:43:21Z"
        },
        {
          "author": "peacekeeper",
          "authorAssociation": "NONE",
          "body": "> It would be also my preference if there is no ambiguity on the key resolution approach.\n\nThis is why DIDs include the key resolution approach (aka \"method\") as part of the identifier itself, to avoid the kind of ambiguity discussed here, while still allowing extensibility.",
          "createdAt": "2025-04-05T08:15:52Z",
          "updatedAt": "2025-04-05T08:15:52Z"
        }
      ]
    },
    {
      "number": 282,
      "id": "I_kwDOJbVClc6h5yvx",
      "title": "Add security considerations on when/what metadata is/can be trusted",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/282",
      "state": "OPEN",
      "author": "wbl",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "Ready-for-PR"
      ],
      "body": "I really don't get why SVG logos for individual fields is supported. Also I'm not sure about the value of this display metadata. Are people going to use it?",
      "createdAt": "2024-12-04T00:31:21Z",
      "updatedAt": "2025-09-16T15:21:22Z",
      "closedAt": null,
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "The title of this issue is not helpful. What is the problem with SVG?\r\n\r\nAnd there are no SVG logos for individual fields, just for the whole type.\r\n\r\nDisplay metadata is already in use in a couple of wallet implementations and I just yesterday spoke to a team implementing an EUDI wallet and they plan to use the display metadata mechanism.",
          "createdAt": "2024-12-04T08:00:10Z",
          "updatedAt": "2024-12-04T08:00:10Z"
        },
        {
          "author": "wbl",
          "authorAssociation": "NONE",
          "body": "So how do you deal with people copying logos?\r\n\r\nOn Wed, Dec 4, 2024, 12:00\u202fAM Daniel Fett ***@***.***> wrote:\r\n\r\n> The title of this issue is not helpful. What is the problem with SVG?\r\n>\r\n> And there are no SVG logos for individual fields, just for the whole type.\r\n>\r\n> Display metadata is already in use in a couple of wallet implementations\r\n> and I just yesterday spoke to a team implementing an EUDI wallet and they\r\n> plan to use the display metadata mechanism.\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/282#issuecomment-2516463130>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/AAISLY74GR3K2WW5WYYWL5T2D2ZCBAVCNFSM6AAAAABS66CKC6VHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDKMJWGQ3DGMJTGA>\r\n> .\r\n> You are receiving this because you authored the thread.Message ID:\r\n> ***@***.***>\r\n>\r\n",
          "createdAt": "2024-12-04T13:09:24Z",
          "updatedAt": "2024-12-04T13:09:24Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Sorry, is this still related to SVGs?",
          "createdAt": "2024-12-04T13:18:12Z",
          "updatedAt": "2024-12-04T13:18:12Z"
        },
        {
          "author": "wbl",
          "authorAssociation": "NONE",
          "body": "Yes. By putting in an element that's intended (and there's not a lot of\r\ntext about this) to be displayed directly to the user you raise the issue\r\nof Issuer A using a logo associated with Issuer B. Do verifiers need to not\r\ndisplay the logos to users?\r\n\r\nOn Wed, Dec 4, 2024, 5:18\u202fAM Daniel Fett ***@***.***> wrote:\r\n\r\n> Sorry, is this still related to SVGs?\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/282#issuecomment-2517324734>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/AAISLY243R7IFB565LEHMKL2D36KXAVCNFSM6AAAAABS66CKC6VHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDKMJXGMZDINZTGQ>\r\n> .\r\n> You are receiving this because you authored the thread.Message ID:\r\n> ***@***.***>\r\n>\r\n",
          "createdAt": "2024-12-04T13:27:22Z",
          "updatedAt": "2024-12-04T13:27:22Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I think the real question here is - why should anyone trust metadata in general? How can a wallet know that the content is fine to display to the user? This is what must be addressed in the specification. I'll change the title accordingly.\r\n\r\nIf there are any issues specific to the <i>format</i> of the logo, please file a separate issue.",
          "createdAt": "2024-12-09T17:22:03Z",
          "updatedAt": "2024-12-09T17:22:03Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "Metadata is information asserted by the issuer (hence, should be integrity protected, which I believe it is). Issuer must be trusted for the information (credential or the metadata) to be trusted.",
          "createdAt": "2024-12-09T21:20:56Z",
          "updatedAt": "2024-12-09T21:20:56Z"
        },
        {
          "author": "wbl",
          "authorAssociation": "NONE",
          "body": "I can trust Alice Co to produce its corporate ids. I can't trust them to create Bob co's corporate ids. Trust is not an absolute, and the text indicating anything about this is not in the security considerations sections and would need to be.",
          "createdAt": "2024-12-09T21:26:44Z",
          "updatedAt": "2024-12-09T21:26:44Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "This is why usually accreditations are introduced (they limit the scope of attestations - e.g., you can only attest information about own employees). Authors will know whether that's in scope or not.",
          "createdAt": "2024-12-09T21:30:10Z",
          "updatedAt": "2024-12-09T21:30:10Z"
        },
        {
          "author": "wbl",
          "authorAssociation": "NONE",
          "body": "Once again, that's not in the Security Considerations section. If we wanted it in there we should say \"verifiers MUST NOT trust issuers that cannot be trusted to assert anything they please\".  We should be explicit this is for a very closed system. That's not compatible with a DID world.\r\n\r\nSecondly, the accredation is by definition reactive: it looks at policies that existed in the past and are in place. That's not as good as preventing the issue. \r\n\r\nWe've been through these issues with X509 and browser UI and certificates. We learned a lot. And logos are I think very powerful ways to misdirect users. People will learn to look for them, and then get fooled.",
          "createdAt": "2024-12-09T21:37:28Z",
          "updatedAt": "2024-12-09T21:37:28Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "If I understand correctly, there are two topics to cover\r\n- identity of the issuer (is the issuer identity self-asserted or is attested by a 3rd party; if so, under which identity framework)\r\n- what claims the issuer can make about the user\r\n?",
          "createdAt": "2024-12-09T21:48:44Z",
          "updatedAt": "2024-12-09T21:48:44Z"
        },
        {
          "author": "wbl",
          "authorAssociation": "NONE",
          "body": "That's a different issue, which also should be raised or discussed somewhere. Metadata isn't claims per se. But if you e.g. have a logo that gets displayed, that can be interpreted by a user as a claim. ",
          "createdAt": "2024-12-09T21:55:00Z",
          "updatedAt": "2024-12-09T21:55:00Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "Today (at least in eIDAS) signer/issuer information is always expressed in an x509 certificate issued by a trusted authority (issuer/signer information is never self-asserted); Logo could be one of the 'issuer' claims, which brings us to the question: which metadata claims can be made by the issuer.\r\n\r\nIn governed ecosystems, probably only few, if any, as regulation defines what claims an issuer can make about the user.",
          "createdAt": "2024-12-09T22:08:37Z",
          "updatedAt": "2024-12-09T22:08:37Z"
        },
        {
          "author": "wbl",
          "authorAssociation": "NONE",
          "body": "And once again, that is not in the four corners of the text here. I think this is something that also needs to go on the list.",
          "createdAt": "2024-12-09T22:10:57Z",
          "updatedAt": "2024-12-09T22:10:57Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Good discussion and some of the suggestions should be reflected in the security considerations section. I mark this as ready for PR.",
          "createdAt": "2025-09-16T15:21:15Z",
          "updatedAt": "2025-09-16T15:21:15Z"
        }
      ]
    },
    {
      "number": 283,
      "id": "I_kwDOJbVClc6iaZVJ",
      "title": "The wording \"Verifiable Credentials\" should be changed into \"Digital Credentials\"",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/283",
      "state": "OPEN",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Section 3.1 states:\r\n\r\n>    SD-JWT VCs compliant with this specification MUST use the media type application/dc+sd-jwt as defined in Section 3.1.\r\n> \r\n>    The base subtype name dc is meant to stand for \"digital credential\", which is a term that is emerging as a conceptual synonym for\r\n>    \"verifiable credential\".\r\n\r\nThis change is significant and welcomed. \"Verifiable Credential\" is a term used in VCDM 2.0. It has a W3C connotation.\r\n\r\nIn VCDM 2.0 a Verifiable Credential is defined as:\r\n\r\n> A tamper-evident credential whose authorship can be cryptographically verified. Verifiable credentials can be used to build verifiable presentations, which can also be cryptographically verifiable. \r\n\r\nwhile a Verifiable Presentation is defined as:\r\n\r\n> A tamper-evident presentation of information encoded in such a way that authorship of the data can be trusted after a process of cryptographic verification. Certain types of verifiable presentations might contain data that is synthesized from, but does not contain, the original verifiable credentials (for example, zero-knowledge proofs).\r\n\r\nThese definitions are not crystal clear.\r\n\r\nThe acronym DC should be used everywhere including in the title of this draft. \r\n\r\nThe wording \"SD-JWT-based Verifiable Credentials (SD-JWT VC)\" should be changed into: \r\n\r\n> \"SD-JWT-based Digital Credentials (SD-JWT DC)\".\r\n\r\nThe name of the draft should be changed into:\r\n\r\n> draft-ietf-oauth-sd-jwt-dc\r\n",
      "createdAt": "2024-12-07T21:54:13Z",
      "updatedAt": "2024-12-07T21:54:13Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 284,
      "id": "I_kwDOJbVClc6iaZqU",
      "title": "A statement about \"Verifiable Credentials\" should be changed",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/284",
      "state": "OPEN",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Section 1.1 states:\r\n\r\n> Verifiable Credentials are cryptographically secured statements about a Subject, typically the Holder.\r\n\r\nThis sentence is confusing as it does not distinguish between the Holder which is an application and a Subject which is usually an individual who has the control of the Holder.\r\n\r\nIt should be changed into:\r\n\r\n> Digital Credentials are cryptographically secured statements about a Subject issued by a Digital Credential Issuer.\r\n> \r\n> A Holder is an application placed under the control of a Subject that receives a Digital Credential from a Digital Credential Issuer and when selectively disclosure is supported add Selected Disclosures and optionally a Key Binding Token.\r\n> \r\n> A Key Binding Token allows the Verifier to know that the private key corresponding to a public key which is present in the Digital Credential has been used to create it. When selective disclosure is used, both the Digital Credential and the Selected Disclosures, if any, are integrity protected under that private key.\r\n> ",
      "createdAt": "2024-12-07T21:59:16Z",
      "updatedAt": "2024-12-07T21:59:16Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 285,
      "id": "I_kwDOJbVClc6iaZ-o",
      "title": "Figure 1  Issuer-Holder-Verifier Model should be modified",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/285",
      "state": "OPEN",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "```\r\n\r\n            +------------+\r\n            |            |\r\n            |   Issuer   |\r\n            |            |\r\n            +------------+\r\n                  |\r\n         Issues Digital Credentials\r\n         and All Disclosures when \r\n    selectively disclosure is supported\r\n                  |\r\n                  v\r\n            +------------+\r\n            |            |\r\n            |   Holder   |<---- Subject\r\n            |            |\r\n            +------------+\r\n                  |\r\n  Presents Digital Credential + Selected Disclosures\r\n     when selectively disclosure is supported\r\n       + optional Key Binding Token\r\n                  |\r\n                  v\r\n            +-------------+\r\n            |             |+                              +------------+\r\n            |  Verifiers  ||+ ----- optional use -------> |   Status   |\r\n            |             |||  of Token Status Lists      |  Provider  |\r\n            +-------------+||  to retrieve the status     |            |\r\n             +-------------+|  of the Digital Credential  +------------+\r\n              +-------------+\r\n```\r\n\r\n\r\n\r\n\r\nNote that the wording:\r\n\r\n> optionally retrieve status of Verifiable Credential \r\n\r\nhas been replaced by:\r\n\r\n> optional use of Token Status Lists to retrieve the status of the Digital Credential\r\n\r\nThis change is important as the current wording may let think that a Status provider is necessarily needed to know the status of a Digital Credential, whereas it is not the case.\r\n\r\n",
      "createdAt": "2024-12-07T22:03:28Z",
      "updatedAt": "2025-09-30T11:40:05Z",
      "closedAt": null,
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Status and Status Provide probably don't need this level of coverage in this draft. The inclusion of the `status` claim with reference to [I-D.ietf-oauth-status-list](https://drafts.oauth.net/oauth-sd-jwt-vc/draft-ietf-oauth-sd-jwt-vc.html#I-D.ietf-oauth-status-list) is arguably sufficient. ",
          "createdAt": "2025-09-23T15:38:57Z",
          "updatedAt": "2025-09-30T11:40:05Z"
        }
      ]
    },
    {
      "number": 286,
      "id": "I_kwDOJbVClc6iaahG",
      "title": "Suspension and revocation of Digital Credentials",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/286",
      "state": "OPEN",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "pending close",
        "future-extension",
        "policy"
      ],
      "body": "The end of section 1.1 states:\r\n\r\n>    To support revocation of Verifiable Credentials, revocation information can optionally be retrieved from a Status Provider.  The\r\n>    role of a Status Provider can be fulfilled by either a fourth party or by the Issuer.\r\n> \r\n\r\nBoth suspension and revocation of Digital Credentials should be mentioned. It should also be observed that the suspension or the revocation of Digital Credentials does not need necessarily involve a Status Provider.\r\n\r\nSince Digital Credentials are hosted by a Holder which is an application, that application can contact the Issuer of the Digital Credential and be instructed by the Issuer to suspend or to stop (i.e. revoke) the use of a Digital Credential. \r\n\r\nIt is proposed to change the end of this section into:\r\n\r\n>    If the suspension or the revocation of a Digital Credential is  supported, an information SHALL be included into the Digital \r\n>    Credential.\r\n> \r\n>    If Token Status Lists are used, then a specific claim (i.e., status) shall be included into the Digital Credential to indicate that this \r\n>   mechanism  is supported.\r\n> \r\n>    If a \"Digital Credential Policy\", analogous to a \"Certificate Policy\" for X.509 certificate, is included into the Digital Credential, then \r\n>    in some cases, the characteristics of the Holder can be known by the Verifier.  In this way, the Verifier can be able to know that the \r\n>    Holder will contact the Issuer of the Digital Credential from time  to time and can be instructed by the Issuer to suspend or to stop \r\n>    (i.e. revoke) the use of a Digital Credential, when necessary. \r\n> \r\n>    If the Holder is unable to contact an Issuer during a defined period of time, e.g. 24 hours, the Holder will suspend all the Digital \r\n>    Credentials  issued by that issuer. When a Digital Credential  has been suspended, the process can be reversed. However, when a \r\n>   Digital Credential  has been invalidated (e.g., revoked),  the process  cannot be reversed. \r\n",
      "createdAt": "2024-12-07T22:11:04Z",
      "updatedAt": "2025-09-16T22:43:12Z",
      "closedAt": null,
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Similar to https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/212 and https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/319 and #325 there doesn't seem to be a clearly preferred (or workable) way to express policy (even if you call it \"Digital Credential Policy\") in the credential itself or even if such policy is necessary or appropriate in the credential. A future or ecosystem specific profile or extension or even type can define (or not) what makes sense in the given context. But, in the interest of moving forward, it's out of scope for (this version of) this specification. ",
          "createdAt": "2025-09-16T22:43:01Z",
          "updatedAt": "2025-09-16T22:43:01Z"
        }
      ]
    },
    {
      "number": 287,
      "id": "I_kwDOJbVClc6iabKk",
      "title": "The following sentence would need to be clarified and reworded",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/287",
      "state": "OPEN",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "pending close"
      ],
      "body": "On page 5, section 1.2 , the text states:\r\n\r\n> However, SD-JWT itself does not define the claims that must be used within the payload or their semantics.\r\n\r\n\r\nPlease, reword it.\r\n",
      "createdAt": "2024-12-07T22:20:18Z",
      "updatedAt": "2025-09-23T15:33:06Z",
      "closedAt": null,
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "\n> On page 5, section 1.2 , the text states:\n> \n> > However, SD-JWT itself does not define the claims that must be used within the payload or their semantics.\n> \n> Please, reword it.\n\nReword it to what? And why? ",
          "createdAt": "2025-09-23T15:33:06Z",
          "updatedAt": "2025-09-23T15:33:06Z"
        }
      ]
    },
    {
      "number": 288,
      "id": "I_kwDOJbVClc6iabRn",
      "title": "The definition of \"Verifiable Credential (VC)\"should be replaced by a definition of \"Digital Credential (DC)\"",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/288",
      "state": "OPEN",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The current definition is :\r\n\r\n> Verifiable Credential (VC):  An assertion with claims about a Subject that is cryptographically secured by an Issuer (usually by a digital signature).\r\n\r\nThe following change is proposed:\r\n\r\n> Digital Credential (DC): cryptographically secured statements about a Subject issued by a Digital Credential Issuer.\r\n",
      "createdAt": "2024-12-07T22:21:52Z",
      "updatedAt": "2024-12-07T22:21:52Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 289,
      "id": "I_kwDOJbVClc6iabqI",
      "title": "The SD-JWT DC does not CONTAIN the Key Binding JWT",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/289",
      "state": "OPEN",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Section 3.2 states:\r\n\r\n> SD-JWT VCs MUST be encoded using the SD-JWT format defined in Section 5 of [I-D.ietf-oauth-selective-disclosure-jwt].  A presentation of an SD-JWT VC MAY contain a Key Binding JWT.\r\n> \r\n> Note that in some cases, an SD-JWT VC MAY have no selectively disclosable claims, and therefore the encoded SD-JWT will not contain any Disclosures.\r\n\r\nThe SD-JWT DC does not CONTAIN the Key Binding JWT. See the revised Figure 1. See #285.\r\nHowever, a SD-JWT VC CAN be ASSOCIATED with a Key Binding JWT\r\n\r\nThe following changes are proposed:\r\n\r\n> A presentation of an SD-JWT DC CAN be associated with a Key Binding JWT.\r\n> \r\n> Note that in some cases, an SD-JWT DC MAY have no selectively disclosable claims, and therefore the encoded SD-JWT will not be associated with any Disclosures.\r\n> \r\n",
      "createdAt": "2024-12-07T22:27:24Z",
      "updatedAt": "2024-12-16T17:27:23Z",
      "closedAt": null,
      "comments": [
        {
          "author": "babisRoutis",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Although, I agree with the proposed idea (I also think that SD-JWT doesn't contain a KB-JWT, rather a KB-JWT may be associated to an SD-JWT presentation), yet I feel that this proposal should target SD-JWT and not SD-JWT-VC.\r\n\r\n\r\n\r\n",
          "createdAt": "2024-12-16T17:27:20Z",
          "updatedAt": "2024-12-16T17:27:20Z"
        }
      ]
    },
    {
      "number": 290,
      "id": "I_kwDOJbVClc6iab3O",
      "title": "Add a new claim called \"dcpol\" for \"Digital Credential Policy\"",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/290",
      "state": "CLOSED",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "In section 3.2.2.2.  Registered JWT Claims.\r\nAfter :\r\n\r\n> \r\n>    *  status\r\n>       -  OPTIONAL.\r\n\r\nAdd the following claim:\r\n\r\n>    *  dcpol\r\n>       -  OPTIONAL.  The Digital Credential Policy under which the Digital Credential has been issued by the Issuer.\r\n",
      "createdAt": "2024-12-07T22:30:15Z",
      "updatedAt": "2025-09-16T15:28:31Z",
      "closedAt": "2025-09-16T15:28:31Z",
      "comments": [
        {
          "author": "wbl",
          "authorAssociation": "NONE",
          "body": "What's a Digital Credential Policy? This would need a lot more text to explain the semantics.",
          "createdAt": "2024-12-11T18:37:19Z",
          "updatedAt": "2024-12-11T18:37:19Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this issue since https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/325 is a duplicate and contains more info.",
          "createdAt": "2025-09-16T15:28:31Z",
          "updatedAt": "2025-09-16T15:28:31Z"
        }
      ]
    },
    {
      "number": 291,
      "id": "I_kwDOJbVClc6iac1E",
      "title": "Support of the suspension or of the revovation of  a Digital Credential without using the status claim",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/291",
      "state": "OPEN",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "pending close",
        "policy"
      ],
      "body": "In section 3.4 , the text states:\r\n\r\n>    If status is present in the verified payload of the SD-JWT, the\r\n>    status SHOULD be checked.  It depends on the Verifier policy to\r\n>    reject or accept a presentation of a SD-JWT VC based on the status of\r\n>    the Verifiable Credential.\r\n\r\nAnother sentence should be added:\r\n\r\n> If dcpol is present in the verified payload of the SD-JWT, the Digital Credential Policy under which the Digital Credential has been issued by the Issuer SHOULD be considered by the Verifier.  When the Verifier is able to derive from it the characteristics of the Holder, the Verifier can know that the presentation of the Digital Credential to the Verifier by the Holder has not been suspended nor invalided by the Digital Credential Issuer. It depends on the Verifier policy to reject or accept a presentation of a SD-JWT DC when this claim is present.\r\n",
      "createdAt": "2024-12-07T22:43:55Z",
      "updatedAt": "2025-09-16T22:45:46Z",
      "closedAt": null,
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "dcpol isn't defined anywhere nor is this draft likely to define it ",
          "createdAt": "2025-09-16T22:45:46Z",
          "updatedAt": "2025-09-16T22:45:46Z"
        }
      ]
    },
    {
      "number": 293,
      "id": "I_kwDOJbVClc6k2lGi",
      "title": "Risk of issuer monitoring with jwt-vc-issuer metadata",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/293",
      "state": "OPEN",
      "author": "cre8",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "In case the the credential includes a link to the hosted metadata, the relying party will fetch it like:\r\n```\r\nGET /.well-known/jwt-vc-issuer HTTP/1.1\r\nHost: example.com\r\n```\r\n\r\nA malicious issuer could add unique subdomains to add a tracker, e.g. the jti value or another internal identifier `<jti>.exmaple.com/.well-known/jwt-vc-issuer`. This can not be detected by the relying party since the url of the `jwks_uri` must not match with the same host as the vct value (or the issuer uses an x509 that must also not be bound to a domain, or maybe it's a wildcard one).\r\n\r\nSuggestion:\r\nAdd a privacy consideration note that this can be used for presentation tracking. An alternative suggestion would be to allow the Wallet to include the vct issuer metadata into the e.g. presentation response when using OID4VP. In this case the issuer may only know that the wallet is presenting a credential, when the VCT it was not cached before (in case an integrity value was provided, the wallet can be sure it never has an outdated version of the vct values).",
      "createdAt": "2025-01-02T10:20:00Z",
      "updatedAt": "2025-06-10T18:24:08Z",
      "closedAt": null,
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> could add unique subdomains to add a tracker, e.g. the jti value or another internal identifier `<jti>.exmaple.com/.well-known/jwt-vc-issuer`.\n\nis exmaple.com a site for Canadian expats?\n\n",
          "createdAt": "2025-06-10T18:24:07Z",
          "updatedAt": "2025-06-10T18:24:07Z"
        }
      ]
    },
    {
      "number": 297,
      "id": "I_kwDOJbVClc6m2wpp",
      "title": "Say something about presentations if KB-JWT is not used",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/297",
      "state": "OPEN",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Section 4 only says something about if the presentation contains a KB-JWT:\nhttps://drafts.oauth.net/oauth-sd-jwt-vc/draft-ietf-oauth-sd-jwt-vc.html#section-4\n\nA reader that is not familiar with SD-JWT will probably appreciate guidance on presentations not containing KB-JWT.",
      "createdAt": "2025-01-20T14:10:36Z",
      "updatedAt": "2025-01-20T14:10:36Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 301,
      "id": "I_kwDOJbVClc6ue3-u",
      "title": "Claim vocabulary for PID?",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/301",
      "state": "CLOSED",
      "author": "dwaite",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "I noticed several unregistered claims in the example, including values like `age_equal_or_over`. My understanding is that these are related to a particular EIDAS PID credential type. \n\nI wasn't able to find a source document though - are these claims documented anyplace yet?",
      "createdAt": "2025-03-18T06:30:01Z",
      "updatedAt": "2025-06-03T18:28:42Z",
      "closedAt": "2025-06-03T18:28:41Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Yes and no, as there is no official list of SD-JWT VC claims for a PID yet. There's [my pull request on the ARF](https://github.com/eu-digital-identity-wallet/eudi-doc-architecture-and-reference-framework/pull/160/files) that uses some similar claims, but it is not sure if that is exactly what will end up in the final ARF. However, there's now [this discussion paper](https://github.com/eu-digital-identity-wallet/eudi-doc-architecture-and-reference-framework/blob/main/docs/discussion-topics/v-pid-rulebook.md#61-high-level-requirements-to-be-added) which paves the way for integrating either my PR or similar text into the ARF.\n\nHowever, I noticed the that the current spec text is not unambiguous on whether private claim names can be used. I'll fix that.",
          "createdAt": "2025-03-21T09:17:48Z",
          "updatedAt": "2025-03-21T09:17:48Z"
        },
        {
          "author": "babisRoutis",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Dear @dwaite \nPlease take a look [here](https://eu-digital-identity-wallet.github.io/eudi-doc-architecture-and-reference-framework/latest/annexes/annex-3/annex-3.01-pid-rulebook/)",
          "createdAt": "2025-05-30T05:49:58Z",
          "updatedAt": "2025-05-30T05:49:58Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "@babisRoutis has linked to the (now \"official\") source for the claims. There is no intention to register the claims here (or elsewhere, as far as I can tell).",
          "createdAt": "2025-06-03T18:28:41Z",
          "updatedAt": "2025-06-03T18:28:41Z"
        }
      ]
    },
    {
      "number": 302,
      "id": "I_kwDOJbVClc6unM81",
      "title": "Add security consideration: Extending a type doesn't imply authorization to issue the type",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/302",
      "state": "CLOSED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "HAS PR"
      ],
      "body": "Example:\n- there's a european PID type \"urn:ec.eu.x.y.z\" and a national type \"urn:de.bla\" that extends \"urn:ec.eu.x.y.z\"\n- a rogue issuer issues a credential \"urn:attacker\" that extends either \"urn:ec.eu.x.y.z\" or \"urn:ec.eu.x.y.z\"\n- it is now important that verifiers/wallets don't accept these credentials. the fact that someone issued a credential extending a known type does not imply that they are allowed to do so (or that they are a valid issuer at all)\n\nThis should be captured in a security consideration, ideally also in processing rules.",
      "createdAt": "2025-03-18T18:37:39Z",
      "updatedAt": "2025-09-02T19:10:36Z",
      "closedAt": "2025-09-02T19:10:36Z",
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "This sounds reasonable.",
          "createdAt": "2025-06-03T18:26:49Z",
          "updatedAt": "2025-06-03T18:26:49Z"
        }
      ]
    },
    {
      "number": 305,
      "id": "I_kwDOJbVClc6vyaxc",
      "title": "Support PNG background besides just color or SVG",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/305",
      "state": "CLOSED",
      "author": "grausof",
      "authorAssociation": "NONE",
      "assignees": [
        "cre8"
      ],
      "labels": [
        "enhancement",
        "Ready-for-PR"
      ],
      "body": "For the \"simple\" rendering method in addition to supporting the `background_color` it could be a good idea to also support a `background_image` for those credentials that already have a **well-defined background** obviously going to specify the different dimensions and resolutions to support as for example is done for iOS and Android Wallets (see https://developer.apple.com/design/human-interface-guidelines/wallet). \n\nThe use of SVG is very complex and also requires a very high computational load for the rendering of complex objects or with many shades just think of the background of a national identity card.",
      "createdAt": "2025-03-26T11:18:33Z",
      "updatedAt": "2025-10-02T16:56:00Z",
      "closedAt": "2025-10-02T16:56:00Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "That seems like a reasonable thing to do. Feel free to create a PR if you want.",
          "createdAt": "2025-06-03T18:27:36Z",
          "updatedAt": "2025-06-03T18:27:36Z"
        },
        {
          "author": "cre8",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I can work on this. By adding variants of the background image (one option for dark ui, one for light), I would also update the logo property since some of the features are also relevant for it",
          "createdAt": "2025-08-20T06:50:27Z",
          "updatedAt": "2025-08-20T06:50:27Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "> I can work on this. By adding variants of the background image (one option for dark ui, one for light), I would also update the logo property since some of the features are also relevant for it\n\n@cre8 are you still intending to do a PR?",
          "createdAt": "2025-09-16T15:31:28Z",
          "updatedAt": "2025-09-16T15:31:28Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> > I can work on this. By adding variants of the background image (one option for dark ui, one for light), I would also update the logo property since some of the features are also relevant for it\n> \n> [@cre8](https://github.com/cre8) are you still intending to do a PR?\n\n\"[cre8](https://github.com/cre8)\nlinked a pull request that will close this issue [3 weeks ago](https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/305#event-3135205203)\n\n[fix: update logo and background structure #335](https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/335)\"\n",
          "createdAt": "2025-09-16T15:41:57Z",
          "updatedAt": "2025-09-16T15:41:57Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "[#358](https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/358) fixes this ",
          "createdAt": "2025-10-02T16:56:00Z",
          "updatedAt": "2025-10-02T16:56:00Z"
        }
      ]
    },
    {
      "number": 307,
      "id": "I_kwDOJbVClc6zAuW_",
      "title": "cnf, x5c, or other public key certificates",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/307",
      "state": "CLOSED",
      "author": "alenhorvat",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Dear,\n\ncongratulations for the amazing work on the specification.\n\n`cnf` is a nice mechanism to bind a public key to a credential.\nThere are cases, where additional information about the public key may be provided (in x509 or other format); where and how such public key certificate/credential should be provided/signalled?\nWithin the JWK.x5c claim?\n\nThank you.",
      "createdAt": "2025-04-17T19:46:07Z",
      "updatedAt": "2025-04-30T23:07:39Z",
      "closedAt": "2025-04-30T23:07:38Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Dear, \nCan you provide a more concrete example? \nThank you.",
          "createdAt": "2025-04-28T11:57:56Z",
          "updatedAt": "2025-04-28T11:57:56Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "Public key today in many ecosystems come with an accompanying x509 certificate, for example.\ncnf allows issuers to express a fact that a certain public key can be used for proof of possession purposes.\n\nWhile JWK has the syntax to limit the use, my question is, if additional public key assertions need to be made (e.g., that a key is coming from a certified HSM), what mechanism should be used?",
          "createdAt": "2025-04-28T12:23:39Z",
          "updatedAt": "2025-04-28T12:23:55Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Sounds like this could be a (generic) extension for the cnf syntax.",
          "createdAt": "2025-04-28T12:36:18Z",
          "updatedAt": "2025-04-28T12:36:18Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "Maybe we can narrow down the case to:\nif the cnf public key comes with an x509 cert, should the x5c jwk claim be used?",
          "createdAt": "2025-04-28T12:49:34Z",
          "updatedAt": "2025-04-28T12:49:34Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I realize it might seems pedantic, but there is no \"x5c jwk claim\" or \"JWK.x5c claim\".  I can sort of guess as to what's intended. But I don't know. And I don't really want to guess. That, but not only that, makes it difficult to engage in a productive discussion. ",
          "createdAt": "2025-04-28T19:39:04Z",
          "updatedAt": "2025-04-28T19:39:04Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "I would like to apologise for the confusion. Would \"JWK x5c parameter\" would be a more precise term?\n\nI re-read the specification:\nhttps://datatracker.ietf.org/doc/html/rfc7517#section-4.7\n\nAnd there's an example in the Appendix B:\n\nExample Use of \"x5c\" (X.509 Certificate Chain) Parameter\n\n   The following is an example of a JWK with a RSA signing key\n   represented both as an RSA public key and as an X.509 certificate\n   using the \"x5c\" parameter (with line breaks within values for display\n   purposes only):\n\n     {\"kty\":\"RSA\",\n      \"use\":\"sig\",\n      \"kid\":\"1b94c\",\n      \"n\":\"vrjOfz9Ccdgx5nQudyhdoR17V-IubWMeOZCwX_jj0hgAsz2J_pqYW08\n      PLbK_PdiVGKPrqzmDIsLI7sA25VEnHU1uCLNwBuUiCO11_-7dYbsr4iJmG0Q\n      u2j8DsVyT1azpJC_NG84Ty5KKthuCaPod7iI7w0LK9orSMhBEwwZDCxTWq4a\n      YWAchc8t-emd9qOvWtVMDC2BXksRngh6X5bUYLy6AyHKvj-nUy1wgzjYQDwH\n      MTplCoLtU-o-8SNnZ1tmRoGE9uJkBLdh5gFENabWnU5m1ZqZPdwS-qo-meMv\n      VfJb6jJVWRpl2SUtCnYG2C32qvbWbjZ_jBPD5eunqsIo1vQ\",\n      \"e\":\"AQAB\",\n      \"x5c\":\n       [\"MIIDQjCCAiqgAwIBAgIGATz/FuLiMA0GCSqGSIb3DQEBBQUAMGIxCzAJB\n       gNVBAYTAlVTMQswCQYDVQQIEwJDTzEPMA0GA1UEBxMGRGVudmVyMRwwGgYD\n       VQQKExNQaW5nIElkZW50aXR5IENvcnAuMRcwFQYDVQQDEw5CcmlhbiBDYW1\n       wYmVsbDAeFw0xMzAyMjEyMzI5MTVaFw0xODA4MTQyMjI5MTVaMGIxCzAJBg\n       NVBAYTAlVTMQswCQYDVQQIEwJDTzEPMA0GA1UEBxMGRGVudmVyMRwwGgYDV\n       QQKExNQaW5nIElkZW50aXR5IENvcnAuMRcwFQYDVQQDEw5CcmlhbiBDYW1w\n       YmVsbDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAL64zn8/QnH\n       YMeZ0LncoXaEde1fiLm1jHjmQsF/449IYALM9if6amFtPDy2yvz3YlRij66\n       s5gyLCyO7ANuVRJx1NbgizcAblIgjtdf/u3WG7K+IiZhtELto/A7Fck9Ws6\n       SQvzRvOE8uSirYbgmj6He4iO8NCyvaK0jIQRMMGQwsU1quGmFgHIXPLfnpn\n       fajr1rVTAwtgV5LEZ4Iel+W1GC8ugMhyr4/p1MtcIM42EA8BzE6ZQqC7VPq\n       PvEjZ2dbZkaBhPbiZAS3YeYBRDWm1p1OZtWamT3cEvqqPpnjL1XyW+oyVVk\n       aZdklLQp2Btgt9qr21m42f4wTw+Xrp6rCKNb0CAwEAATANBgkqhkiG9w0BA\n       QUFAAOCAQEAh8zGlfSlcI0o3rYDPBB07aXNswb4ECNIKG0CETTUxmXl9KUL\n       +9gGlqCz5iWLOgWsnrcKcY0vXPG9J1r9AqBNTqNgHq2G03X09266X5CpOe1\n       zFo+Owb1zxtp3PehFdfQJ610CDLEaS9V9Rqp17hCyybEpOGVwe8fnk+fbEL\n       2Bo3UPGrpsHzUoaGpDftmWssZkhpBJKVMJyf/RuP2SmmaIzmnw9JiSlYhzo\n       4tpzd5rFXhjRbg4zW9C+2qok+2+qDM1iJ684gPHMIY8aLWrdgQTxkumGmTq\n       gawR+N5MDtdPTEQ0XfIBc2cJEUyMTY5MPvACWpkA6SdS4xSvdXK3IVfOWA==\"]\n     }\n",
          "createdAt": "2025-04-29T11:33:55Z",
          "updatedAt": "2025-04-29T11:42:07Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "There is a `x5c` Parameter on JWK (https://datatracker.ietf.org/doc/html/rfc7517#section-4.7 that you linked to previously) and there is a `jwk` confirmation method (https://datatracker.ietf.org/doc/html/rfc7800#section-3.2) that \"MAY contain other JWK members\" so one could certainly put an `x5c` member on the `jwk` member on the `cnf` claim. I don't think that meaningful or useful behavior is defined or should be expected for such, however. \n\nThere is a registered (https://www.iana.org/assignments/jwt/jwt.xhtml#confirmation-methods) `x5t#S256` X.509 Certificate SHA-256 Thumbprint confirmation method (https://www.rfc-editor.org/rfc/rfc8705.html#section-3.1) that facilitates binding to (a hash of) a certificate.  Maybe that comes closer to suiting your needs? \n\nNone of this is specific to SD-JWT or SD-JWT VC though.   ",
          "createdAt": "2025-04-30T20:04:10Z",
          "updatedAt": "2025-04-30T20:14:20Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "This answers my question. We went with the x5t#S256 (yesterday).\n\nThank you!",
          "createdAt": "2025-04-30T20:12:04Z",
          "updatedAt": "2025-04-30T20:12:04Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Great! ",
          "createdAt": "2025-04-30T23:07:38Z",
          "updatedAt": "2025-04-30T23:07:38Z"
        }
      ]
    },
    {
      "number": 308,
      "id": "I_kwDOJbVClc6z-04Y",
      "title": "Document integrity examples use wrong Base64url encoding",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/308",
      "state": "CLOSED",
      "author": "Iskander508",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "good first issue",
        "Ready-for-PR"
      ],
      "body": "The examples of `<uri_claim>#integrity` claims throughout the spec use Base64url encoding (with `-` and `_` chars):\n```\n\"vct#integrity\": \"sha256-WRL5ca_xGgX3c1VLmXfh-9cLlJNXN-TsMk-PmKjZ5t0\"\n...\n\"extends#integrity\":\"sha256-9cLlJNXN-TsMk-PmKjZ5t0WRL5ca_xGgX3c1VLmXfh-WRL5\",\n...\n\"schema_uri#integrity\":\"sha256-o984vn819a48ui1llkwPmKjZ5t0WRL5ca_xGgX3c1VLmXfh\"\n```\n\nbut the [referenced spec \"Subresource integrity\"](https://www.w3.org/TR/sri/#base64-encoding) uses the classic Base64 encoding with padding (with `+` and `/` chars):\n```\nsha384-+/M6kredJcxdsqkczBUjMLvqyHb1K/JThDXWsBVxMEeZHEaMKEOEct339VItX1zB\n...\nsha384-H8BRh8j48O9oYatfu5AZzq6A9RINhZO5H16dQZngK7T62em8MUt1FLm52t+eX6xO\n...\nsha384-H8BRh8j48O9oYatfu5AZzq6A9RINhZO5H16dQZngK7T62em8MUt1FLm52t+eX6xO\nsha512-Q2bFTOhEALkN8hOms2FKTDLy7eugP2zFZ1T8LCvX42Fp3WoNr3bjZSAHeOsHrbV1Fu9/A0EzCinRE7Af1ofPrw==\n```\n\nThis mismatch could result in incompatible implementations.",
      "createdAt": "2025-04-25T10:00:47Z",
      "updatedAt": "2025-06-24T19:11:09Z",
      "closedAt": "2025-06-24T19:11:09Z",
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "That is correct and should be fixed.",
          "createdAt": "2025-06-03T18:25:54Z",
          "updatedAt": "2025-06-03T18:25:54Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "On looking closer, it seems some of the values are not the correct length either. I'm going to assume that's just due to mistake and will fix that as well. ",
          "createdAt": "2025-06-23T20:38:30Z",
          "updatedAt": "2025-06-23T20:38:30Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #318 aspires to fix this and acknowledge @Iskander508 ",
          "createdAt": "2025-06-23T21:05:23Z",
          "updatedAt": "2025-06-23T21:05:23Z"
        }
      ]
    },
    {
      "number": 309,
      "id": "I_kwDOJbVClc60SNU2",
      "title": "Update intro text to PID example",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/309",
      "state": "CLOSED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "The PID example in SD-JWT and SD-JWT VC was updated to the latest PID format. In SD-JWT VC, the intro sentence to that example should be updated to have the same information as the one from SD-JWT.",
      "createdAt": "2025-04-28T11:45:32Z",
      "updatedAt": "2025-05-27T18:06:03Z",
      "closedAt": "2025-05-27T18:06:03Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Fixed in #306 ",
          "createdAt": "2025-05-27T18:05:51Z",
          "updatedAt": "2025-05-27T18:05:51Z"
        }
      ]
    },
    {
      "number": 310,
      "id": "I_kwDOJbVClc63ZzTg",
      "title": "Should `mandatory` be added to claim metadata?",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/310",
      "state": "CLOSED",
      "author": "babisRoutis",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "enhancement",
        "HAS PR",
        "schema"
      ],
      "body": "Currently, (sd-jwt-vc draft 8 and openid4vci draft 15) there is the following between credential issuer metadata and sd-jwt-vc type metadata\n\nOn the vci specification for each claim we have a `path` (holding a claim path) and an attribute `mandatory`\nWhereas in the [sd-jwt-vc metadata](https://www.ietf.org/archive/id/draft-ietf-oauth-sd-jwt-vc-08.html#claim-metadata) we have the `path` and \n\nVCI\n> mandatory : Boolean which, when set to true, indicates that the Credential Issuer will always include this claim in the issued Credential. If set to false, the claim is not included in the issued Credential if the wallet did not request the inclusion of the claim, and/or if the Credential Issuer chose to not include the claim. If the mandatory parameter is omitted, the default value is false\n```json\n{\n  \"path\": [ \"given_name\" ],\n  \"mandatory\": true,\n}\n```\n\n\nSD-JWT-VC Type metadata\n```json\n{\n  \"path\": [ \"given_name\" ],\n  \"sd\": \"always\"\n}\n```\n\nTo my understanding\n- `mandatory` ultimately expresses that if a given attribute will be always or optionally present, regardless of  `sd` behavior/value. \n- `sd` express the possible disclosure property of the attribute (ultimately, if it is selectively disclosable, or not)\n\nThose two properties are useful for somebody that wants to express a requirement. \nFor instance, perhaps it doesn't make sense to include in a DCQL query an explicitly reference to a claim that is mandatory & never selectively disclosable.\n\nIn addition, I think that the `schema` advertised by sd-jwt-vc metadata cannot express the `mandatory` semantics, given that is mostly driven by the `sd` value. For instance, I cannot express (to my understanding) that `family_name` is a mandatory field, yet always selectively disclosable. Merely I can say that if there is a \"family_name\" attribute present it has to be a string.\n\n\nFor these reasons, I was thinking whether `mandatory` should be added to the claim metadata of this spec.\n\nPS: Apologies for the lengthy description\n\n\n",
      "createdAt": "2025-05-20T13:14:59Z",
      "updatedAt": "2025-10-02T16:48:13Z",
      "closedAt": "2025-10-02T16:48:13Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "If I understand you correctly, you suggest to add the \"mandatory\" information to ensure that in those cases where the schema indicates that an attribute is optional, a DCQL query author can understand whether the attribute is optional to issue or just optional to disclose. Is that correct?\n\n- One solution would be add, in fact, the mandatory attribute.\n- Another solution would be to distinguish the schema for the issued credential from the one for the received credential (see Issue #237 suggesting this).\n- The third solution would be to rely on the existing VCI metadata.\n\nI think adding \"mandatory\" would not hurt (even though the name is not great).",
          "createdAt": "2025-06-03T18:25:00Z",
          "updatedAt": "2025-06-03T18:25:00Z"
        },
        {
          "author": "babisRoutis",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> If I understand you correctly, you suggest to add the \"mandatory\" information to ensure that in those cases where the schema indicates that an attribute is optional, a DCQL query author can understand whether the attribute is optional to issue or just optional to disclose. Is that correct?\n\nYes. This was my main point.\n\n> \n>     * One solution would be add, in fact, the mandatory attribute.\n> \n>     * Another solution would be to distinguish the schema for the issued credential from the one for the received credential (see Issue [Distinguish between issuance and presentation schemas #237](https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/237) suggesting this).\n> \n>     * The third solution would be to rely on the existing VCI metadata.\n> \n> \n> I think adding \"mandatory\" would not hurt (even though the name is not great).\n\n\nThe third option (to use VCI metadata) is the only option available today to the implementers, yet it feels like a compromise.\nSD-JWT-VC is a format independent of VCI protocol.\n\nThe 2nd option also gives me the impression that we leave for JSON Schema validation what we cannot (or we do not want, for practical reasons) to express in the type metadata `claims`. So actually schema is short of last line of defense to our validation.\n\nPersonally I believe that the best approach is to add the `mandatory` or something with a  better name.\n\n\nPS:  Specification already \"implicitly\" uses the mandatory concept, when it requires that `vct` and `iss` claims are required and must  be never selectively disclosed.\n\nPS2: Mandatory is not about a claim being present or not. Mainly it expresses a constraint on disclosures",
          "createdAt": "2025-06-04T07:20:03Z",
          "updatedAt": "2025-06-04T09:08:31Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I would be fine with adding `mandatory`.",
          "createdAt": "2025-07-07T15:43:32Z",
          "updatedAt": "2025-07-07T15:43:32Z"
        },
        {
          "author": "cre8",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I am not sure if mandatory is a good way since we also have the json schema with the required attribute, resulting in a potential risk of inconsistency:\n\n- when a field has the attribute mandatory = false, but is in the required list of the json schema, it will fail.\n\nSo the required \"feature\" of the vct will tell the relying party which attributes are there. For the EUDI eco system we assume that there will be rulebooks, describing the schema of a credential. Therefore verifiers would consume it to get the information of schema and disclosable attributes and not by scanning the issuer vci metadata.\n\nI also saw some deployments for OID4VCI where the issuer metadata is a unique URL for each issuance process, so the verifier will never have a chance to discover it.",
          "createdAt": "2025-08-28T07:45:35Z",
          "updatedAt": "2025-08-28T07:45:35Z"
        },
        {
          "author": "babisRoutis",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I am not sure if mandatory is a good way since we also have the json schema with the required attribute, resulting in a potential risk of inconsistency:\n> \n>     * when a field has the attribute mandatory = false, but is in the required list of the json schema, it will fail.\n\nHi @cre8 \nTo my understanding, `mandatory` is related to `required` but they aren't the same.\n\n`mandatory` expresses the fact that an attribute may (or may not) be included to the issued credential, regardless of the way that is made selectively disclosable (always or never).\n\nOn the other hand, `required` expresses - currently where there is a single JSON Schema - whether an attribute may (or may not) appear to the re-created JSON of a presented SD-JWT-VC.\n\n\n\n|                     | `required` (true)                                                                 | `required` (false)                                                                            |\n|---------------------|-----------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------|\n| `mandatory` (true)  | Attribute is always issued, holder cannot excluded from a presentation (never SD) | Attribute is always issued. Holder can selectively disclose it (always SD)                    | \n| `mandatory` (false) | N/A                                                                               | Attribute is issued conditionally. If present, holder can selectively disclose it (always SD) |\n",
          "createdAt": "2025-08-28T10:15:33Z",
          "updatedAt": "2025-08-28T10:16:39Z"
        },
        {
          "author": "cre8",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hi @babisRoutis \n\nI interpreted it in a way that the wallet will also use the schema to validate if a correct credential got issued:\n\n> If a schema or schema_uri property is present, a Consumer MUST validate the Processed SD-JWT Payload JSON document resulting from the SD-JWT verification algorithm (as defined in Section 7.3 of [[I-D.ietf-oauth-selective-disclosure-jwt](https://drafts.oauth.net/oauth-sd-jwt-vc/draft-ietf-oauth-sd-jwt-vc.html#I-D.ietf-oauth-selective-disclosure-jwt)]) against the JSON Schema document provided by the schema or schema_uri property.\n\n> If the schema validation fails for any of the types in the chain, the Consumer MUST reject the Verifiable Credential.\n\nIn 1.4 the consumer role is covering issuer, verifier and wallet.\n\nOr have I missed something in the spec?\n",
          "createdAt": "2025-08-28T10:39:10Z",
          "updatedAt": "2025-08-28T10:39:10Z"
        },
        {
          "author": "babisRoutis",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Hi [@babisRoutis](https://github.com/babisRoutis)\n> \n> I interpreted it in a way that the wallet will also use the schema to validate if a correct credential got issued:\n> \n> > If a schema or schema_uri property is present, a Consumer MUST validate the Processed SD-JWT Payload JSON document resulting from the SD-JWT verification algorithm (as defined in Section 7.3 of [[I-D.ietf-oauth-selective-disclosure-jwt](https://drafts.oauth.net/oauth-sd-jwt-vc/draft-ietf-oauth-sd-jwt-vc.html#I-D.ietf-oauth-selective-disclosure-jwt)]) against the JSON Schema document provided by the schema or schema_uri property.\n> \n> > If the schema validation fails for any of the types in the chain, the Consumer MUST reject the Verifiable Credential.\n> \n> In 1.4 the consumer role is covering issuer, verifier and wallet.\n> \n> Or have I missed something in the spec?\n\nYou haven't missed anything \ud83d\ude04 \n\nGiven that currently, there is a single schema that is to be used by both by the wallet (during issuance) and the verifier, you cannot mark an always issued attribute as required, unless it is ~always~ never selectively disclosable. Which means, that the wallet cannot validate that it has been issued the mandatory attributes.\n\nHence, I raised this issue.\n\nPS: If you want, please also check https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/237#issuecomment-3036637978",
          "createdAt": "2025-08-28T10:47:24Z",
          "updatedAt": "2025-08-28T10:52:48Z"
        },
        {
          "author": "babisRoutis",
          "authorAssociation": "CONTRIBUTOR",
          "body": "There were some comments with regards to the use of a JSON Schema specific to issuance, in order to mark as required the attributes that must always be present to an issued credential.\n\nNow that there is #345  that removes JSON Schema, I was wondering if there is still room to add `mandatory`.  \n\nThe reasoning to add mandatory is explained to the description of the issue, but in a nutshell:  the `mandatory` from VCI metadata and `sd` from Type Metadata can affect the DCQL for an SD-JWT-VC.  It would be nice, to rely just to Typemetadata .",
          "createdAt": "2025-09-16T10:16:02Z",
          "updatedAt": "2025-09-16T10:16:02Z"
        },
        {
          "author": "nvoutsin",
          "authorAssociation": "NONE",
          "body": "The SD-JWT-VC Type Metadata would be a great addition to the domain/business rulebooks and could help issuers, wallets, and, to some extent, even verifiers align on what they should expect to see in the payload\n\nIn that sense, if the plan is to [remove JSON Schema](https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/345) from the type metadata, it would be useful to close the gap both with the `required` field from the json schema and with the `mandatory` field in the OID4VCI metadata. Since type metadata is now the recommend approach for sd-jwts, wouldn\u2019t it be better to provide the relevant information in a self-contained way?\n\nClosely related to the addition of the mandatory field in type metadata: another crucial functionality offered by json schema was the ability to perform basic sanity checks on the provided values. In practice, we\u2019ve seen many cases where regex checks could protect  issuers and wallets from handling garbage data, and even help authoritative sources stay aligned with basic semantics.",
          "createdAt": "2025-09-17T12:09:20Z",
          "updatedAt": "2025-09-17T12:09:20Z"
        }
      ]
    },
    {
      "number": 311,
      "id": "I_kwDOJbVClc63addP",
      "title": "Clarification on extend",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/311",
      "state": "CLOSED",
      "author": "babisRoutis",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "enhancement",
        "Ready-for-PR"
      ],
      "body": "The specification allows a type medata to extend a (parent) metadata, and so on recursively.\n\nSo a wallet or a verifier, needs first to resolve the `extend` relationships ( a list of type metadata objects) and then validate the SD-JWT-VC against this list of metadata.\n\nSpecifications provides some clear instructions about the `schema` validation. The sd-jwt-vc should be valid against all schemas of the above list.\n\nWhat I miss is the following: what are the rules for `claims` and `display` properties.\n\nTo put it otherwise, assuming two type metadata   A and B (parent) there is need to be a way to \"merge\" them into\n\n* a single list of claim metadata \n* a single list of display \n* a list of schema\n\nPlease advice \n",
      "createdAt": "2025-05-20T14:07:26Z",
      "updatedAt": "2025-09-11T19:22:56Z",
      "closedAt": "2025-09-11T19:22:56Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "This is correct, a way to merge the claims and display properties is required.\n\nMy assumption would be that for both of them, whatever properties are defined in the parent can be overridden by the extending type. Would that match your intuition?",
          "createdAt": "2025-06-03T18:13:28Z",
          "updatedAt": "2025-06-03T18:13:28Z"
        },
        {
          "author": "babisRoutis",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hi @danielfett \n\nTotally agree. \nYet I think that  especially for `claims` a description for the extension options would be a nice addition.\n\nTypical cases for a credential type to \"extent\" its parent:\n- To add more claims\n- To refine the `allowed` value of the `sd` attribute of an existing claim ( `allowed` to be explicitly replaced by either `always` or `never`)",
          "createdAt": "2025-06-04T07:03:38Z",
          "updatedAt": "2025-06-04T07:04:23Z"
        }
      ]
    },
    {
      "number": 314,
      "id": "I_kwDOJbVClc643WP_",
      "title": "Declaration of arrays to the type metadata.",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/314",
      "state": "OPEN",
      "author": "babisRoutis",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "danielfett"
      ],
      "labels": [
        "Ready-for-PR"
      ],
      "body": "I believe that it is not clear how to define an array to the type metadata.\n\n- Section 9, doesn't provide any clue\n- Section 9.1 describes claim path, in general and provides a way to select a JSON element using a a path (and a JSON to process).\n- Appendix B contains a example of how to define an array (degrees). Yet it is rather a basic, just an array of any JSON element.\n\nOn the other hand, SD-JWT, the base specification, allows the representation of very complex arrays.\nThus, I think it is critical to\n- Define explicitly how arrays are being representing to the type metadata.\n- Document the cases that cannot be described with type metadata \n- Provide some more detail examples.\n\nI will try to provide some indicative cases\n\n**Array with elements that have no disclosure properties.**\n\nAppendix B, provides the following example\n\n```json\n{  \"path\" : [\"degrees\", null] , \"sd\": \"allowed\" }\n```\n\nThe problem with such a definition is that it is not clear (at least for me) where the `sd` attribute applies.\nThe above can have two possible interpretations:\n- The entry represents the array itself. Thus, the `sd` defines the disclosure behavior of the array\n- The entry represents the elements of the array. In this case, the disclosure property of the array (not its elements) is undefined.\n\n**Array with elements that have disclosure properties.**\n\nTo describe the disclosure property of both the array and its elements, I believe two entries are needed:\n\n```json\n{  \"path\" : [\"degrees\"] , \"sd\": \"never\" }\n{  \"path\" : [\"degrees\", null] , \"sd\": \"always\" }\n```\nThe first describes the array itself, the second all entries. The \"sd\" can be different of course\n\nBy the way, this is the case of `nationalities` array as defined in ARF 1.8, requires \n\n> When issuing a PID compliant with [SD-JWT VC], a PID Provider SHALL make all claims (i.e., all top-level properties, all nested properties, and all array entries) selectively disclosable individually, except those claims defined as non-selectively disclosable in [SD-JWT VC].\n\n\n\n\n**Array of objects that have attributes with disclosable properties.**\n\nAssuming, that `degrees` is an array of  degree object which has attributes `type` and `university`, each one having their own `sd`\nI believe that we want the following entries to the type metadata\n```json\n{  \"path\" : [\"degrees\"] , \"sd\": \"allowed\" }\n{  \"path\" : [\"degrees\", null ] , \"sd\": \"never\" }\n{  \"path\" : [\"degrees\", null, \"type\"] , \"sd\": \"never\" }\n{  \"path\" : [\"degrees\", null, \"university\"] , \"sd\": \"always\" }\n```\n\nThe first describes the disclosure property of the array (`degrees`)\nThe 2nd the disclosure property of `degree`\nThe 3d and 4th the disclosure property of `degree` attributes\n\n",
      "createdAt": "2025-05-29T21:20:16Z",
      "updatedAt": "2025-09-30T07:12:24Z",
      "closedAt": null,
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I think your second and third examples are correct and your interpretation of the meaning conforms to how the processing of `path` is currently defined. I think we should add examples to make this very clear.",
          "createdAt": "2025-06-03T18:09:09Z",
          "updatedAt": "2025-06-03T18:09:09Z"
        },
        {
          "author": "babisRoutis",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Dear @danielfett \n\nThanks for your reply. It would be great to have similar examples included.\n\n\n\nI have identified several additional cases for arrays that although can be represented in SD-JWT, their disclosure properties cannot be described by type metadata, In SD-JWT-VC. The reason is the type metadata uses a \"flat\" declaration of attributes, whereas SD-JWT is first and foremost a hierarchical structure.\n\nFor instance, arrays that are not homogeneous (neither to the `sd` property nor to their content). Some element may be always selectively disclosable, others never selectively disclosable. Some elements are simple Json elements (object, arrays, string etc), others are disclosable containers. \n\nSD-JWT-VC  doesn't try to cover such corner cases (to my understanding) and this is perfectly balanced dose of pragmatism. \n\nHave observed many \"credential modelers\", especially those with an mdoc background, to have a really hard time to grasp what can be expressed by SD-JWT-VC (and SD-JWT).\n",
          "createdAt": "2025-06-04T06:10:40Z",
          "updatedAt": "2025-06-04T06:10:40Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "@danielfett marked this with Ready-for-PR on Jun 3 but as I read through it to try and consider writing a PR, it's not clear to me what such a PR would look like. ",
          "createdAt": "2025-09-29T21:30:14Z",
          "updatedAt": "2025-09-29T21:30:14Z"
        },
        {
          "author": "babisRoutis",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hi @bc-pi \n\nI was thinking the same. How to address this in a PR.\n\nSome suggestions:\n- For starters, appendix B could be updated to include an entry for the properties of the claim `degree`. As it is right now, it could mislead readers to get the impression that arrays could be described using a single entry about their elements, leaving unspecified the properties of the array container.\n- Two additional examples could be added for the `degree` claim, demonstrating different approaches (please see my 2nd, 3d points on the issue description).\n- Besides the non-normative examples, perhaps there needs to be a description about the distinct ways of defining an array claim\n  -Using a single entry about the array (not its elements)\n - Using two entries (for the array, and all its elements) \n - Using more than two entries (for the array, its elements, and the properties of each element)",
          "createdAt": "2025-09-30T07:12:24Z",
          "updatedAt": "2025-09-30T07:12:24Z"
        }
      ]
    },
    {
      "number": 315,
      "id": "I_kwDOJbVClc65tJcd",
      "title": "Recommend against  using the x5u parameter in JWK",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/315",
      "state": "CLOSED",
      "author": "nikosft",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "HAS PR"
      ],
      "body": "As per [RFC 7517 section 4.6](https://datatracker.ietf.org/doc/html/rfc7517#section-4.6) a JWK may contain the x5u parameter. Suppose a malicious issuer uses different JWK/x5u per (group of) user(s). Resolving this certificate will make the attack described in section 11.3 more efficient. ",
      "createdAt": "2025-06-03T22:36:07Z",
      "updatedAt": "2025-09-11T19:12:13Z",
      "closedAt": "2025-09-11T19:12:13Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Do you mean for the JWK in the cnf claim of the SD-JWT? Or JWKs in or referenced by metadata? Or both?",
          "createdAt": "2025-06-23T21:30:48Z",
          "updatedAt": "2025-06-23T21:30:48Z"
        },
        {
          "author": "nikosft",
          "authorAssociation": "NONE",
          "body": "I am referring to the JWK in the cnf claim. An issuer may store the public key of a holder in a certificate,  save it in a  location it controls, and set the x5u parameter of the JWK in the cnf claim accordingly. Note that x5u can co-exist with other members of the JWK, hence it may not be noticed by the holder. If the verifier follows strictly RFC 7517 it shall retrieve the certificate and verify it matches the rest of the members of the JWK.  ",
          "createdAt": "2025-06-24T22:16:37Z",
          "updatedAt": "2025-06-24T22:16:37Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Discussed with @bc-pi and @awoie: We should add text advising against supporting cnf methods that involve retrieving a key from a (potentially issuer-controlled) remote source.",
          "createdAt": "2025-07-07T16:23:41Z",
          "updatedAt": "2025-07-07T16:24:09Z"
        },
        {
          "author": "cre8",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Is this privacy consideration better fitted for the sd-jwt spec and not for the sd-jwt vc one?\n\ncnf is relevant when using kb-jwt, that is defined in sd-jwt. Therefore I would suggest to add it there and not in this spec because it is not sd-jwt vc specific like e.g. vct",
          "createdAt": "2025-08-28T07:16:26Z",
          "updatedAt": "2025-08-28T07:16:26Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "@cre8, the core sd-jwt spec is in the RFC editor queue so not realistically amenable to changes at this point. So sd-jwt vc kinda has to be the place for this kind of thing given the current maturity of the drafts.  ",
          "createdAt": "2025-08-28T23:06:52Z",
          "updatedAt": "2025-08-28T23:06:52Z"
        }
      ]
    },
    {
      "number": 317,
      "id": "I_kwDOJbVClc67FLU9",
      "title": "Inconsistent description of display property of claim metadata",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/317",
      "state": "CLOSED",
      "author": "charsleysa",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "good first issue",
        "Ready-for-PR"
      ],
      "body": "Under section 9, the `display` property of claim metadata is described as an object:\n\n> display: An object containing display information for the claim, as described in [Section 9.2](https://www.ietf.org/archive/id/draft-ietf-oauth-sd-jwt-vc-09.html#claim-display-metadata). This property is OPTIONAL.\n\nHowever under section 9.2, it is described as an array of objects:\n> The display property is an array containing display information for the claim. The array MUST contain an object for each language that is supported by the type. The consuming application MUST use the language tag it considers most appropriate for the user.",
      "createdAt": "2025-06-12T03:26:38Z",
      "updatedAt": "2025-07-18T20:20:44Z",
      "closedAt": "2025-07-18T20:20:44Z",
      "comments": []
    },
    {
      "number": 319,
      "id": "I_kwDOJbVClc69S2Qt",
      "title": "Mapping for 'termsOfUse' from VCDM",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/319",
      "state": "CLOSED",
      "author": "tweeddalex",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "pending close",
        "future-extension",
        "policy"
      ],
      "body": "Hi all, we've been working on an implementation of issuing SD-JWT VCs with `did:cheqd` using Paradym. \n\nOne part of the VC Data Model that we want to include within the issued SD-JWT VC is the `termsOfUse` field, for referencing 'accreditations' issued to the issuer (stored on our trust registry). However, this is currently not a section that is mapped across in the spec. Would it be worth creating more OPTIONAL JWT claims to map missing sections of the VC Data Model (`evidence`, `termsOfUse`, etc?) - or have these been purposefully omitted to keep the spec as lightweight and simple as possible? \n\nIn particular `termsOfUse` has been increasingly used for pointing to trust registry entries in multiple implementations (see OIDF issue here: https://github.com/openid/federation-wallet/issues/48; EBSI issuer trust model here: https://hub.ebsi.eu/vc-framework/trust-model/issuer-trust-model-v4 and cheqd trust registry model here: https://docs.cheqd.io/product/studio/trust-registries/dtc/referencing-in-credential)\n\nThanks!\n",
      "createdAt": "2025-06-25T14:15:47Z",
      "updatedAt": "2025-09-16T20:56:54Z",
      "closedAt": "2025-09-16T20:56:54Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I think it'd be more accurate to say such things have been purposefully omitted because VCDM equivalence or mappings are a definite non-goal of this work. ",
          "createdAt": "2025-06-25T16:40:00Z",
          "updatedAt": "2025-06-25T19:56:25Z"
        },
        {
          "author": "bumblefudge",
          "authorAssociation": "NONE",
          "body": "where would be the appropriate venue for proposing a specific mapping or optional extension that enabled such continuity/interop across protocols? is there an OIDF WG that could propose such a profile/extension document?",
          "createdAt": "2025-06-26T15:03:02Z",
          "updatedAt": "2025-06-26T15:03:02Z"
        },
        {
          "author": "tweeddalex",
          "authorAssociation": "NONE",
          "body": "Yeah on Juan's point, maybe the best place would be to just nest these sections as claims within the Unsecured Payload. Perhaps in one of the examples showing the `schema` and listed fields, we could include, `evidence`, `termsOfUse`, etc within the schema - so it provides at least a common pathway for people to include these sections.",
          "createdAt": "2025-06-27T09:18:35Z",
          "updatedAt": "2025-06-27T09:18:35Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Discussed with @bc-pi and @awoie: Adding `evidence` and `termsOfUse` information to an `ld` structure as defined in [SD-JWT VC LD](https://openid.github.io/OpenID4VP/openid-4-verifiable-presentations-wg-draft.html#name-sd-jwt-vcld) seems to be the an appropriate way to convey the information. At this time, we don't plan to define claims for that in SD-JWT VC.",
          "createdAt": "2025-07-07T16:07:25Z",
          "updatedAt": "2025-07-07T16:07:25Z"
        },
        {
          "author": "tweeddalex",
          "authorAssociation": "NONE",
          "body": "Thanks @danielfett - understood that the goal of this spec isn't to map the VCDM fields into SD-JWT VC, but maybe a separate question/note would be:\n\n- One area where I see SD-JWT VC lacking is that there's no field that you can utilise to find a trust registry or accreditation of the issuer\n- This is fine if you're signing the SD-JWT VC using an X.509 certificate, because you can traverse to the Root CA using the PKI chain\n- However, if the issuer is an HTTPS URI and the public key is linked with that HTTPS URI, there's no simple mechanism to find whether that is really a trusted issuer - you just know that the VC is cryptographically secured. \n- Thinking about this issue, it would be awesome if there was an optional field baked into the spec that allowed implementations to include a URI to a trust registry or accreditation, where the verifier could check the legitimacy of the issuer (whether that's an entity statement for OIDF, a XML trusted list, or a DID URL that dereferences to some resource)\n- Happy if this is out of scope, but it might be a question worth raising with the rest of the team",
          "createdAt": "2025-07-07T16:27:49Z",
          "updatedAt": "2025-07-07T16:28:34Z"
        },
        {
          "author": "samuelmr",
          "authorAssociation": "NONE",
          "body": "Just a note that in https://github.com/openid/federation-wallet/pull/50, I suggest using a new `EntityConfiguration` parameter for the issuer to point to the issuer's OpenID Entity Configuration.",
          "createdAt": "2025-09-04T16:11:47Z",
          "updatedAt": "2025-09-04T16:11:47Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Similar to #212 there doesn't seem to be a clearly preferred way to express issuance policy, presentation policy, or other policy in the credential itself or even if such policy is necessary or appropriate in the credential. A future or ecosystem specific profile or extension or even type can define (or not) what makes sense in the given context. But, in the interest of moving forward, it's out of scope for (this version of) this specification. ",
          "createdAt": "2025-09-16T20:56:37Z",
          "updatedAt": "2025-09-16T20:56:37Z"
        }
      ]
    },
    {
      "number": 320,
      "id": "I_kwDOJbVClc69siam",
      "title": "Glue document to the protected header?",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/320",
      "state": "CLOSED",
      "author": "babisRoutis",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Specification in section [6.3.5. From Type Metadata Glue Documents](https://www.ietf.org/archive/id/draft-ietf-oauth-sd-jwt-vc-09.html#name-from-type-metadata-glue-doc) suggests that \n\n> For JSON-serialized JWS-based credentials, such Type Metadata documents MAY be included in the unprotected header of the JWS\n\nTo my understanding this means that \"glue documents\" or the ability to embed type metadata is only applicable, when using JWS JSON serialization.\nThat is creating an asymmetry to the compact serialization.\n\nGiven that [HAIP](https://openid.github.io/oid4vc-haip/openid4vc-high-assurance-interoperability-profile-wg-draft.html#name-sd-jwt-vcs) mandates the use of compact serialization, embed type metadata cannot be used.\n\nI would like to kindly ask \n\n- Why `vctm` is only  available to the JWS JSON serialization\n- To consider allowing `vctm` to appear to the protected header, effectively allowing glue documents to the compact form.\n\n",
      "createdAt": "2025-06-27T11:58:29Z",
      "updatedAt": "2025-08-28T22:47:33Z",
      "closedAt": "2025-08-28T22:47:33Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Alternatively consider removing the construct all together #334\n ",
          "createdAt": "2025-08-25T17:57:56Z",
          "updatedAt": "2025-08-25T17:57:56Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "looking like it's going to be removed 16562caebbef0b92a6273c7f0bcb40ac5ce7f633",
          "createdAt": "2025-08-28T22:47:33Z",
          "updatedAt": "2025-08-28T22:47:33Z"
        }
      ]
    },
    {
      "number": 321,
      "id": "I_kwDOJbVClc6-uzuc",
      "title": "Be more opinionated about validity claims?",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/321",
      "state": "CLOSED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "pending close"
      ],
      "body": "In the context of [this issue](https://github.com/openid/oid4vc-haip/pull/165/files#r1969911921), it was discussed whether the [section in HAIP defining additional requirements on the validity claims in SD-JWT VC](https://github.com/openid/oid4vc-haip/pull/165/files#diff-762ef65fd82909517226ac1bb7e8855792bb57021abc1637c15b8557154dbbf1R207-R225) should exist at all.\n\nThis issue is an invitation to discuss if some/all of the requirements currently in HAIP should be moved to SD-JWT VC.\n\nAdditionally, the requirements should be adapted to the new signature profile mechanism in SD-JWT VC.",
      "createdAt": "2025-07-03T16:25:18Z",
      "updatedAt": "2025-07-29T18:40:50Z",
      "closedAt": "2025-07-29T18:40:50Z",
      "comments": [
        {
          "author": "charsleysa",
          "authorAssociation": "NONE",
          "body": "I think HAIP is for very specific use cases while SD-JWT VC themselves are open to any use case.\n\nFor example, why would a VC representing a university degree need an expiry? The degree is a point in time document, it doesn't expire, it simply states that an achievement was received by a person at a point in time and that record is forever valid unless revoked. ",
          "createdAt": "2025-07-03T20:54:39Z",
          "updatedAt": "2025-07-03T20:54:39Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Discussed with @bc-pi and @awoie that there is nothing we should change in SD-JWT VC.",
          "createdAt": "2025-07-07T15:59:02Z",
          "updatedAt": "2025-07-07T15:59:11Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "closing after 3 weeks of pending close ",
          "createdAt": "2025-07-29T18:40:50Z",
          "updatedAt": "2025-07-29T18:40:50Z"
        }
      ]
    },
    {
      "number": 323,
      "id": "I_kwDOJbVClc6_aMqN",
      "title": "Should `sd` `allowed` be used by issuers?",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/323",
      "state": "OPEN",
      "author": "babisRoutis",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Currently `sd` property has one of the following values\n\n- **always**: The Issuer MUST make the claim selectively disclosable. \n- **allowed**: The Issuer MAY make the claim selectively disclosable. \n- **never**: The Issuer MUST NOT make the claim selectively disclosable\n\nAnd in addition, **allowed** is the default if `sd` is not provided explicitly\n\n\nDoes it make sense for an issuer to use the value **allowed** (explicitly or implicitly)? \n\nTo my understanding **allowed** can certainly be used to a parent metadata. \nOn the other hand, I don't understand  what **allowed** really means for an issuer.\n\nAn issuer is expected to take a specific decision (always or never) for every attribute that is defined with an `allowed` property. Furthermore, this decision should be explicitly documented to the type metadata, with the issuer (extending to override) **allowed** properties.\n\n\n\n\n\n\n",
      "createdAt": "2025-07-08T07:06:30Z",
      "updatedAt": "2025-10-03T07:24:22Z",
      "closedAt": null,
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Apologies that this has been just sitting here for so long @babisRoutis. Can you help me better understand the question/issue? The sd property is part of the type metadata and, as you noted, a value of \"allowed\" means that \"The Issuer MAY make the claim selectively disclosable\". That means that making the given claim selectively disclosable or not is at the digression of the issuer. Note that in many (most?) cases the entity that publishes the type metadata is not the same as the issuer. I'm struggling to understand or answer the question, \"Should sd allowed be used by issuers?\" ",
          "createdAt": "2025-09-29T21:08:20Z",
          "updatedAt": "2025-09-29T21:08:20Z"
        },
        {
          "author": "babisRoutis",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Apologies that this has been just sitting here for so long [@babisRoutis](https://github.com/babisRoutis). Can you help me better understand the question/issue? The sd property is part of the type metadata and, as you noted, a value of \"allowed\" means that \"The Issuer MAY make the claim selectively disclosable\". That means that making the given claim selectively disclosable or not is at the digression of the issuer. Note that in many (most?) cases the entity that publishes the type metadata is not the same as the issuer. I'm struggling to understand or answer the question, \"Should sd allowed be used by issuers?\"\n\nDear @bc-pi \n\nObviously my poor English are not helping, but I will try to elaborate \ud83d\ude04 \n\nHow a wallet or a RP should interpret a type definition (that after merging possible parent definitions) ends up with a claim having sd equal to allowed?\n\nShould they assume  that some times  this issuer encodes the claim as always selectively disclosable and others as never selectively disclosable?\n\nI guess no. \n\nWallets/RPs expect that an Issuer behaves in a consistent manner. \n\nAs I see it \n- sd allowed can/should be used only in parent type definitions (probably published by other entities, not the Issuer)\n- In such case, the Issuer must override those parent definitions to explicitly provide their decision.\n\nFinally, for what is worth, I have seen definitions having several claims marked with an  sd equal to allowed (by omitting an explicit value), which frankly I consider that makes the sd  attribute almost meaningless. ",
          "createdAt": "2025-09-29T21:43:58Z",
          "updatedAt": "2025-09-29T21:43:58Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "sd=allowed can be a signal to issuers, telling them whether they may make a claim selectively disclosable. If that is the case, a verifier or wallet cannot really deduce anything about the behavior of the issuer from this information. That is expected. If the issuer wants to provide more information, it should set sd to either `always` or `never`.\n\nSo our recommendation could be to set `always` or `never`, I guess?",
          "createdAt": "2025-10-02T17:12:39Z",
          "updatedAt": "2025-10-02T17:12:39Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> So our recommendation could be to set `always` or `never`, I guess?\n\nI am not convinced that is a recommendation we should make. Nor of the utility of #359. \n\n",
          "createdAt": "2025-10-02T19:54:56Z",
          "updatedAt": "2025-10-02T19:54:56Z"
        },
        {
          "author": "babisRoutis",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> sd=allowed can be a signal to issuers, telling them whether they may make a claim selectively disclosable. If that is the case, a verifier or wallet cannot really deduce anything about the behavior of the issuer from this information. That is expected. If the issuer wants to provide more information, it should set sd to either `always` or `never`.\n> \n> So our recommendation could be to set `always` or `never`, I guess?\n\nHi @danielfett \n\nIndeed this was exactly my point. \n\nTo be frank, I believe that `allowed` should be removed. \n\nHere is why:\n\nAssume the following case:\n- a set of Issuers participating to the same ecosystem, which defines, a parent definition  for a credential.\n- this parent definition marks some claims as  `allowed`\n- a verifier that wants to query for a credential issued by any of the above issuers, for claims marked as `allowed`\n\nIn this case, verifier would base, ideally, its query to the parent definition and not the individual choices of each issuer. So, the only practical option for the verifier when requesting a claim marked to the parent with allowed, is to treat it as \"always\" to cover the case that some issuers would use this option.\n\n\n\n",
          "createdAt": "2025-10-03T07:24:22Z",
          "updatedAt": "2025-10-03T07:24:22Z"
        }
      ]
    },
    {
      "number": 325,
      "id": "I_kwDOJbVClc7ATLNM",
      "title": "Add a new claim called \"credential_issuance_policy\"",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/325",
      "state": "OPEN",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "pending close",
        "future-extension",
        "policy"
      ],
      "body": "On Dec 7, 2024, I raised the following issue \":\n\n> Add a new claim called \"dcpol\" for \"Digital Credential Policy\" #290\n\nwbl responded:\n\n> What's a Digital Credential Policy? This would need a lot more text to explain the semantics.\n\nBelow is a \"lot more text to explain the semantics\". In between, I changed the name of the claim into: \"credential_issuance_policy\".\nAn analogy between X.509 Certificates and Verifiable Credentials can be made. X.509 Certificates are defined in RFC 5280.\n\nSection 2 from RFC 5280 states:\n\n> A certificate user should review the certificate policy generated by the certification authority (CA) before relying on the authentication or non-repudiation services associated with the public key in a particular certificate.\n> \n> Applying this analogy, the current draft should state something like:\n> \n> A verifier user should review the credential_issuance_policy claim placed by the issuer into a Verifiable Credential before relying on authentication or selective disclosure services associated with the public key in a particular Verifiable Credential.\n\nUnfortunately, at the moment, no claim has been defined for a \"Credential issuance policy (CIP)\".\n\nSection [4.2.1.4](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.4) from RFC 5280 states:\n\n> 4.2.1.4. Certificate Policies\n> \n> The certificate policies extension contains a sequence of one or more policy information terms, each of which consists of an object identifier (OID) and optional qualifiers. Optional qualifiers, which MAY be present, are not expected to change the definition of the policy. A certificate policy OID MUST NOT appear more than once in a certificate policies extension.\n> \n>  In an end entity certificate, these policy information terms indicate the policy under which the certificate has been issued and the purposes for which the certificate may be used.\n\nApplying this analogy, the current draft would state something like:\n\n> The credential_issuance_policy claim contains a sequence of one or more credential issuance policy identifiers, each of which consists of a URI and optional policy qualifiers. Optional policy qualifiers, which MAY be present, are not expected to change the definition of the policy. A credential issuance policy identifier URI MUST NOT appear more than once in a credential_issuance_policy claim.\n> \n> The credential_issuance_policy claim indicates the policies under which the verifiable credential has been issued and the purposes for which it may be used.\n> \n> Verifiers with specific policy requirements are expected to have a list of those policies that they will accept and to compare the policy URI in the verifiable credential to that list.\n> \n> This specification defines one policy qualifier type: the Issuance Practice Statement (issuance_practice_statement).\n> \n>  The issuance_practice_statement qualifier contains a pointer to an Issuance Practice Statement (IPS) either published by the issuer or defined by another organization. The pointer is in the form of a URI. Processing requirements for this qualifier by Relying Parties are a local matter.\n\nAnother analogy can also be done with ETSI EN 319 412-5 V2.4.1 (2023-09).\n\n Section 4.2.2 is stating:\n\n> 4.2.2 QCStatement claiming that the private key related to the certified public key resides in a QSCD\n> \n> This Qcstatement declares that the private key related to the certified public key resides in a Qualified Signature/Seal Creation Device (QSCD) according to the Regulation (EU) No 910/2014 [i.8] or a secure signature creation device as defined in the Directive 1999/93/EC [i.3].\n> \n> Syntax:\n> esi4-qcStatement-4 QC-STATEMENT ::= { IDENTIFIED BY id-etsi-qcs-QcSSCD }\n> id-etsi-qcs-QcSSCD OBJECT IDENTIFIER ::= { id-etsi-qcs 4 }\n\nApplying this analogy, the current draft would state something like:\n\n> The following issuance_practice_statement URI declares that the keys pairs generated by a holder and used for requesting the issuance of verifiable credential and then after for presenting them to relying parties reside in a device that restricts the use of the private keys to a specific application placed under the control of the owner of this device. The application that can present verifiable credentials must also be the application that requested and obtained them.\n> \n>  Syntax: ...\n\nUsing the ARF vocabulary (Discussion topic C - Wallet Unit Attestation (WUA) and Key Attestation Version 0.4, updated 14 March 2025), the URI contained in an issuance_practice_statement corresponds to the \"properties of the WSCA\".\n\nRelying Parties can rely on issuance_practice_statements contained in a verifiable credential and thus do not need to use any protocol with WSCA to know the \"properties of the WSCA\".\n\nIn this way, a protocol between the WSCA and Relying Parties using Wallet Unit Attestations is replaced by the issuance_practice_statement placed into the verifiable credential. One-time use Wallet Unit Attestations (WUA) are still necessary between WSCAs and issuers, but are not necessary between WSCAs and Relying Parties.\n\nNote: This topic has been raised at the end of the presentation from Daniel and Olivier on July 2, 2025 (SD-JWT and SD-JWT VC deep dive)\nat the \"Global Digital Collaboration Conference 2025\" in Geneva.\n",
      "createdAt": "2025-07-13T08:13:48Z",
      "updatedAt": "2025-09-16T20:57:48Z",
      "closedAt": null,
      "comments": [
        {
          "author": "tweeddalex",
          "authorAssociation": "NONE",
          "body": "Hey @Denisthemalice very aligned with this idea. See my comment on this issue here: https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/319#issuecomment-3045830805",
          "createdAt": "2025-07-17T05:59:21Z",
          "updatedAt": "2025-07-17T05:59:21Z"
        },
        {
          "author": "Denisthemalice",
          "authorAssociation": "NONE",
          "body": "@tweeddalex.\n\nYour comment is asking for the addition a claim that contains a URI to a trust registry or accreditation. \n\nElectronic signatures have been successfully deployed within the EU without such an extension, but by using certificate policies that allow to know that a EU policy (in fact, a policy defined by ETSI) is being used by the CA. In such a case, a TSL (Trust Server List) can be used to verify that the CA has indeed been accredited. \n\nHence, it looks that your concern can be solved using the new claim called \"credential_issuance_policy\".",
          "createdAt": "2025-07-20T08:42:37Z",
          "updatedAt": "2025-07-20T08:42:37Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Similar to https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/212 and #319 there doesn't seem to be a clearly preferred way to express issuance policy, presentation policy, or other policy in the credential itself or even if such policy is necessary or appropriate in the credential. A future or ecosystem specific profile or extension or even type can define (or not) what makes sense in the given context. But, in the interest of moving forward, it's out of scope for (this version of) this specification.",
          "createdAt": "2025-09-16T20:57:48Z",
          "updatedAt": "2025-09-16T20:57:48Z"
        }
      ]
    },
    {
      "number": 326,
      "id": "I_kwDOJbVClc7Bk14p",
      "title": "No more DIDs in 3.5 of draft 10",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/326",
      "state": "CLOSED",
      "author": "ThierryThevenet",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The disappearance of the DID in section 3.5 is causing questions and a lot of disappointment among projects. Considering that the SD-JWT VC standard is backward-looking, towards x509 certificates from the 1980s, while the demand today is clearly towards decentralized ecosystems. Just for your information.\nThe information in section 10.2 generally suggesting that in fact the other methods (DIDs?) would be less reliable than those cited is perplexing (this is a personal opinion).",
      "createdAt": "2025-07-21T08:15:03Z",
      "updatedAt": "2025-10-03T12:17:34Z",
      "closedAt": "2025-10-03T12:17:34Z",
      "comments": [
        {
          "author": "peacekeeper",
          "authorAssociation": "NONE",
          "body": "Just like before, editors removed this in a deceptive PR, against WG consensus. Chairs should step in (again) to fix this.\n\nIn my opinion, this kind of behavior raises questions about motivations of the editors and about governance of the WG.",
          "createdAt": "2025-07-21T10:19:01Z",
          "updatedAt": "2025-07-21T10:19:01Z"
        },
        {
          "author": "steffenschwalm",
          "authorAssociation": "NONE",
          "body": "@danielfett @awoie May you please explain the reasons for change? Why can\u00b4t we keep the section as agreed autumn 2024 and last month 2025\n\nfully agree to @peacekeeper @ThierryThevenet to keep the text\n\n\"DID Document Resolution: If a recipient supports DID Document Resolution and if the iss value contains a DID [[W3C.DID](https://www.w3.org/TR/did-core/)], the recipient MUST retrieve the public key from the DID Document resolved from the DID in the iss value. In this case, if the kid JWT header parameter is present, the kid MUST be a relative or absolute DID URL of the DID in the iss value, identifying the public key.\"",
          "createdAt": "2025-07-22T11:39:59Z",
          "updatedAt": "2025-07-22T21:20:07Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Closing this following WG consensus.\n\nhttps://mailarchive.ietf.org/arch/msg/oauth/Z71GOOkkjpC1O46kHPLafqAoz0E/",
          "createdAt": "2025-10-03T12:17:34Z",
          "updatedAt": "2025-10-03T12:17:34Z"
        }
      ]
    },
    {
      "number": 327,
      "id": "I_kwDOJbVClc7B2Yit",
      "title": "Invalid text \"Note that iss and vct are always required by this specification.\"",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/327",
      "state": "CLOSED",
      "author": "TimoGlastra",
      "authorAssociation": "NONE",
      "assignees": [
        "bc-pi"
      ],
      "labels": [],
      "body": "Since #316 was merged, `iss` is now optional. \n\nMentioned in [6.5.1. ](https://www.ietf.org/archive/id/draft-ietf-oauth-sd-jwt-vc-10.html#section-6.5.1)[Schema Definition](https://www.ietf.org/archive/id/draft-ietf-oauth-sd-jwt-vc-10.html#name-schema-definition)",
      "createdAt": "2025-07-22T11:16:52Z",
      "updatedAt": "2025-07-29T18:32:35Z",
      "closedAt": "2025-07-29T18:32:35Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for catching that @TimoGlastra. That sentence should be fixed or maybe just removed. ",
          "createdAt": "2025-07-28T18:37:09Z",
          "updatedAt": "2025-07-28T18:37:09Z"
        }
      ]
    },
    {
      "number": 329,
      "id": "I_kwDOJbVClc7C05ZO",
      "title": "processing of claims and the crit header parameter",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/329",
      "state": "CLOSED",
      "author": "adeinega",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Section \"verification and processing\" says that\n\n> Any claims used that are not understood MUST be ignored.\n\nI dare say this shouldn't contradict to https://datatracker.ietf.org/doc/html/rfc7515#section-4.1.11.",
      "createdAt": "2025-07-28T08:04:57Z",
      "updatedAt": "2025-07-28T19:24:44Z",
      "closedAt": "2025-07-28T18:26:56Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Headers and claims are different things so I don't see that there's any contradiction. ",
          "createdAt": "2025-07-28T14:47:29Z",
          "updatedAt": "2025-07-28T14:47:29Z"
        },
        {
          "author": "adeinega",
          "authorAssociation": "NONE",
          "body": "For some stupid reason, I thought one can specify one of the claims in a JWT in the crit header parameter (in addition to opaque extensions and algorithms) making it required for a receiver to understand how to process them.\n\nMy bad.\n\nUnless you want to introduce say something like `crit_claim` to indicate that a receiver must understand how to process certain claims to in a SD-JWT VC, please close this issue.",
          "createdAt": "2025-07-28T17:10:26Z",
          "updatedAt": "2025-07-28T17:10:26Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> Unless you want to introduce say something like `crit_claim` to indicate that a receiver must understand how to process certain claims to in a SD-JWT VC, please close this issue.\n\nThe idea has come up a couple of times but I've been very reluctant to do something like that without a real compelling case. And I think application of `vct` can cover much of what might be needed. ",
          "createdAt": "2025-07-28T18:26:41Z",
          "updatedAt": "2025-07-28T18:26:41Z"
        },
        {
          "author": "adeinega",
          "authorAssociation": "NONE",
          "body": "One question for you if I may, @bc-pi... what's your take on an unencoded detached payload for SD-JWT VCs? I refer to [JSON Web Signature (JWS) Unencoded Payload Option (RFC 7797)](https://datatracker.ietf.org/doc/html/rfc7797) with its `\"b64\":false,\"crit\":[\"b64\"]` in the header.\n\nI didn't find anything specific on it, nothing allowing or forbidding it, but of course, it's hard to imagine how that can be used in specific contexts (the VP Token).",
          "createdAt": "2025-07-28T19:15:46Z",
          "updatedAt": "2025-07-28T19:15:46Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I honestly hadn't thought about it so I don't really have a take. I guess I don't really see, offhand anyway, a good reason to use it in this context but I'd lean towards not prohibiting it or really saying anything specific about it. ",
          "createdAt": "2025-07-28T19:24:43Z",
          "updatedAt": "2025-07-28T19:24:43Z"
        }
      ]
    },
    {
      "number": 331,
      "id": "I_kwDOJbVClc7Ddq7O",
      "title": "Type Metadata documents in the unprotected header of the JWS",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/331",
      "state": "CLOSED",
      "author": "adeinega",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Section \"6.3.5. From Type Metadata Glue Documents\" states that\n\n> For JSON-serialized JWS-based credentials, such Type Metadata documents MAY be included in the unprotected header of the JWS.\n\nThe problem I see here is that a malicious actor can modify \"embedded\" JSON Schema, or Schemas, by adding, for instance, the \"default\" keyword with some value to one or more claims aiming to trick the implementation of a verifier in one or another way (in cases when a holder doesn't provide the Disclosures for those claims).\n\nThe JSON Schema validators aren't intended to perform any data manipulations, such as setting defaults, but considering how many implementations of them are out there and how they work, I suggest moving the Type Metadata documents out from the unprotected header of the JWS.",
      "createdAt": "2025-07-31T06:54:02Z",
      "updatedAt": "2025-09-02T19:02:51Z",
      "closedAt": "2025-09-02T19:02:51Z",
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "@adeinega Wouldn't using `vct#integrity` address your concern?\n> The Consumer MUST NOT use the Type Metadata if no hash for integrity protection was provided in vct#integrity",
          "createdAt": "2025-08-05T18:11:47Z",
          "updatedAt": "2025-08-05T18:11:54Z"
        },
        {
          "author": "adeinega",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@awoie, the answer is going to be \"no, it wouldn't address my concern\". A malicious actor could whatever he wants in the unprotected header including generating a new SHA-256 (or other) hash for the integrity protection in `_vct#integrity_`\n\nthis is how I read the specification and section From Type Metadata Glue Documents in it\n\n> In this case, the key vctm MUST be used in the unprotected header and its value MUST be an array of base64url-encoded Type Metadata documents as defined in this specification.\n\n",
          "createdAt": "2025-08-05T18:38:01Z",
          "updatedAt": "2025-08-05T18:38:01Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Do we have a concrete need for these for these Type Metadata Glue Documents? ",
          "createdAt": "2025-08-05T20:21:52Z",
          "updatedAt": "2025-08-05T20:21:52Z"
        },
        {
          "author": "adeinega",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Not sure if they\u2019re needed\u2026 yet another aspect here, there were attacks against JSON parsers and there were dedicated attacks against JSON Schema validators, and we know there will be always new (creative) attacks, so if it's possible to avoid passing potentially \"modified\" data to them, we better do it.",
          "createdAt": "2025-08-05T21:33:33Z",
          "updatedAt": "2025-08-05T21:33:33Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> [@awoie](https://github.com/awoie), the answer is going to be \"no, it wouldn't address my concern\". A malicious actor could whatever he wants in the unprotected header including generating a new SHA-256 (or other) hash for the integrity protection in `_vct#integrity_`\n\nNote that `vct#integrity` is in the SD-JWT Payload though, not the unprotected header, so that isn't accurate. \n\n\n",
          "createdAt": "2025-08-07T23:18:41Z",
          "updatedAt": "2025-08-07T23:18:41Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> Do we have a concrete need for these for these Type Metadata Glue Documents?\n\nthis was largely a question for @danielfett who was AFAIK the original author of the Type Metadata Glue Document parts of the document. ",
          "createdAt": "2025-08-07T23:20:01Z",
          "updatedAt": "2025-08-07T23:20:01Z"
        },
        {
          "author": "babisRoutis",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I suggest moving the Type Metadata documents out from the unprotected header of the JWS.\n\nDear @adeinega \n\nDo you propose moving the glue documents to the protected header? If so, perhaps this is related to #320 \n\n",
          "createdAt": "2025-08-25T10:30:02Z",
          "updatedAt": "2025-08-25T10:30:02Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I propose removing the glue document discourse from the draft #334 ",
          "createdAt": "2025-08-25T17:59:12Z",
          "updatedAt": "2025-08-25T17:59:12Z"
        },
        {
          "author": "adeinega",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@babisRoutis, that\u2019s correct. I hadn\u2019t seen your https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/320 before submitting this one. I did that for a different reason too.\n\nI've failed to find any section describing these nuances\n\n> vct#integrity is in the SD-JWT Payload though, not the unprotected header, so that isn't accurate.\n\nof course, it very very possible I simply overlooked them. If that's true, I find it to be a bit weird as _vct#integrity_ protects the vct claim in in the SD-JWT Payload. However, there is nothing left to discuss if / when the glue documents go away in https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/334.",
          "createdAt": "2025-08-26T19:03:07Z",
          "updatedAt": "2025-08-26T19:03:07Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": ">  I find it to be a bit weird as _vct#integrity_ protects the vct claim in in the SD-JWT Payload. However, there is nothing left to discuss if / when the glue documents go away in [#334](https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/334).\n\nthey are (very likely) going away with my premature `bypassed rule violations for refs/heads/main: ... remote: - Changes must be made through a pull request.` in 16562caebbef0b92a6273c7f0bcb40ac5ce7f633 \n\nBut maybe there's still something to discuss or clarify. I read https://datatracker.ietf.org/doc/html/draft-ietf-oauth-sd-jwt-vc-10#name-document-integrity as saying `vct#integrity`, if used, has to accompany the `vct` claim which is in the SD-JWT Payload. The misuse of the term claim there to refer to members in metadata aside, do you think that needs clarification? Or are you questioning the utility of `vct#integrity` claim itself? Or both? Or something different? \n\n",
          "createdAt": "2025-08-28T23:00:16Z",
          "updatedAt": "2025-08-28T23:00:16Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Type Metadata Glue Documents have been removed from the draft per #334 ",
          "createdAt": "2025-09-02T19:02:51Z",
          "updatedAt": "2025-09-02T19:02:51Z"
        }
      ]
    },
    {
      "number": 332,
      "id": "I_kwDOJbVClc7Dd1wE",
      "title": "JSON Schema and required claims",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/332",
      "state": "CLOSED",
      "author": "adeinega",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "schema"
      ],
      "body": "Section 6.5.2. Schema Validation says\n\n> If the schema validation fails for any of the types in the chain, the Consumer MUST reject the Verifiable Credential.\n\nIf a claim is marked as required in a JSON Schema document but is not disclosed to the verifier, the verifier must reject the VC (or DC).\n\nThe solution seems simple, never mark such claims as \"required\"... but is that always the desirable approach?\n\nIt feels like these nuances should be mentioned and articulated.",
      "createdAt": "2025-07-31T07:12:03Z",
      "updatedAt": "2025-09-23T19:23:42Z",
      "closedAt": "2025-09-23T19:23:42Z",
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "> The solution seems simple, never mark such claims as \"required\"... but is that always the desirable approach?\n> \n> It feels like these nuances should be mentioned and articulated.\n\n@adeinega Do you have any use cases where this wouldn't work?\n",
          "createdAt": "2025-08-05T18:09:46Z",
          "updatedAt": "2025-08-05T18:09:46Z"
        },
        {
          "author": "adeinega",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@awoie, frankly speaking, I find it a bit surprising that a single JSON Schema document is defined for both types of consumers, I refer to Holders and Verifiers, considering that, by the nature of SD-JWT, Verifiers won\u2019t always see all the claims.\n\nHere is a bit more concrete example: the last_name claim could be marked as required in a citizenship VC, which makes sense for Holders, but not all Verifiers are going to \"see\" it.",
          "createdAt": "2025-08-05T18:54:24Z",
          "updatedAt": "2025-08-05T18:54:24Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "> [@awoie](https://github.com/awoie), frankly speaking, I find it a bit surprising that a single JSON Schema document is defined for both types of consumers, I refer to Holders and Verifiers, considering that, by the nature of SD-JWT, Verifiers won\u2019t always see all the claims.\n> \n> Here is a bit more concrete example: the last_name claim could be marked as required in a citizenship VC, which makes sense for Holders, but not all Verifiers are going to \"see\" it.\n\nI believe your issue then relates to #237 , correct?",
          "createdAt": "2025-08-07T17:19:28Z",
          "updatedAt": "2025-08-07T17:19:28Z"
        },
        {
          "author": "adeinega",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It relates, right. I didn't know you already have https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/237, there is clearly a lot of overlap, but they aren't only about the same.",
          "createdAt": "2025-08-07T18:17:40Z",
          "updatedAt": "2025-08-07T18:17:40Z"
        }
      ]
    },
    {
      "number": 333,
      "id": "I_kwDOJbVClc7GzZ63",
      "title": "mandate JWT when ietf status list is used (there is also cwt)",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/333",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "Sakurann",
        "bc-pi"
      ],
      "labels": [
        "HAS PR"
      ],
      "body": "Update this sentence to say that when ietf-status-list is used jwt and not cwt must be used\n> See [[I-D.ietf-oauth-status-list](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-status-list-05)] for more information.",
      "createdAt": "2025-08-19T18:54:31Z",
      "updatedAt": "2025-09-02T18:06:37Z",
      "closedAt": "2025-09-02T18:06:37Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "#339 proposes a new sentence with this requirement  ",
          "createdAt": "2025-08-28T22:26:53Z",
          "updatedAt": "2025-08-28T22:26:53Z"
        }
      ]
    },
    {
      "number": 334,
      "id": "I_kwDOJbVClc7H1j-S",
      "title": "Remove Type Metadata Glue Documents",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/334",
      "state": "CLOSED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "bc-pi"
      ],
      "labels": [],
      "body": "Type Metadata Glue Documents result in some asymmetry in serialization support #320 and questions about security #331. \n\nAs I am not aware of a compelling rational for the inclusion of Type Metadata Glue Documents in the [prospective] specification, I propose removal. \n \n ",
      "createdAt": "2025-08-25T17:56:12Z",
      "updatedAt": "2025-09-02T18:59:20Z",
      "closedAt": "2025-09-02T18:59:20Z",
      "comments": [
        {
          "author": "babisRoutis",
          "authorAssociation": "CONTRIBUTOR",
          "body": "To my understanding, glue documents are perhaps most useful to the wallet, given that, in any case,  a verifier should be aware beforehand of the definition of a credential in order to assemble a query. In addition, I have the impression that wallet may present the sd-jwt-vc without the glue document, which means that a verifier cannot count on glue document.\n\nHence, removal of glue documents affects mostly the wallet, especially in the case where wallet interacts with an issuer that doesn't use an HTTPS URI for `vct` and the wallet doesn't know out-of-band (using ecosystem-specific convention)  the type definition.\n\nFor what is worth, in the context of EUDIW, PID in sd-jwt-vc format uses a `vct` that is a URN.  \nGlue documents were handy to interoperability events, but I have seen many implementers embedding definition to the protected header (in order to use compact serialization).\n\nIn summary, I agree with @bc-pi proposal, unless there are other uses of glue documents that I miss.\n\n",
          "createdAt": "2025-08-26T09:48:22Z",
          "updatedAt": "2025-08-26T09:48:22Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "> To my understanding, glue documents are perhaps most useful to the wallet, given that, in any case, a verifier should be aware beforehand of the definition of a credential in order to assemble a query. In addition, I have the impression that wallet may present the sd-jwt-vc without the glue document, which means that a verifier cannot count on glue document.\n> \n> Hence, removal of glue documents affects mostly the wallet, especially in the case where wallet interacts with an issuer that doesn't use an HTTPS URI for `vct` and the wallet doesn't know out-of-band (using ecosystem-specific convention) the type definition.\n> \n> For what is worth, in the context of EUDIW, PID in sd-jwt-vc format uses a `vct` that is a URN. Glue documents were handy to interoperability events, but I have seen many implementers embedding definition to the protected header (in order to use compact serialization).\n> \n> In summary, I agree with [@bc-pi](https://github.com/bc-pi) proposal, unless there are other uses of glue documents that I miss.\n\n@babisRoutis One of the reasons for the glue documents was AdES signatures (except base profile). Not sure if this is still a good reason?",
          "createdAt": "2025-08-26T11:41:22Z",
          "updatedAt": "2025-08-26T11:41:22Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "> > To my understanding, glue documents are perhaps most useful to the wallet, given that, in any case, a verifier should be aware beforehand of the definition of a credential in order to assemble a query. In addition, I have the impression that wallet may present the sd-jwt-vc without the glue document, which means that a verifier cannot count on glue document.\n> > Hence, removal of glue documents affects mostly the wallet, especially in the case where wallet interacts with an issuer that doesn't use an HTTPS URI for `vct` and the wallet doesn't know out-of-band (using ecosystem-specific convention) the type definition.\n> > For what is worth, in the context of EUDIW, PID in sd-jwt-vc format uses a `vct` that is a URN. Glue documents were handy to interoperability events, but I have seen many implementers embedding definition to the protected header (in order to use compact serialization).\n> > In summary, I agree with [@bc-pi](https://github.com/bc-pi) proposal, unless there are other uses of glue documents that I miss.\n> \n> [@babisRoutis](https://github.com/babisRoutis) One of the reasons for the glue documents was AdES signatures (except base profile). Not sure if this is still a good reason?\n\nI actually withdraw my comment and I'm fine with removing it since I don't see a clear use case for this. Not even in the AdES world.",
          "createdAt": "2025-08-26T18:28:33Z",
          "updatedAt": "2025-08-26T18:28:33Z"
        },
        {
          "author": "adeinega",
          "authorAssociation": "CONTRIBUTOR",
          "body": "For what it\u2019s worth... I support this proposal.",
          "createdAt": "2025-08-26T18:45:52Z",
          "updatedAt": "2025-08-26T18:45:52Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I missed a `-c` somewhere in my git \"workflow\" and accidentally went right to main with 16562caebbef0b92a6273c7f0bcb40ac5ce7f633 which does what this issue says. Apologies. Will leave this issue open for a bit as a half-hearted fallback opportunity to review.  ",
          "createdAt": "2025-08-28T22:46:21Z",
          "updatedAt": "2025-08-28T23:02:39Z"
        },
        {
          "author": "babisRoutis",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Dear @bc-pi \n\nSo can we assume that the change will make it to the spec or should we expect this to be reverted?\nCan you please clarify?\n\n",
          "createdAt": "2025-08-29T07:31:24Z",
          "updatedAt": "2025-08-29T07:31:24Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Yeah, assume that the change will make it to the spec unless there's some big and legitimate outcry to undo it. ",
          "createdAt": "2025-08-29T10:57:35Z",
          "updatedAt": "2025-08-29T10:57:35Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "done with 16562caebbef0b92a6273c7f0bcb40ac5ce7f633 ",
          "createdAt": "2025-09-02T18:59:20Z",
          "updatedAt": "2025-09-02T18:59:20Z"
        }
      ]
    },
    {
      "number": 342,
      "id": "I_kwDOJbVClc7JSQx2",
      "title": "Remove JSON schema from Type Metadata",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/342",
      "state": "CLOSED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "schema"
      ],
      "body": "I was pretty skeptical of about the utility of it when it was first added/proposed and I can't say my perspective has moved.  \n\nbut there are related issues like #332 #310 #238 and (thanks for the reminder @adeinega) #237 ",
      "createdAt": "2025-09-02T18:00:42Z",
      "updatedAt": "2025-09-23T19:23:42Z",
      "closedAt": "2025-09-23T19:23:42Z",
      "comments": [
        {
          "author": "adeinega",
          "authorAssociation": "CONTRIBUTOR",
          "body": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/237 can also be added to this list.",
          "createdAt": "2025-09-02T20:27:56Z",
          "updatedAt": "2025-09-02T20:27:56Z"
        },
        {
          "author": "babisRoutis",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I find the use of JSON schema useful \n\n- The `claims` to the type metadata model primarily communicate the selective disclosure behavior of those claims, but not  their data model, hence  \n- JSON Schema (as used in the present spec) is the only way to communicate the data model (of the presentation) of a credential.\n\nI acknowledge there are issues to the JSON Schema, mainly, attributes that are `required` during issuance, may need to be marked as optional if they are always selectively disclosable.\n\nIf JSON Schema is removed, then\n1) Verifier can check if the presented SD-JWT-VC is disclosed properly (assuming use of type metadata), yet looses the ability to verify the contents of the credential.\n2) The same goes for Wallet.\n\nI consider that at least (1) is a feature that we shouldn't loose. \n",
          "createdAt": "2025-09-03T08:44:31Z",
          "updatedAt": "2025-09-03T08:44:31Z"
        },
        {
          "author": "adeinega",
          "authorAssociation": "CONTRIBUTOR",
          "body": "While I generally have nothing against the use of JSON Schema in the spec (for the most part), I find it to be a rather strong requirement to have\n\n> If a schema or schema_uri property is present, a Consumer MUST validate the Processed SD-JWT Payload JSON document resulting from the SD-JWT verification algorithm (as defined in Section 7.3 of [[I-D.ietf-oauth-selective-disclosure-jwt](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-selective-disclosure-jwt-22)]) against the JSON Schema document provided by the schema or schema_uri property.\n\nWhy is it `MUST`? I, personally, don't have a good answer. The first, and maybe stupid question that comes to my mind... what if a verifier isn't able to download the JSON Schema document from property schema_uri because it's offline, or it's in some form of air gapped env?\n\nI hope and honestly, I always expect an issuer to perform all the checks to validate credentials before it actually issues them (of course, including a step that checks a credential against the JSON Schema, among many other checks), and the issuer is free to use wherever JSON Schema makes most sense for it to do that. Note, this schema or schemas don't need to be available for consumers, there is no risk to leak info about claims, and their shape if I may.\n\nThen moving on to minor items, I think there are plenty of ways, too many easy ways, to screw things up with the JSON Schema to fail a validation of an SD-JWT VC. As an example, one messed up a tiny bit with [additionalProperties](https://json-schema.org/understanding-json-schema/reference/object#additionalproperties) or [requiredProperties](https://json-schema.org/understanding-json-schema/reference/object#required) for the JSON Schema available to consumers, and that results, in an inability to complete their validation. In other hand, if you don't specify all this information (in other words, the schema is open as it gets), what value does it bring to a consumer?\n\nThen, there are other things, JSON Schemas allow embedding of other JSON Schemas, https://json-schema.org/understanding-json-schema/structuring, how are you going to allow doing that securely, and it a privacy preserving way? Or, there should be a long list of what's allowed to do and what isn't. I doubt it's achievable in the scope of this spec.\n\nThen, one more thing I wanted to share, that was the very first (baby) step I took towards the JSON Schema documents in the context of this spec... it's about the vct claim and potential discrepancies around it, as for one issuer it's going to be an opaque string and for another one it's a URI and they both need to reflect that in the JSON Schema. Are we actually OK to have some confusion here and there? ...and let me remind you that the vct claim is defined as _StringOrURI_.\n\nWhatever I shared isn't a deep analysis of this topic, it's more like my thoughts after I barely scratched the surface on that.\n\nI've been using the JSON Schemas in different contexts for a long while, and so far, have been pretty happy with them.",
          "createdAt": "2025-09-03T21:42:37Z",
          "updatedAt": "2025-09-04T04:20:31Z"
        },
        {
          "author": "cre8",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Why is it MUST? I, personally, don't have a good answer. The first, and maybe stupid question that comes to my mind... what if a verifier isn't able to download the JSON Schema document from property schema_uri because it's offline, or it's in some form of air gapped env?\n\nIn the EUDI eco system we will have attestation rulebooks that are defining the schema like: https://eu-digital-identity-wallet.github.io/eudi-doc-architecture-and-reference-framework/latest/annexes/annex-3/annex-3.01-pid-rulebook/#:~:text=4.1%20Encoding%20of%20PID%20attributes%20and%20metadata\n\nSo having a JSON schema either in the rulebook or in the vct metadata is really helpful to validate if the provided credential has the required attributes.\n\nIt also helps issuer software to e.g. just load the vct metadata and based on this and the claims of the API request a credential can be created dynamically.\n\nAs discussed in another issue, I would suggest to reference two json schemas (one can be used by the issuer and holder to verify the issued credential, one for the verifier to check for the presentation. Of course both are optional and may be used for validation when provided.",
          "createdAt": "2025-09-04T06:34:09Z",
          "updatedAt": "2025-09-04T06:34:09Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> ...and let me remind you that the vct claim is defined as StringOrURI\n\nThanks for this reminder, honestly, I'd sort of forgotten. I was just suggesting elsewhere in this WG that the StringOrURI data type isn't great and probably shouldn't be used going forward https://github.com/oauth-wg/oauth-transaction-tokens/issues/195. I've created [#343](https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/343) to hopefully change that. I realize that probably wasn't the main point of your comment there. But something to consider nonetheless.",
          "createdAt": "2025-09-09T22:04:34Z",
          "updatedAt": "2025-09-09T22:04:34Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "In addition to the display metadata, there are necessarily going to be rule-books or documentation or specs that describe the \"schema\" of a type in text. And there's also the JWT claims registry which points to the specification that defines the respective claim including its datatype/syntax and semantic meaning. And, frankly, there's going to need to be policy in place at most verifiers for most credential types, that's not conveyable from schema. I realize there are some useful things about JSON schema but there's also a lot of overlap with things that are already in place and added complexity to a draft that aspires to be an RFC soon. \n\n> would suggest to reference two json schemas (via @cre8 in https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/342#issuecomment-3252133494)\n\nI very much don't think that adding yet another place to reference another schema is right direction. It just compounds on the opportunities for mistakes that @adeinega notes in https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/342#issuecomment-3250911422. ",
          "createdAt": "2025-09-11T22:28:06Z",
          "updatedAt": "2025-09-15T20:17:53Z"
        },
        {
          "author": "cre8",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@bc-pi after some discussion outside I agree that adding redundant schemas is not helping.\n\nDuring issuance the rulebook may be used (which is also covering authorization). During presentation the claims attribute may be used and the rulebook.\n\nSince there is no additional value, I now also recommend to remove it. It is very unlikely that rulebooks will reference the JSON Schema from a vct URL",
          "createdAt": "2025-09-12T05:39:17Z",
          "updatedAt": "2025-09-12T05:39:17Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Discussed this and the very related #345 with some folks, including the other editors, and generally agreed with the direction but wanted to account for #350 at the same time. ",
          "createdAt": "2025-09-16T19:27:31Z",
          "updatedAt": "2025-09-16T19:27:31Z"
        }
      ]
    },
    {
      "number": 343,
      "id": "I_kwDOJbVClc7KqYMn",
      "title": "StringOrURI should probably not be used",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/343",
      "state": "CLOSED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "https://datatracker.ietf.org/doc/html/draft-ietf-oauth-sd-jwt-vc-10#section-3.2.2.1-1\n\nI'm not sure the StringOrURI data type has proven to be real useful. Let's just say vct is a string. Or a URI, if that's needed. But the conditional must be a URI if it has a colon thing isn't something to propagate IMHO.\n\nI had similar feedback on its use in the transaction tokens draft https://github.com/oauth-wg/oauth-transaction-tokens/issues/195 so just trying to be consistent with myself. ",
      "createdAt": "2025-09-09T22:01:50Z",
      "updatedAt": "2025-09-11T19:34:18Z",
      "closedAt": "2025-09-11T19:34:18Z",
      "comments": [
        {
          "author": "adeinega",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don\u2019t see any value in defining anything as _StringOrURI_ as an invalid or malformed URI will always be a valid string.",
          "createdAt": "2025-09-09T22:11:26Z",
          "updatedAt": "2025-09-09T22:12:04Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't see value in it either. But the definition from https://datatracker.ietf.org/doc/html/rfc7519#section-2 I think says something different and arguably less useful in practice. \n\n> StringOrURI\n>       A JSON string value, with the additional requirement that while\n>       arbitrary string values MAY be used, any value containing a \":\"\n>       character MUST be a URI [[RFC3986](https://datatracker.ietf.org/doc/html/rfc3986)].  StringOrURI values are\n>       compared as case-sensitive strings with no transformations or\n>       canonicalizations applied.",
          "createdAt": "2025-09-09T22:29:34Z",
          "updatedAt": "2025-09-09T22:29:45Z"
        },
        {
          "author": "adeinega",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Every day you learn something new.\n\nJust as a random fact to share, Kubernetes very actively uses a \":\" character in many claims marked as \"StringOrURI\" in JWTs it issues (due to its name pattern conventions). So, strongly speaking, it does not fully adhere to the specification. Or... some parts of the spec are simply ignored.",
          "createdAt": "2025-09-09T23:01:40Z",
          "updatedAt": "2025-09-09T23:01:40Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "[#344](https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/344) ",
          "createdAt": "2025-09-11T19:34:16Z",
          "updatedAt": "2025-09-11T19:34:16Z"
        }
      ]
    },
    {
      "number": 346,
      "id": "I_kwDOJbVClc7LsbFl",
      "title": "Support of the default Issuer Signature Mechanism. Required or not?",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/346",
      "state": "OPEN",
      "author": "yaromin",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "discuss"
      ],
      "body": "The spec allows for extensibility by enabling ecosystems to specify additional Issuer Signature Mechanisms. Shouldn't ecosystems and their participants also be able to elect NOT to support mechanisms defined in section 3.5? \n\nGiven that this extensibility is created to, among others, address DIDs, I imagine that such pure did-as-iss-based ecosystems may elect not to support the two key mechanisms defined in this specification and still these ecosystems and its participants will be compliant with SD-JWT VC.",
      "createdAt": "2025-09-15T10:54:41Z",
      "updatedAt": "2025-10-04T13:12:13Z",
      "closedAt": null,
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I read and tried to write [3.5. ](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-sd-jwt-vc-10#section-3.5)[Issuer Signature Mechanisms](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-sd-jwt-vc-10#name-issuer-signature-mechanisms) to say that one mechanism (from those defined herein or an ecosystem/profile defined one) had to be used/supported in signing and validation. Which, while I don't think it's great from an interoperability perspective, would say that a pure DID-as-iss-based ecosystems that didn't  support the two key mechanisms defined in the draft would be SD-JWT VC compliant. If that makes sense? And do you read that sec 3.5 differently or does that help put it in context? ",
          "createdAt": "2025-09-15T16:30:27Z",
          "updatedAt": "2025-09-15T16:30:27Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "@yaromin, does that help answer you question at all? And/or are there additions or clarifications that could reasonably be made to the draft that would help?\n\n[edit: fixed classifications to clarifications]\n",
          "createdAt": "2025-09-29T20:00:55Z",
          "updatedAt": "2025-10-04T13:12:13Z"
        }
      ]
    },
    {
      "number": 347,
      "id": "I_kwDOJbVClc7LsoAn",
      "title": "HTTPS GET and HTTP GET normalisation",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/347",
      "state": "CLOSED",
      "author": "yaromin",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "pending close"
      ],
      "body": "Minor editorial: We have one instance of \"HTTPS GET\"in 11.3 and a couple of \"HTTP GET\" occurrences with further clarification of the HTTPS scheme in the latter. It would be worth normalising this. \n\nI'd change in 11.3:\n_The Verifier would create a HTTPS GET request to the Holder-specific well-known URI when the SD-JWT VC is verified._\nto something along these lines:\n_**HTTP GET** request to the Holder-specific well-known URI **(using HTTPS scheme)**, when the SD-JWT VC is verified_\n\n",
      "createdAt": "2025-09-15T11:09:32Z",
      "updatedAt": "2025-09-17T17:52:53Z",
      "closedAt": "2025-09-17T17:52:53Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks @yaromin, I believe this was recently addressed in https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/328/files which will show up in the next revision (-11 coming soon)  ",
          "createdAt": "2025-09-15T15:59:11Z",
          "updatedAt": "2025-09-15T15:59:30Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "that has been fixed in https://datatracker.ietf.org/doc/html/draft-ietf-oauth-sd-jwt-vc-11#section-11.3 but unfortunately the new references in that section need to be fixed (see #349)",
          "createdAt": "2025-09-16T12:16:02Z",
          "updatedAt": "2025-09-16T20:43:38Z"
        }
      ]
    },
    {
      "number": 349,
      "id": "I_kwDOJbVClc7L-C1E",
      "title": "wrong ref syntax",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/349",
      "state": "CLOSED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "https://datatracker.ietf.org/doc/html/draft-ietf-oauth-sd-jwt-vc-11#section-11.3-4 \n\n> This includes, but is not limited to, the use of the x5u parameter in JWKs ([RFC7517, section 4.6]), the jku parameter ([RFC7800, section 3.5]), and cases where a URL is used in the kid parameter ([RFC7800, section 3.4]). \n\npassive aggressive tag of @cre8 although admittedly I missed it too in my review of #340 \n\n",
      "createdAt": "2025-09-16T12:17:47Z",
      "updatedAt": "2025-09-16T20:40:03Z",
      "closedAt": "2025-09-16T20:38:40Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "ugh, forgot to make a branch... sorry\n\n```\nremote: Bypassed rule violations for refs/heads/main:\nremote: \nremote: - Changes must be made through a pull request.\nremote:\nTo github.com:oauth-wg/oauth-sd-jwt-vc.git\n   afbea26..8e4c95d  main -> main\n```",
          "createdAt": "2025-09-16T20:40:03Z",
          "updatedAt": "2025-09-16T20:40:03Z"
        }
      ]
    },
    {
      "number": 350,
      "id": "I_kwDOJbVClc7MCxd-",
      "title": "add extension point for type metadata",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/350",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "bc-pi"
      ],
      "labels": [
        "schema"
      ],
      "body": "Although not strictly prohibited, we should make it clear that type metadata can contain additional properties and if not known/understood must be ignored. This would allow us to define extensions in the future.",
      "createdAt": "2025-09-16T18:15:08Z",
      "updatedAt": "2025-09-23T19:23:42Z",
      "closedAt": "2025-09-23T19:23:42Z",
      "comments": []
    },
    {
      "number": 352,
      "id": "I_kwDOJbVClc7NSLwO",
      "title": "background_image is used in many OIDC4VCI configurations, would it be possible to add it as an option aside logo in the rendering method simple",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/352",
      "state": "CLOSED",
      "author": "ThierryThevenet",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-09-23T07:42:43Z",
      "updatedAt": "2025-10-02T16:55:07Z",
      "closedAt": "2025-10-02T16:55:07Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "have you seen (currently open) PR #335? it adds a `background_image` property to the Rendering Method \"simple\" ",
          "createdAt": "2025-09-23T12:21:23Z",
          "updatedAt": "2025-09-23T12:21:23Z"
        },
        {
          "author": "ThierryThevenet",
          "authorAssociation": "NONE",
          "body": "Sorry, I did  not. Good. Thank you.",
          "createdAt": "2025-09-23T13:13:15Z",
          "updatedAt": "2025-09-23T13:13:15Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "[#358](https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/358) fixes this ",
          "createdAt": "2025-10-02T16:55:07Z",
          "updatedAt": "2025-10-02T16:55:07Z"
        }
      ]
    },
    {
      "number": 354,
      "id": "I_kwDOJbVClc7Na-23",
      "title": "metadata to list extensions that consumers must know to properly validate SD JWTs",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/354",
      "state": "OPEN",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "pending close"
      ],
      "body": "<img width=\"810\" height=\"770\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/b9b11c8e-9a0f-4d19-80aa-02de73b17924\" />\n\n> @bc-pi, I think I failed to explain that well. I concur with your intuition.\n> \n> The idea isn\u2019t to provide a list of extensions that consumers must know to properly handle metadata, but rather a list of those extensions that consumers must know to properly validate SD JWTs (it just receives them through the metadata).\n\nAh, I see. Thanks for clarifying. I think that is outside the scope of this PR. And IMHO not necessary and arguably not a proper place. \n\n> If you're looking for widespread adoption, \n\nThat's the goal, yes. \n\n> it might be great to provide such mechanism.\n\nI disagree. But will create an issue for further discussion so this conversation can be resolved and get this incorporated.\n\n_Originally posted by @bc-pi in https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/345#discussion_r2373239594_\n            ",
      "createdAt": "2025-09-23T19:19:33Z",
      "updatedAt": "2025-10-02T17:01:49Z",
      "closedAt": null,
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "The use of Type Metadata is optional anyway, so it is very hard to imagine that any of the information would be critial. I suggest to close this issue.",
          "createdAt": "2025-10-02T17:01:49Z",
          "updatedAt": "2025-10-02T17:01:49Z"
        }
      ]
    },
    {
      "number": 355,
      "id": "I_kwDOJbVClc7PNEtU",
      "title": "A new field called \"Issuer Authorization URI - \"iss_auth\"\"",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/355",
      "state": "OPEN",
      "author": "tweeddalex",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "**Section 10.6** of the spec clearly expresses that Verifiers/Wallets SHOULD check the authorization of the issuer. However, the spec currently leaves no room for the issuer authorization to be included within the credential itself - this is a bit of a catch 22. \n\nThis omission , therefore, puts the entire onus of establishing issuer authorization on profile extensions, which will likely lead to multiple competing profiles and approaches - inhibiting interop.\n\nI propose a simple **optional** field within the spec called \"`iss_auth`\" which expects a HTTP(s) URI pointing towards an external resource detailing information about what the issuer is authorized to do. This could be something like a VC, a flat governance file or a FederationId. \n\nProfiles can then define how the content at the other end of the  \"iss_auth\" URI is processed to determine the authorization of the issuer; but, including this optional field allows this type of profile to be added without deviating from the core data model. Therefore, verifying software will be less likely to throw an error as the field is expected to be included. \n\nCurrently, if an SD-JWT VC is signed using a JWT Issuer Metadata URI, there is NO WAY to determine the authorization of the issuer without some type of out-of-band information. This is massively problematic in practice, and makes signing using JWT Issuer Metadata a very unsecure signing method.",
      "createdAt": "2025-10-02T06:57:55Z",
      "updatedAt": "2025-10-02T20:01:17Z",
      "closedAt": null,
      "comments": [
        {
          "author": "cre8",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The credential should not define its eco system, but it should be predefined by the verifier. This is self claiming and gives 0 security. Instead the following approach is used in the EUDI Wallet eco system according to the ARF\n\nLet's use the examples of diplomas in Germany:\n- An HR department will subscribe to an attestation rulebook that got published somewhere (catalog of attestations by a trusted source)\n- The verifier will accept the machine readable rulebook defining the SD JWT VC schema and also included a list of authorized issuers (allow list, root of trust, etc).\n- based on these information, the verifier is able to build a DCQL like \"present a credential of vct = german_diploma that got issued by this issuer that got its certificate of this PKI\".\n\nSee [technical discussion](https://github.com/eu-digital-identity-wallet/eudi-doc-standards-and-technical-specifications/discussions/428) for further information.",
          "createdAt": "2025-10-02T20:01:17Z",
          "updatedAt": "2025-10-02T20:01:17Z"
        }
      ]
    }
  ],
  "pulls": [
    {
      "number": 1,
      "id": "PR_kwDOJbVClc5PR0JG",
      "title": "Initial version",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/1",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-04-27T09:45:58Z",
      "updatedAt": "2023-05-05T11:52:08Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "0bd5b91af069299e1e5959451e1d62d015e5e693",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "awoie/feat-initi",
      "headRefOid": "d8349bf5232f65351e702e5336b85878c7c0ed0a",
      "closedAt": "2023-05-05T11:52:08Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 6,
      "id": "PR_kwDOJbVClc5P2d39",
      "title": "fix: initial version",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/6",
      "state": "MERGED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-05-05T10:32:46Z",
      "updatedAt": "2023-05-05T12:08:29Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "0bd5b91af069299e1e5959451e1d62d015e5e693",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "awoie/initial-version",
      "headRefOid": "005fc7a180b9508eb9541a097faf3c1ca98d06a3",
      "closedAt": "2023-05-05T12:08:29Z",
      "mergedAt": "2023-05-05T12:08:28Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "77093d2be6491063b7d05755e5c3d7531faf858b"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 7,
      "id": "PR_kwDOJbVClc5P27GF",
      "title": "fix: fixed readme",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/7",
      "state": "MERGED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-05-05T12:14:37Z",
      "updatedAt": "2023-05-05T12:14:52Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "77093d2be6491063b7d05755e5c3d7531faf858b",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "awoie/fix-readme",
      "headRefOid": "c34e4fb09d70d1bc75f209b756d1b66c95425512",
      "closedAt": "2023-05-05T12:14:52Z",
      "mergedAt": "2023-05-05T12:14:52Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "e3603bc1c00de98ef7aa7947f37c691d94377e86"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 8,
      "id": "PR_kwDOJbVClc5P295C",
      "title": "feat: added headers",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/8",
      "state": "MERGED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-05-05T12:24:46Z",
      "updatedAt": "2023-05-05T12:25:18Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "e3603bc1c00de98ef7aa7947f37c691d94377e86",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "awoie/header-params",
      "headRefOid": "0ac6254bc6595da1c13a12b7a10bb12091384d58",
      "closedAt": "2023-05-05T12:25:18Z",
      "mergedAt": "2023-05-05T12:25:18Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "2560fd87ff6227ec945123cae055677527d3b386"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 9,
      "id": "PR_kwDOJbVClc5P3DZq",
      "title": "feat: added payload params",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/9",
      "state": "MERGED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-05-05T12:43:23Z",
      "updatedAt": "2023-05-05T12:44:37Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "2560fd87ff6227ec945123cae055677527d3b386",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "awoie/feat-payload",
      "headRefOid": "6707a1b246d823992ae2bf6db55a57a9d961233b",
      "closedAt": "2023-05-05T12:44:37Z",
      "mergedAt": "2023-05-05T12:44:37Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "10de5de2b6cdcc95f116f6e320897221893be87c"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 12,
      "id": "PR_kwDOJbVClc5P8_Z3",
      "title": "make nbf optional",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/12",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I would personally remove it, but will not die on that hill",
      "createdAt": "2023-05-08T01:43:46Z",
      "updatedAt": "2023-05-22T14:01:14Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "cc8925f95271ee5df4e011d465fd433b3e635d4e",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "sakuran-nbf",
      "headRefOid": "384c3493822bbe5cd7cc7e262fdb0b11b1cb0a22",
      "closedAt": "2023-05-22T14:01:14Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "c2bo",
          "authorAssociation": "MEMBER",
          "body": "Please correct me if I am wrong, but I would understand VCDM2.0 `validFrom` as a mix of `iat` and `nbf`? \r\nVCDM 2.0 does not have a issued at field and only defines `validFrom`. \r\n\r\nSo my understanding would be:\r\n- if only `iat` is defined, we set the `validFrom` to the value of `iat`\r\n- if both are defined, we set `validFrom` to the value of `nbf` (and lose the iat information in the VCDM2.0 representation)\r\n\r\nSo either remove nbf completely or make it optional and basically overwrite iat (for the VCDM2.0) if it exists?\r\nDoes that make sense?\r\n",
          "createdAt": "2023-05-11T14:47:01Z",
          "updatedAt": "2023-05-11T14:47:01Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "> Please correct me if I am wrong, but I would understand VCDM2.0 `validFrom` as a mix of `iat` and `nbf`? VCDM 2.0 does not have a issued at field and only defines `validFrom`.\r\n> \r\n> So my understanding would be:\r\n> \r\n> * if only `iat` is defined, we set the `validFrom` to the value of `iat`\r\n> * if both are defined, we set `validFrom` to the value of `nbf` (and lose the iat information in the VCDM2.0 representation)\r\n> \r\n> So either remove nbf completely or make it optional and basically overwrite iat (for the VCDM2.0) if it exists? Does that make sense?\r\n\r\nFrom the VCDM 2.0 spec:\r\n\r\n> validFrom\r\nA [credential](https://www.w3.org/TR/vc-data-model-2.0/#dfn-credential) MUST have an validFrom [property](https://www.w3.org/TR/vc-data-model-2.0/#dfn-property). The value of the validFrom [property](https://www.w3.org/TR/vc-data-model-2.0/#dfn-property) MUST be a string value of an [[XMLSCHEMA11-2](https://www.w3.org/TR/xmlschema11-2/#dateTime)] combined date-time string representing the date and time the [credential](https://www.w3.org/TR/vc-data-model-2.0/#dfn-credential) becomes valid, which could be a date and time in the future. Note that this value represents the earliest point in time at which the information associated with the credentialSubject [property](https://www.w3.org/TR/vc-data-model-2.0/#dfn-property) becomes valid.\r\n\r\nFrom the JWT nbf spec:\r\n\r\n> The \"nbf\" (not before) claim identifies the time before which the JWT\r\n   MUST NOT be accepted for processing.  The processing of the \"nbf\"\r\n   claim requires that the current date/time MUST be after or equal to\r\n   the not-before date/time listed in the \"nbf\" claim.  Implementers MAY\r\n   provide for some small leeway, usually no more than a few minutes, to\r\n   account for clock skew.  Its value MUST be a number containing a\r\n   NumericDate value.  Use of this claim is OPTIONAL.\r\n\r\nIMO, we should map nbf <-> validFrom and iat <-> issuedAt or we don't map iat at all (which might be fine).\r\n",
          "createdAt": "2023-05-11T14:56:44Z",
          "updatedAt": "2023-05-11T14:56:44Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "> > Please correct me if I am wrong, but I would understand VCDM2.0 `validFrom` as a mix of `iat` and `nbf`? VCDM 2.0 does not have a issued at field and only defines `validFrom`.\r\n> > So my understanding would be:\r\n> > \r\n> > * if only `iat` is defined, we set the `validFrom` to the value of `iat`\r\n> > * if both are defined, we set `validFrom` to the value of `nbf` (and lose the iat information in the VCDM2.0 representation)\r\n> > \r\n> > So either remove nbf completely or make it optional and basically overwrite iat (for the VCDM2.0) if it exists? Does that make sense?\r\n> \r\n> From the VCDM 2.0 spec:\r\n> \r\n> > validFrom\r\n> > A [credential](https://www.w3.org/TR/vc-data-model-2.0/#dfn-credential) MUST have an validFrom [property](https://www.w3.org/TR/vc-data-model-2.0/#dfn-property). The value of the validFrom [property](https://www.w3.org/TR/vc-data-model-2.0/#dfn-property) MUST be a string value of an [[XMLSCHEMA11-2](https://www.w3.org/TR/xmlschema11-2/#dateTime)] combined date-time string representing the date and time the [credential](https://www.w3.org/TR/vc-data-model-2.0/#dfn-credential) becomes valid, which could be a date and time in the future. Note that this value represents the earliest point in time at which the information associated with the credentialSubject [property](https://www.w3.org/TR/vc-data-model-2.0/#dfn-property) becomes valid.\r\n> \r\n> From the JWT nbf spec:\r\n> \r\n> > The \"nbf\" (not before) claim identifies the time before which the JWT\r\n> > MUST NOT be accepted for processing.  The processing of the \"nbf\"\r\n> > claim requires that the current date/time MUST be after or equal to\r\n> > the not-before date/time listed in the \"nbf\" claim.  Implementers MAY\r\n> > provide for some small leeway, usually no more than a few minutes, to\r\n> > account for clock skew.  Its value MUST be a number containing a\r\n> > NumericDate value.  Use of this claim is OPTIONAL.\r\n> \r\n> IMO, we should map nbf <-> validFrom and iat <-> issuedAt or we don't map iat at all (which might be fine).\r\n\r\n@c2bo I agree that `issuedAt` is not defined in VCDM 2.0. One of the reasons is that it is redundant with the date time in the `proof` of the data integrity proof. For that reason we can probably just drop it entirely.",
          "createdAt": "2023-05-11T14:59:09Z",
          "updatedAt": "2023-05-11T14:59:38Z"
        },
        {
          "author": "c2bo",
          "authorAssociation": "MEMBER",
          "body": "Hmm yeah, vc-jwt seems to do exactly that - drop `iat` and use `nbf` for `validFrom`. ",
          "createdAt": "2023-05-11T17:38:39Z",
          "updatedAt": "2023-05-11T17:38:39Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "I disagree with the request for changes. We don't have to follow VC-JWT mapping. The cleanest is to map iat to ValidFrom.",
          "createdAt": "2023-05-13T12:55:48Z",
          "updatedAt": "2023-05-13T12:56:13Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "> I disagree with the request for changes. We don't have to follow VC-JWT mapping. The cleanest is to map iat to ValidFrom.\r\n\r\nI see where you are coming from. Would you be ok with the following:\r\n- make `nbf` optional\r\n- in the mapping section: \r\n  - if `nbf` was omitted, use `iat` as default for `ValidFrom`\r\n  - if `nbf` is present, use `nbf` for `ValidFrom`\r\n\r\nIMO, that would be the cleanest.",
          "createdAt": "2023-05-15T12:04:36Z",
          "updatedAt": "2023-05-15T12:04:36Z"
        },
        {
          "author": "c2bo",
          "authorAssociation": "MEMBER",
          "body": "> > I disagree with the request for changes. We don't have to follow VC-JWT mapping. The cleanest is to map iat to ValidFrom.\r\n> \r\n> I see where you are coming from. Would you be ok with the following:\r\n> \r\n> * make `nbf` optional\r\n> * in the mapping section:\r\n>   \r\n>   * if `nbf` was omitted, use `iat` as default for `ValidFrom`\r\n>   * if `nbf` is present, use `nbf` for `ValidFrom`\r\n> \r\n> IMO, that would be the cleanest.\r\n\r\nThis feels more natural to me and is pretty much what I was thinking about \ud83d\udc4d ",
          "createdAt": "2023-05-16T13:18:50Z",
          "updatedAt": "2023-05-16T13:18:50Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Once PR #61 is merged, this should be included.",
          "createdAt": "2023-05-22T13:24:31Z",
          "updatedAt": "2023-05-22T13:24:31Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #61 got merged. closing this PR.",
          "createdAt": "2023-05-22T14:00:39Z",
          "updatedAt": "2023-05-22T14:00:39Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5UpVdq",
          "commit": {
            "abbreviatedOid": "384c349"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Shouldn't `nbf` map to `validFrom` in VCDM 2.0? If `validFrom` is MUST as per VCDM 2.0, how would we do the mapping?",
          "createdAt": "2023-05-10T08:58:53Z",
          "updatedAt": "2023-05-10T08:58:53Z",
          "comments": []
        }
      ]
    },
    {
      "number": 14,
      "id": "PR_kwDOJbVClc5P9AKz",
      "title": "adding text on sub claim",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/14",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "no binding btw sub and cnf necessary",
      "createdAt": "2023-05-08T01:50:45Z",
      "updatedAt": "2023-05-10T14:06:40Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "cc8925f95271ee5df4e011d465fd433b3e635d4e",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "sakurann-sub-cnf",
      "headRefOid": "2840dd585c29edacb5223271a7b9361b918af677",
      "closedAt": "2023-05-10T14:06:40Z",
      "mergedAt": "2023-05-10T14:06:40Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "1c5b665daace2879cbad08d864fe7e0f687c6775"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5UrqVV",
          "commit": {
            "abbreviatedOid": "2840dd5"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "lgtm, thank you",
          "createdAt": "2023-05-10T14:05:48Z",
          "updatedAt": "2023-05-10T14:05:48Z",
          "comments": []
        }
      ]
    },
    {
      "number": 15,
      "id": "PR_kwDOJbVClc5P9AzY",
      "title": "update the text on cnf claim",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/15",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "discuss"
      ],
      "body": "need to discuss how much we want to mandate.",
      "createdAt": "2023-05-08T01:56:10Z",
      "updatedAt": "2023-05-26T14:28:21Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "f3aa611889067732af8fd8a00d01abeb9331d30e",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "sakurann-cnf",
      "headRefOid": "2ca5321bdee9b354c9bec8ca1e25ccc6254b0d5c",
      "closedAt": "2023-05-25T11:46:45Z",
      "mergedAt": "2023-05-25T11:46:45Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "200d4236dcb22e5b43049da7a992f6ec12d80559"
      },
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "let's discuss this issue here #66 ",
          "createdAt": "2023-05-22T14:03:11Z",
          "updatedAt": "2023-05-22T14:03:11Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5Urp4c",
          "commit": {
            "abbreviatedOid": "20d39b8"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Shouldn't this limitation go in the hi-assurance profile only?",
          "createdAt": "2023-05-10T14:04:55Z",
          "updatedAt": "2023-05-10T14:04:55Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5VpR_k",
          "commit": {
            "abbreviatedOid": "20d39b8"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-22T15:25:58Z",
          "updatedAt": "2023-05-22T15:25:58Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I think it is sufficient to use \"SHOULD\" and explain why (no key rotation required, self contained). There might be reasons/solutions in the future where people want to use other variants of the claim, which we should not preclude. I would make it a MUST in the high assurance profile (for sake of interoperability). ",
              "createdAt": "2023-05-22T15:25:58Z",
              "updatedAt": "2023-05-22T15:25:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5VpecZ",
          "commit": {
            "abbreviatedOid": "20d39b8"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-22T15:50:31Z",
          "updatedAt": "2023-05-22T15:50:31Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I don't understand why this limitation is necessary in this spec?",
              "createdAt": "2023-05-22T15:50:31Z",
              "updatedAt": "2023-05-22T15:50:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5Vr79Y",
          "commit": {
            "abbreviatedOid": "20d39b8"
          },
          "author": "peppelinux",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-22T21:05:53Z",
          "updatedAt": "2023-05-22T21:05:54Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I'd suggest\r\n\r\n`It SHOULD be used when Cryptographic holder binding is required` and then `It SHOULD contain a JWK as defined ...` since there may be in the future different kind of cnf objects\r\n\r\nregarding `Other representations of the key MUST NOT be used` -> why not? Since together with a JWK there may be a different but equivalent method to represent the same object, in this case the final result must be the same otherwise the attestation should be considered not valid\r\n\r\n\r\n\r\n",
              "createdAt": "2023-05-22T21:05:53Z",
              "updatedAt": "2023-05-22T21:05:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5VxCbk",
          "commit": {
            "abbreviatedOid": "20d39b8"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-23T08:00:46Z",
          "updatedAt": "2023-05-23T08:00:46Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "The \"OPTIONAL... MAY\" does not work, and I think as @tlodderstedt mentioned, a SHOULD is in order. I suggest the following text:\r\n\r\n```suggestion\r\n    * RECOMMENDED when Cryptographic Holder Binding is to be supported. Contains the confirmation method as defined in [@!RFC7800]. It SHOULD contain a JWK as defined in Section 3.2 of [@!RFC7800] and in this case, the `kid` (Key ID) member MUST be present in the JWK.  For Cryptographic Holder Binding, the Holder Binding JWT in the Combined Format for Presentation MUST be signed by the key identified in this claim.\r\n```",
              "createdAt": "2023-05-23T08:00:46Z",
              "updatedAt": "2023-05-23T08:00:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5VxFqp",
          "commit": {
            "abbreviatedOid": "20d39b8"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-23T08:07:50Z",
          "updatedAt": "2023-05-23T08:07:51Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "@Sakurann That would work for me. If you commit @danielfett suggestions, I'd approve this PR.",
              "createdAt": "2023-05-23T08:07:51Z",
              "updatedAt": "2023-05-23T08:07:51Z"
            }
          ]
        }
      ]
    },
    {
      "number": 16,
      "id": "PR_kwDOJbVClc5P9DCp",
      "title": "add JSON Web Token Claims Registration to IANA",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/16",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-05-08T02:05:17Z",
      "updatedAt": "2023-05-10T13:53:46Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "cc8925f95271ee5df4e011d465fd433b3e635d4e",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "sakurann-type-claim",
      "headRefOid": "6c126dbf7b8b7fb7d136dc803994ae7b9fd0352a",
      "closedAt": "2023-05-10T13:53:45Z",
      "mergedAt": "2023-05-10T13:53:45Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "351db9a9043b4dba43887f109072155af10c7016"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5Urje-",
          "commit": {
            "abbreviatedOid": "6c126db"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "lgtm",
          "createdAt": "2023-05-10T13:53:28Z",
          "updatedAt": "2023-05-10T13:53:28Z",
          "comments": []
        }
      ]
    },
    {
      "number": 17,
      "id": "PR_kwDOJbVClc5QBPDR",
      "title": "Changes from my first pass",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/17",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-05-08T17:07:47Z",
      "updatedAt": "2023-05-10T08:54:39Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "cc8925f95271ee5df4e011d465fd433b3e635d4e",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "danielfett/first-pass",
      "headRefOid": "90446aefa3138436201d64d2c2c4678e600e5c3c",
      "closedAt": "2023-05-10T08:54:39Z",
      "mergedAt": "2023-05-10T08:54:39Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "7229d6b19b565ae1edc2fc1c81c9c7c28ef6b0f4"
      },
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "@danielfett do you know how to fix the build errors?",
          "createdAt": "2023-05-08T17:41:02Z",
          "updatedAt": "2023-05-08T17:41:02Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5UeRzL",
          "commit": {
            "abbreviatedOid": "594648d"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "great improvement to the spec. thanks a lot!",
          "createdAt": "2023-05-08T17:39:17Z",
          "updatedAt": "2023-05-08T17:39:17Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5UpN-7",
          "commit": {
            "abbreviatedOid": "594648d"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "i'll just merge those changes and fix them on my machine.",
          "createdAt": "2023-05-10T08:46:43Z",
          "updatedAt": "2023-05-10T08:46:43Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5UpP5Z",
          "commit": {
            "abbreviatedOid": "594648d"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "let's fix references later and create a new issue for that",
          "createdAt": "2023-05-10T08:50:00Z",
          "updatedAt": "2023-05-10T08:51:09Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\n(TBD: see oauth-selective-disclosure-jwt) using JSON payloads.\r\n```",
              "createdAt": "2023-05-10T08:50:00Z",
              "updatedAt": "2023-05-10T08:51:09Z"
            },
            {
              "originalPosition": 66,
              "body": "```suggestion\r\n 1. REQUIRED. Verify the SD-JWT-VC as defined in Section 6.2 of (TBD: see oauth-selective-disclosure-jwt). For the verification, the `iss` claim in the SD-JWT-VC MAY be used to retrieve the public key from the JWT Issuer Metadata configuration (as defined in {#jwt-issuer-metadata}) of the SD-JWT-VC issuer. A verifier MAY use alternative methods to obtain the public key to verify the signature of the SD-JWT.\r\n```",
              "createdAt": "2023-05-10T08:50:47Z",
              "updatedAt": "2023-05-10T08:51:09Z"
            }
          ]
        }
      ]
    },
    {
      "number": 18,
      "id": "PR_kwDOJbVClc5QKsKw",
      "title": "fix: removed trailing white spaces",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/18",
      "state": "MERGED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-05-10T08:55:49Z",
      "updatedAt": "2023-05-10T08:56:51Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "7229d6b19b565ae1edc2fc1c81c9c7c28ef6b0f4",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "feat/fix-build-errors",
      "headRefOid": "8fc57342adf1a1ceeb58a90a577dd87e6b2a07b9",
      "closedAt": "2023-05-10T08:56:51Z",
      "mergedAt": "2023-05-10T08:56:51Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "13c4f9a8b8b2478e672c18fc500ce95731ebbcec"
      },
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "merging since this is just fixing trailing whitespaces",
          "createdAt": "2023-05-10T08:56:47Z",
          "updatedAt": "2023-05-10T08:56:47Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 20,
      "id": "PR_kwDOJbVClc5QMMeA",
      "title": "feat: added more intro",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/20",
      "state": "MERGED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Finished introduction section",
      "createdAt": "2023-05-10T12:56:55Z",
      "updatedAt": "2023-05-10T14:18:59Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "13c4f9a8b8b2478e672c18fc500ce95731ebbcec",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "feat/finish-intro",
      "headRefOid": "505266ccf6879425fe9bffb37b58e066a967d62b",
      "closedAt": "2023-05-10T14:18:59Z",
      "mergedAt": "2023-05-10T14:18:59Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "c95245a2d09249352442a28267291f5d7ce92302"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 21,
      "id": "PR_kwDOJbVClc5QMf-X",
      "title": "feat: added terms and definitions section; updated data format; fixes #10",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/21",
      "state": "MERGED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "- Added terms and definitions section; made some changes data formats based on terms and definitions section\r\n- fixes #10",
      "createdAt": "2023-05-10T13:39:31Z",
      "updatedAt": "2023-05-26T14:29:01Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "13c4f9a8b8b2478e672c18fc500ce95731ebbcec",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "feat/add-terminology",
      "headRefOid": "c9f98ad0a8b7ee9bc814c0f1e51c51160fd173e5",
      "closedAt": "2023-05-10T14:29:50Z",
      "mergedAt": "2023-05-10T14:29:50Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "d31441235ff637f0607d07d5768c109337643a48"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 22,
      "id": "PR_kwDOJbVClc5QMohM",
      "title": "feat: added media type registration info",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/22",
      "state": "MERGED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "feat: added media type registration info",
      "createdAt": "2023-05-10T13:59:43Z",
      "updatedAt": "2023-05-10T14:15:06Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "351db9a9043b4dba43887f109072155af10c7016",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "feat/add-iana-reg",
      "headRefOid": "723aeea2d46e5a5a018f332834fdae42c94ba12d",
      "closedAt": "2023-05-10T14:15:05Z",
      "mergedAt": "2023-05-10T14:15:05Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "cd54cad2d8ca71d74a3eecb9be03db1f28cc4d63"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 26,
      "id": "PR_kwDOJbVClc5QNDiq",
      "title": "fix: some editorial fixes",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/26",
      "state": "MERGED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-05-10T14:53:43Z",
      "updatedAt": "2023-05-26T14:29:00Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "d31441235ff637f0607d07d5768c109337643a48",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "feat/various-edits",
      "headRefOid": "9696a912ea4cf75e743a4e4aa73aa1ac45b894bb",
      "closedAt": "2023-05-10T14:55:04Z",
      "mergedAt": "2023-05-10T14:55:04Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "5a074d3bb774dfeaa74f433ef4aa2c0943330009"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 28,
      "id": "PR_kwDOJbVClc5QNh5a",
      "title": "Feat/add examples",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/28",
      "state": "MERGED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-05-10T16:18:38Z",
      "updatedAt": "2023-05-26T14:28:58Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "5a074d3bb774dfeaa74f433ef4aa2c0943330009",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "feat/add-examples",
      "headRefOid": "14e25b0df6b7aa7d6d39f3cc47a0ab758063cf71",
      "closedAt": "2023-05-10T16:20:15Z",
      "mergedAt": "2023-05-10T16:20:15Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "4d83ee0402ce47f439d82e59b0128402b55e66e1"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 32,
      "id": "PR_kwDOJbVClc5QNrM_",
      "title": "Add mapping algo for VCs",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/32",
      "state": "MERGED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-05-10T16:53:01Z",
      "updatedAt": "2023-05-26T14:28:55Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "4d83ee0402ce47f439d82e59b0128402b55e66e1",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "feat/mapping",
      "headRefOid": "8b66ad3e90433111c621a029d09f84e8baca8d49",
      "closedAt": "2023-05-10T17:29:24Z",
      "mergedAt": "2023-05-10T17:29:24Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "23ebea27286bc7bc3878ebe1d7993399730aea2c"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 38,
      "id": "PR_kwDOJbVClc5QTe1j",
      "title": "fix: made types a single value, fixes #35 ",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/38",
      "state": "MERGED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #35 ",
      "createdAt": "2023-05-11T15:20:33Z",
      "updatedAt": "2023-05-26T14:28:45Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "23ebea27286bc7bc3878ebe1d7993399730aea2c",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "awoie/fix-35",
      "headRefOid": "9b5b29a46e9a48df2211ae426193bc9edbbea481",
      "closedAt": "2023-05-11T15:21:15Z",
      "mergedAt": "2023-05-11T15:21:15Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "ca3dac286df942065e93ba95c1f949cd71ead767"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 39,
      "id": "PR_kwDOJbVClc5QX7dE",
      "title": "Some editorial changes",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/39",
      "state": "MERGED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-05-12T10:18:39Z",
      "updatedAt": "2023-05-26T14:28:44Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "ca3dac286df942065e93ba95c1f949cd71ead767",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "awoie/editorial-2",
      "headRefOid": "df29922e312dc14e32ed35bb5210b008dfb9751d",
      "closedAt": "2023-05-12T10:20:44Z",
      "mergedAt": "2023-05-12T10:20:44Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "dd87576d16445a8dc4438eac191b217f6799459b"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 52,
      "id": "PR_kwDOJbVClc5QmXhI",
      "title": "propose some editorial changes",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/52",
      "state": "MERGED",
      "author": "tlodderstedt",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-05-16T10:20:47Z",
      "updatedAt": "2023-05-26T14:28:50Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "dd87576d16445a8dc4438eac191b217f6799459b",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "tlodderstedt-editorial",
      "headRefOid": "e8e084d3b20f6e53fbf8fa2e765b4e5ba6da151e",
      "closedAt": "2023-05-17T19:27:15Z",
      "mergedAt": "2023-05-17T19:27:15Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "cb5d9c72eb081b37e3fc060fd90276e06c3e2709"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5VUUPS",
          "commit": {
            "abbreviatedOid": "e8e084d"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-05-17T19:16:52Z",
          "updatedAt": "2023-05-17T19:16:52Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5VUZf1",
          "commit": {
            "abbreviatedOid": "e8e084d"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "lgtm",
          "createdAt": "2023-05-17T19:27:09Z",
          "updatedAt": "2023-05-17T19:27:09Z",
          "comments": []
        }
      ]
    },
    {
      "number": 53,
      "id": "PR_kwDOJbVClc5Qmsr-",
      "title": "Added ack sections, removed notices section, added initial doc history",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/53",
      "state": "MERGED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #49, fixes #50, fixes #51",
      "createdAt": "2023-05-16T11:20:24Z",
      "updatedAt": "2023-05-26T14:28:43Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "dd87576d16445a8dc4438eac191b217f6799459b",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "awoie/fix-51",
      "headRefOid": "19f1eb75b8ec318a3315bd5d29062147cd8844f6",
      "closedAt": "2023-05-16T11:21:29Z",
      "mergedAt": "2023-05-16T11:21:29Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "e65d4bbaae7652a6c48e74d439f36244253b83cc"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 54,
      "id": "PR_kwDOJbVClc5QmuTq",
      "title": "Merged scope with overview section",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/54",
      "state": "MERGED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #30",
      "createdAt": "2023-05-16T11:24:36Z",
      "updatedAt": "2023-05-26T14:28:42Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "e65d4bbaae7652a6c48e74d439f36244253b83cc",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "awoie/fix-30",
      "headRefOid": "8f46da816cd619c86aee6591120c4a62fee2aec5",
      "closedAt": "2023-05-16T11:25:18Z",
      "mergedAt": "2023-05-16T11:25:18Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "61dae60c321f19739d750b0ec6abbc27c9977022"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 55,
      "id": "PR_kwDOJbVClc5QtrcA",
      "title": "Flow Diagram",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/55",
      "state": "MERGED",
      "author": "andresuribe87",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses #31 \r\n\r\nThe flow diagram has the additional step of the holder retrieving the status VC.\r\n\r\nI am not convinced this should be part of the spec because the credentialStatus is an extension point, and different types could work in different ways. ",
      "createdAt": "2023-05-17T13:09:48Z",
      "updatedAt": "2023-05-24T20:11:19Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "b954505f848dc2cd749c5e6655799ca30048f47d",
      "headRepository": "andresuribe87/draft-terbu-sd-jwt-vc",
      "headRefName": "patch-1",
      "headRefOid": "4cd74d2d4148603c33ab5531bcd0548e1924a6bb",
      "closedAt": "2023-05-24T20:11:19Z",
      "mergedAt": "2023-05-24T20:11:19Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "11eef80c75ac5535f17ce6384f7376a1b30046b0"
      },
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "AFAIK, only the trailing whitespace prevents compiling - I don't think the long lines do, too.",
          "createdAt": "2023-05-23T10:45:26Z",
          "updatedAt": "2023-05-23T10:45:26Z"
        },
        {
          "author": "andresuribe87",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@awoie is it expected for the github actions check to fail? Not sure how to debug that one.\r\n",
          "createdAt": "2023-05-23T19:29:37Z",
          "updatedAt": "2023-05-23T19:29:37Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "> @awoie is it expected for the github actions check to fail? Not sure how to debug that one.\r\n\r\nI think this issue is due to another PR I just merged. @danielfett might be able to fix it. I have to roll back the previous PR.",
          "createdAt": "2023-05-23T19:32:01Z",
          "updatedAt": "2023-05-23T19:32:01Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "@andresuribe87 can you rebase main?",
          "createdAt": "2023-05-24T13:24:25Z",
          "updatedAt": "2023-05-24T13:24:25Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "> @andresuribe87 can you rebase main?\r\n\r\nI mean sync from vcstuff:main and then rebase because you will need #76 ",
          "createdAt": "2023-05-24T13:25:46Z",
          "updatedAt": "2023-05-24T13:25:46Z"
        },
        {
          "author": "andresuribe87",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@awoie cool, waiting for workflow approval now. ",
          "createdAt": "2023-05-24T20:03:18Z",
          "updatedAt": "2023-05-24T20:03:18Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5VS7lM",
          "commit": {
            "abbreviatedOid": "0149833"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Thank you. LGTM, just needs to change the terms of the labels.",
          "createdAt": "2023-05-17T15:40:30Z",
          "updatedAt": "2023-05-17T15:40:52Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "Thanks for the PR. can you change the terms used for the labels of the lines? Let's avoid SD-JWT and use Verifiable Credentials and Verifiable Presentations instead.",
              "createdAt": "2023-05-17T15:40:30Z",
              "updatedAt": "2023-05-17T15:40:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5VUTvq",
          "commit": {
            "abbreviatedOid": "0149833"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-17T19:15:16Z",
          "updatedAt": "2023-05-17T19:15:16Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "We did not introduce the status provider yet. If we want to have it here (can make sense), let's introduce it somewhere first.",
              "createdAt": "2023-05-17T19:15:16Z",
              "updatedAt": "2023-05-17T19:15:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5VbOlf",
          "commit": {
            "abbreviatedOid": "cad5733"
          },
          "author": "andresuribe87",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-18T18:09:42Z",
          "updatedAt": "2023-05-18T18:09:46Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "Added it to the terminology section. ",
              "createdAt": "2023-05-18T18:09:43Z",
              "updatedAt": "2023-05-18T18:09:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5VbO8o",
          "commit": {
            "abbreviatedOid": "0149833"
          },
          "author": "andresuribe87",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-18T18:10:20Z",
          "updatedAt": "2023-05-18T18:10:21Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "Done in [cad5733](https://github.com/vcstuff/draft-terbu-sd-jwt-vc/pull/55/commits/cad5733884ac2c61748350a314965f95e8a5d749)",
              "createdAt": "2023-05-18T18:10:20Z",
              "updatedAt": "2023-05-18T18:10:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5VxHWy",
          "commit": {
            "abbreviatedOid": "cad5733"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "lgtm after you committed my suggestion",
          "createdAt": "2023-05-23T08:11:37Z",
          "updatedAt": "2023-05-23T08:12:09Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\n: An entity that provides status information (e.g. revocation) about a Verifiable Credential.\r\n```",
              "createdAt": "2023-05-23T08:11:37Z",
              "updatedAt": "2023-05-23T08:12:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5Vx5Sz",
          "commit": {
            "abbreviatedOid": "037c72e"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thank you very much! LGTM.",
          "createdAt": "2023-05-23T09:29:55Z",
          "updatedAt": "2023-05-23T09:29:55Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5Vx6th",
          "commit": {
            "abbreviatedOid": "037c72e"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Can you pls fix the following issues:\r\n\r\n```\r\n/github/workspace/draft-terbu-sd-jwt-vc.xml(165): Warning: Too long line found (L221), 3 characters longer than 72 characters: \r\n              +------------+                                 +------------+\r\n/github/workspace/draft-terbu-sd-jwt-vc.xml(165): Warning: Too long line found (L222), 3 characters longer than 72 characters: \r\n              |            |                                 |   Status   |\r\n/github/workspace/draft-terbu-sd-jwt-vc.xml(165): Warning: Too long line found (L223), 3 characters longer than 72 characters: \r\n              |   Holder   |-------- optionally ------------>|  Provider  |\r\n/github/workspace/draft-terbu-sd-jwt-vc.xml(165): Warning: Too long line found (L2[24](https://github.com/vcstuff/draft-terbu-sd-jwt-vc/actions/runs/5055609076/jobs/9072030782?pr=55#step:9:25)), 3 characters longer than 72 characters: \r\n              |            |       retrieves status          |            |\r\n/github/workspace/draft-terbu-sd-jwt-vc.xml(165): Warning: Too long line found (L2[25](https://github.com/vcstuff/draft-terbu-sd-jwt-vc/actions/runs/5055609076/jobs/9072030782?pr=55#step:9:26)), 3 characters longer than 72 characters: \r\n              +------------+             VC                  +------------+\r\n/github/workspace/draft-terbu-sd-jwt-vc.xml(748): Warning: Too long line found (L854), 3 characters longer than 72 characters: \r\n  vc.credentialSubject = insert_claims_into_credential_subject(vc, payload)\r\nlib/trace.sh draft-terbu-sd-jwt-vc.html -s xml2rfc-html xml2rfc -q -s 'Setting consensus=\"true\" for IETF STD document' --rfc-base-url https://www.rfc-editor.org/rfc/ --id-base-url https://datatracker.ietf.org/doc/html/ --cache=/github/workspace/.refcache --css=lib/v3.css --metadata-js-url=/dev/null draft-terbu-sd-jwt-vc.xml -o draft-terbu-sd-jwt-vc.html --html\r\n181:           +------------+                                 +------------+ \r\n185:           +------------+             VC                  +------------+ \r\n*** Run 'make fix-lint' to automatically fix some errors\r\ndraft-terbu-sd-jwt-vc.md contains trailing whitespace\r\nmake[1]: *** [lib/main.mk:201: lint-whitespace] Error 1\r\nmake[1]: Target 'lint' not remade because of errors.\r\nrm draft-terbu-sd-jwt-vc.xml\r\nmake: *** [lib/main.mk:16: all] Error 2\r\n```",
          "createdAt": "2023-05-23T09:32:04Z",
          "updatedAt": "2023-05-23T09:32:04Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5V2wdI",
          "commit": {
            "abbreviatedOid": "4cd74d2"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "lgtm now. thank you!",
          "createdAt": "2023-05-23T19:22:17Z",
          "updatedAt": "2023-05-24T20:02:39Z",
          "comments": []
        }
      ]
    },
    {
      "number": 56,
      "id": "PR_kwDOJbVClc5Q30V1",
      "title": "Fix some references to address Issue #19",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/56",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "I left some references open that will be addressed by other pull requests changing the surrounding text in order to avoid merge conflicts.",
      "createdAt": "2023-05-19T08:39:13Z",
      "updatedAt": "2023-05-26T14:28:49Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "cb5d9c72eb081b37e3fc060fd90276e06c3e2709",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "danielfett/fix-19",
      "headRefOid": "deb7991d9f3a314401740ee91c3a92043a7afdf5",
      "closedAt": "2023-05-19T09:31:28Z",
      "mergedAt": "2023-05-19T09:31:28Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "87d93fbc92c96049b6e1036537bc3330f495fd4f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5Vepby",
          "commit": {
            "abbreviatedOid": "deb7991"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "lgtm",
          "createdAt": "2023-05-19T09:31:19Z",
          "updatedAt": "2023-05-19T09:31:19Z",
          "comments": []
        }
      ]
    },
    {
      "number": 59,
      "id": "PR_kwDOJbVClc5Q4kig",
      "title": "Attempt to clean up the terminology, fix Issue #45",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/59",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Also fixes some typos and small editorial stuff that I noticed while working on this.",
      "createdAt": "2023-05-19T11:21:26Z",
      "updatedAt": "2023-05-26T14:28:48Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "184bf2121b2cf75671653a2cbc4d2c5cd2b66c4c",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "danielfett/fix-45",
      "headRefOid": "92ffccd2cc4eb4767ff75e6c1c035a3b41ed189e",
      "closedAt": "2023-05-23T07:44:47Z",
      "mergedAt": "2023-05-23T07:44:47Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "4fe832b11adbc7e202f8bd49ad42345529d9758e"
      },
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "@danielfett can you fix trailing whitespaces?",
          "createdAt": "2023-05-19T11:30:57Z",
          "updatedAt": "2023-05-19T11:30:57Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5VfR8m",
          "commit": {
            "abbreviatedOid": "6e68185"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "lgtm, had a similar pending pr but let's merge yours in.",
          "createdAt": "2023-05-19T11:30:21Z",
          "updatedAt": "2023-05-19T11:30:21Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5Vw8hd",
          "commit": {
            "abbreviatedOid": "92ffccd"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-05-23T07:51:04Z",
          "updatedAt": "2023-05-23T07:51:04Z",
          "comments": []
        }
      ]
    },
    {
      "number": 61,
      "id": "PR_kwDOJbVClc5RAU3-",
      "title": "Added VP section and other things",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/61",
      "state": "MERGED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #58, fixes #46, fixes #44, fixes #27,  fixes #19",
      "createdAt": "2023-05-22T11:07:59Z",
      "updatedAt": "2023-05-26T14:28:33Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "87d93fbc92c96049b6e1036537bc3330f495fd4f",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "awoie/vp-algorithm",
      "headRefOid": "cafeaea1171ba820b068a6fd6303266fa3e1f6d8",
      "closedAt": "2023-05-22T13:57:51Z",
      "mergedAt": "2023-05-22T13:57:51Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "3b9bc544ff8adffb5dcb4c0c2137bd3c77b972ee"
      },
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "I believe I addressed all the things except the ones where I created issues for @tlodderstedt . Please review again @tlodderstedt .",
          "createdAt": "2023-05-22T13:00:48Z",
          "updatedAt": "2023-05-22T13:00:48Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "@tlodderstedt approved, merging this.",
          "createdAt": "2023-05-22T13:57:45Z",
          "updatedAt": "2023-05-22T13:57:45Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5Vnf8L",
          "commit": {
            "abbreviatedOid": "e1b9b2d"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2023-05-22T11:26:59Z",
          "updatedAt": "2023-05-22T11:49:19Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "Why does a VP need to be an envelope?",
              "createdAt": "2023-05-22T11:26:59Z",
              "updatedAt": "2023-05-22T11:49:20Z"
            },
            {
              "originalPosition": 32,
              "body": "```suggestion\r\ndescribed in [@!I-D.ietf-oauth-selective-disclosure-jwt].\r\n```",
              "createdAt": "2023-05-22T11:28:35Z",
              "updatedAt": "2023-05-22T11:49:20Z"
            },
            {
              "originalPosition": 55,
              "body": "```suggestion\r\nsome End-User (Holder), who then can presents this credential to multiple Verifiers.\r\n```",
              "createdAt": "2023-05-22T11:29:11Z",
              "updatedAt": "2023-05-22T11:49:20Z"
            },
            {
              "originalPosition": 56,
              "body": "Do we really need to explain that in lengths?",
              "createdAt": "2023-05-22T11:33:30Z",
              "updatedAt": "2023-05-22T11:49:20Z"
            },
            {
              "originalPosition": 96,
              "body": "```suggestion\r\nexcept for Decoy Digests as per section 5.1.1.3. of [@!I-D.ietf-oauth-selective-disclosure-jwt].\r\n```",
              "createdAt": "2023-05-22T11:38:49Z",
              "updatedAt": "2023-05-22T11:49:20Z"
            },
            {
              "originalPosition": 97,
              "body": "```suggestion\r\n```",
              "createdAt": "2023-05-22T11:39:03Z",
              "updatedAt": "2023-05-22T11:49:20Z"
            },
            {
              "originalPosition": 96,
              "body": "does not produce a link",
              "createdAt": "2023-05-22T11:39:33Z",
              "updatedAt": "2023-05-22T11:49:20Z"
            },
            {
              "originalPosition": 201,
              "body": "type is now used before it is actually defined",
              "createdAt": "2023-05-22T11:40:39Z",
              "updatedAt": "2023-05-22T11:49:20Z"
            },
            {
              "originalPosition": 134,
              "body": "Not sure I understand the rationale of this proposed change. It seems to mix the claims that \"can\" be used and the claims, where this draft defines requirements (a lot of then \"MUST\").  For the time being, I like the previous approach better.",
              "createdAt": "2023-05-22T11:43:06Z",
              "updatedAt": "2023-05-22T11:49:20Z"
            },
            {
              "originalPosition": 240,
              "body": "```suggestion\r\nsection 6 of [@!I-D.ietf-oauth-selective-disclosure-jwt]. For the\r\n```",
              "createdAt": "2023-05-22T11:43:54Z",
              "updatedAt": "2023-05-22T11:49:20Z"
            },
            {
              "originalPosition": 259,
              "body": "the \"presentation of VC-SD-JWTs\"? VP sounds to formal in my opinion. ",
              "createdAt": "2023-05-22T11:47:39Z",
              "updatedAt": "2023-05-22T11:49:20Z"
            },
            {
              "originalPosition": 266,
              "body": "that is technically not feasible ",
              "createdAt": "2023-05-22T11:48:04Z",
              "updatedAt": "2023-05-22T11:49:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5VnzZe",
          "commit": {
            "abbreviatedOid": "e1b9b2d"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-22T12:13:13Z",
          "updatedAt": "2023-05-22T12:13:13Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "It does not have to be an envelope. I just didn't have a better term. I can rephrase. ",
              "createdAt": "2023-05-22T12:13:13Z",
              "updatedAt": "2023-05-22T12:13:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5Vnz1A",
          "commit": {
            "abbreviatedOid": "e1b9b2d"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-22T12:14:20Z",
          "updatedAt": "2023-05-22T12:14:21Z",
          "comments": [
            {
              "originalPosition": 56,
              "body": "I didn't add this language in this PR. I think @danielfett wanted to fix that in a separate PR.",
              "createdAt": "2023-05-22T12:14:20Z",
              "updatedAt": "2023-05-22T12:14:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5Vn0MJ",
          "commit": {
            "abbreviatedOid": "e1b9b2d"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-22T12:15:14Z",
          "updatedAt": "2023-05-22T12:15:15Z",
          "comments": [
            {
              "originalPosition": 96,
              "body": "You mean [@!I-D.ietf-oauth-selective-disclosure-jwt, section 5.3.] doesn't produce a link?",
              "createdAt": "2023-05-22T12:15:15Z",
              "updatedAt": "2023-05-22T12:15:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5Vn0l1",
          "commit": {
            "abbreviatedOid": "e1b9b2d"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-22T12:16:13Z",
          "updatedAt": "2023-05-22T12:16:13Z",
          "comments": [
            {
              "originalPosition": 266,
              "body": "This is feasible. It doesn't say that `typ` has to be set.",
              "createdAt": "2023-05-22T12:16:13Z",
              "updatedAt": "2023-05-22T12:16:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5Vn0uH",
          "commit": {
            "abbreviatedOid": "e1b9b2d"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-22T12:16:31Z",
          "updatedAt": "2023-05-22T12:16:32Z",
          "comments": [
            {
              "originalPosition": 266,
              "body": "A VP-SD-JWT is a Combined Format object, not the SD-JWT contained in it.",
              "createdAt": "2023-05-22T12:16:31Z",
              "updatedAt": "2023-05-22T12:16:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5Vn8TS",
          "commit": {
            "abbreviatedOid": "e1b9b2d"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-22T12:34:06Z",
          "updatedAt": "2023-05-22T12:34:07Z",
          "comments": [
            {
              "originalPosition": 259,
              "body": "Can we fix that later since we would need to change that in several places? Please create ticket to rename VP-SD-JWT to something more appropriate.",
              "createdAt": "2023-05-22T12:34:06Z",
              "updatedAt": "2023-05-22T12:34:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5Vn84r",
          "commit": {
            "abbreviatedOid": "e1b9b2d"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-22T12:35:27Z",
          "updatedAt": "2023-05-22T12:35:28Z",
          "comments": [
            {
              "originalPosition": 201,
              "body": "fixed",
              "createdAt": "2023-05-22T12:35:27Z",
              "updatedAt": "2023-05-22T12:35:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5Vn9bc",
          "commit": {
            "abbreviatedOid": "e1b9b2d"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-22T12:36:44Z",
          "updatedAt": "2023-05-22T12:36:44Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "Removed envelope",
              "createdAt": "2023-05-22T12:36:44Z",
              "updatedAt": "2023-05-22T12:36:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5Vn-oJ",
          "commit": {
            "abbreviatedOid": "e1b9b2d"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-22T12:39:27Z",
          "updatedAt": "2023-05-22T12:39:28Z",
          "comments": [
            {
              "originalPosition": 56,
              "body": "I created a separate issue here: https://github.com/vcstuff/draft-terbu-sd-jwt-vc/issues/63",
              "createdAt": "2023-05-22T12:39:27Z",
              "updatedAt": "2023-05-22T12:39:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5Vn_Y3",
          "commit": {
            "abbreviatedOid": "e1b9b2d"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-22T12:41:12Z",
          "updatedAt": "2023-05-22T12:41:13Z",
          "comments": [
            {
              "originalPosition": 134,
              "body": "It was not clear in the previous version where to find those claims. Technically speaking, they are not always in the SD-JWT but sometimes in the Disclosure object. That is why this PR tried to adjust that language.",
              "createdAt": "2023-05-22T12:41:12Z",
              "updatedAt": "2023-05-22T12:41:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5VoBzR",
          "commit": {
            "abbreviatedOid": "52524cc"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-22T12:46:50Z",
          "updatedAt": "2023-05-22T12:46:51Z",
          "comments": [
            {
              "originalPosition": 134,
              "body": "That shows the terminology is still unclear/not precise enough. If the SD-JWT is just the thing used to keep the signed hashes, we need another term for the whole thing (combined format for issuance/presentation is a \"tongue breaker\" and sounds much to technical).\r\nWe could also try to speak about the claims in the object after or before constructing the SD-JWT. Only in this stage it makes sense to talk about what can be selectively disclosed and what not. ",
              "createdAt": "2023-05-22T12:46:50Z",
              "updatedAt": "2023-05-22T12:46:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5VoDvR",
          "commit": {
            "abbreviatedOid": "e1b9b2d"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-22T12:51:13Z",
          "updatedAt": "2023-05-22T12:51:13Z",
          "comments": [
            {
              "originalPosition": 259,
              "body": "Created a ticket here https://github.com/vcstuff/draft-terbu-sd-jwt-vc/issues/64",
              "createdAt": "2023-05-22T12:51:13Z",
              "updatedAt": "2023-05-22T12:51:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5VoEEt",
          "commit": {
            "abbreviatedOid": "e1b9b2d"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-22T12:51:59Z",
          "updatedAt": "2023-05-22T12:51:59Z",
          "comments": [
            {
              "originalPosition": 134,
              "body": "we have a term for whole thing already -> VC-SD-JWT -> pls see terminology section. Same as VP-SD-JWT. Does this solve your issue?",
              "createdAt": "2023-05-22T12:51:59Z",
              "updatedAt": "2023-05-22T12:51:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5VoJTr",
          "commit": {
            "abbreviatedOid": "e1b9b2d"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-22T13:02:43Z",
          "updatedAt": "2023-05-22T13:02:43Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "I adjusted the language. Please check if this makes more sense now.",
              "createdAt": "2023-05-22T13:02:43Z",
              "updatedAt": "2023-05-22T13:02:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5VoRMr",
          "commit": {
            "abbreviatedOid": "e1b9b2d"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-22T13:18:57Z",
          "updatedAt": "2023-05-22T13:18:58Z",
          "comments": [
            {
              "originalPosition": 266,
              "body": "I removed the media type for VPs. Let's rename VP-SD-JWT in a separate PR since it would impact more sections.",
              "createdAt": "2023-05-22T13:18:57Z",
              "updatedAt": "2023-05-22T13:18:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5VoCEq",
          "commit": {
            "abbreviatedOid": "cafeaea"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-05-22T12:47:26Z",
          "updatedAt": "2023-05-22T13:55:24Z",
          "comments": [
            {
              "originalPosition": 266,
              "body": "but it does not have a media type associated with it",
              "createdAt": "2023-05-22T12:47:26Z",
              "updatedAt": "2023-05-22T13:55:25Z"
            },
            {
              "originalPosition": 88,
              "body": "```suggestion\r\n`application/vc+sd-jwt` as defined in (#application-vc-sd-jwt).\r\n```",
              "createdAt": "2023-05-22T13:18:03Z",
              "updatedAt": "2023-05-22T13:55:24Z"
            },
            {
              "originalPosition": 226,
              "body": "```suggestion\r\n(#jwt-issuer-metadata)) of the VC-SD-JWT issuer. A Verifier MAY use alternative\r\n```",
              "createdAt": "2023-05-22T13:25:27Z",
              "updatedAt": "2023-05-22T13:55:25Z"
            }
          ]
        }
      ]
    },
    {
      "number": 67,
      "id": "PR_kwDOJbVClc5RBfQR",
      "title": "Update workflow to generate examples",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/67",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-05-22T14:16:08Z",
      "updatedAt": "2023-05-26T14:28:32Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "3b9bc544ff8adffb5dcb4c0c2137bd3c77b972ee",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "danielfett/generated-examples",
      "headRefOid": "ea015edff28d6015e535d5b7a4895b5ce37ee869",
      "closedAt": "2023-05-22T15:50:52Z",
      "mergedAt": "2023-05-22T15:50:52Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "184bf2121b2cf75671653a2cbc4d2c5cd2b66c4c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5VpbcO",
          "commit": {
            "abbreviatedOid": "296db61"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "thanks, that is a great improvement. just a few minor editorial suggestions.",
          "createdAt": "2023-05-22T15:43:33Z",
          "updatedAt": "2023-05-22T15:45:37Z",
          "comments": [
            {
              "originalPosition": 119,
              "body": "```suggestion\r\nThe following example shows a presentation of a (different) SD-JWT without a Holder Binding JWT:\r\n```",
              "createdAt": "2023-05-22T15:43:33Z",
              "updatedAt": "2023-05-22T15:45:37Z"
            },
            {
              "originalPosition": 106,
              "body": "```suggestion\r\nThe following is a non-normative example of a presentation of the SD-JWT shown above including a Holder Binding JWT:\r\n```",
              "createdAt": "2023-05-22T15:44:28Z",
              "updatedAt": "2023-05-22T15:45:37Z"
            }
          ]
        }
      ]
    },
    {
      "number": 68,
      "id": "PR_kwDOJbVClc5RB9tA",
      "title": "Fixed VCDM transformation algo, fixes #4",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/68",
      "state": "MERGED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixed VCDM transformation algo, fixes #4",
      "createdAt": "2023-05-22T15:34:02Z",
      "updatedAt": "2023-05-26T14:28:31Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "3b9bc544ff8adffb5dcb4c0c2137bd3c77b972ee",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "awoie/fix-vc-mapping-algo",
      "headRefOid": "d4e9f16a5ec4b9443f85677f785baa0f249fd752",
      "closedAt": "2023-05-23T09:12:24Z",
      "mergedAt": "2023-05-23T09:12:24Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "60354b1943cd0596d008f0b383da19a443de592f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5Vqem4",
          "commit": {
            "abbreviatedOid": "c873a4a"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-22T18:20:22Z",
          "updatedAt": "2023-05-22T18:20:22Z",
          "comments": [
            {
              "originalPosition": 71,
              "body": "```suggestion\r\nProcedure:\r\n1. Validate SD-JWT following the steps defined in Section 6.2 of [@oauth-selective-disclosure-jwt].\r\n1. Let payload of a VC in the VCDM 2.0 format be the payload of the VC-SD-JWT obtained in the previous step.\r\n```\r\n\r\nI thought we are calling it SD-JWT-VC and not VC-SD-JWT..?\r\nI would prefer we move away from a VC WG specific terminology like secure/unsecured - signed, unsigned is simpler, no?\r\n`payload` makes it look like it is a claim, for example, like `@context` claim. please make it clear it is not a claim (if I understood correctly.)\r\n\"of a VC in the VCDM 2.0 format \" -> this is just a suggestion but need to be consistent in abbreviations.",
              "createdAt": "2023-05-22T18:20:22Z",
              "updatedAt": "2023-05-22T18:25:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5Vqevk",
          "commit": {
            "abbreviatedOid": "c873a4a"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-22T18:20:51Z",
          "updatedAt": "2023-05-22T18:20:51Z",
          "comments": [
            {
              "originalPosition": 73,
              "body": "```suggestion\r\n1. Let \"VC\" be an empty JSON object that represents the transformed Verifiable Credential in the VCDM 2.0 format:\r\n  - Set the `@context` property of \"VC\" to `\"https://www.w3.org/ns/credentials/v2\"`.\r\n```\r\n\r\n`VC` makes it look like it is a claim, for example, like `@context` claim. please make it clear it is not a claim (if I understood correctly.)",
              "createdAt": "2023-05-22T18:20:51Z",
              "updatedAt": "2023-05-22T18:26:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5VqrT0",
          "commit": {
            "abbreviatedOid": "c873a4a"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-22T18:49:00Z",
          "updatedAt": "2023-05-22T18:49:00Z",
          "comments": [
            {
              "originalPosition": 73,
              "body": "@Sakurann `VC` is a variable that contains a JSON object in that case which is also the resulting W3C VC. I made it lower-case now. Does that work for you?",
              "createdAt": "2023-05-22T18:49:00Z",
              "updatedAt": "2023-05-22T18:49:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5VqsW6",
          "commit": {
            "abbreviatedOid": "c873a4a"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-22T18:51:37Z",
          "updatedAt": "2023-05-22T18:51:38Z",
          "comments": [
            {
              "originalPosition": 71,
              "body": "Can we please have the naming discussion in a separate issue? This PR does not introduce a new name, only the algorithm. ",
              "createdAt": "2023-05-22T18:51:38Z",
              "updatedAt": "2023-05-22T18:51:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5Vw6Kj",
          "commit": {
            "abbreviatedOid": "f5a9809"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-23T07:46:41Z",
          "updatedAt": "2023-05-23T07:46:41Z",
          "comments": [
            {
              "originalPosition": 71,
              "body": "Agree with @Sakurann's proposals but to move naming discussion elsewhere.",
              "createdAt": "2023-05-23T07:46:41Z",
              "updatedAt": "2023-05-23T07:46:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5VxB1T",
          "commit": {
            "abbreviatedOid": "c873a4a"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-23T07:59:29Z",
          "updatedAt": "2023-05-23T07:59:30Z",
          "comments": [
            {
              "originalPosition": 71,
              "body": "I created this issue https://github.com/vcstuff/draft-terbu-sd-jwt-vc/issues/70, resolving this discussion.",
              "createdAt": "2023-05-23T07:59:29Z",
              "updatedAt": "2023-05-23T07:59:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5VxLOw",
          "commit": {
            "abbreviatedOid": "c873a4a"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-23T08:19:12Z",
          "updatedAt": "2023-05-23T08:19:12Z",
          "comments": [
            {
              "originalPosition": 73,
              "body": "We will use italic instead of double quotes for variable names.",
              "createdAt": "2023-05-23T08:19:12Z",
              "updatedAt": "2023-05-23T08:19:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5Vxu9K",
          "commit": {
            "abbreviatedOid": "d4e9f16"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-05-23T09:12:18Z",
          "updatedAt": "2023-05-23T09:12:18Z",
          "comments": []
        }
      ]
    },
    {
      "number": 72,
      "id": "PR_kwDOJbVClc5RIAKI",
      "title": "Some editorial changes; changing title and acronym",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/72",
      "state": "MERGED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #36, fixes #43, fixes #70",
      "createdAt": "2023-05-23T09:48:56Z",
      "updatedAt": "2023-05-26T14:28:29Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "60354b1943cd0596d008f0b383da19a443de592f",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "awoie/editorial",
      "headRefOid": "dd11ae2f0ee12f0ee6472c8173690d5af634ac11",
      "closedAt": "2023-05-23T11:04:04Z",
      "mergedAt": "2023-05-23T11:04:04Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "80a2a171f0a690182bec3098938a28f179d21c81"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5VyqhT",
          "commit": {
            "abbreviatedOid": "c16184b"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-05-23T10:42:45Z",
          "updatedAt": "2023-05-23T10:44:23Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "```suggestion\r\ntitle = \"SD-JWT-based Verifiable Credentials with JSON payloads (SD-JWT VC)\"\r\n```",
              "createdAt": "2023-05-23T10:42:45Z",
              "updatedAt": "2023-05-23T10:44:23Z"
            },
            {
              "originalPosition": 150,
              "body": "```suggestion\r\nThe following is a non-normative example of the URL of the JWT Issuer Metadata\r\n```",
              "createdAt": "2023-05-23T10:43:50Z",
              "updatedAt": "2023-05-23T10:44:24Z"
            },
            {
              "originalPosition": 157,
              "body": "```suggestion\r\nThe following is a non-normative example of the URL of the JWT Issuer Metadata\r\n```",
              "createdAt": "2023-05-23T10:44:01Z",
              "updatedAt": "2023-05-23T10:44:24Z"
            }
          ]
        }
      ]
    },
    {
      "number": 74,
      "id": "PR_kwDOJbVClc5RImM8",
      "title": "Attempt to Fix #73",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/74",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-05-23T11:14:53Z",
      "updatedAt": "2023-05-26T14:28:37Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "80a2a171f0a690182bec3098938a28f179d21c81",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "danielfett/fix-73",
      "headRefOid": "c73ea3cc55b57566c26ca19edf3fc6bced1a31aa",
      "closedAt": "2023-05-23T11:18:22Z",
      "mergedAt": "2023-05-23T11:18:22Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "8b0961b072b8f04569cf2b240950f7691099d13f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5Vy88J",
          "commit": {
            "abbreviatedOid": "c73ea3c"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "lgtm, thank you!",
          "createdAt": "2023-05-23T11:18:12Z",
          "updatedAt": "2023-05-23T11:18:12Z",
          "comments": []
        }
      ]
    },
    {
      "number": 76,
      "id": "PR_kwDOJbVClc5RK1mf",
      "title": "Fix build scripts",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/76",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "This fix is needed as I changed the scripts in the sd-jwt library into scripts that are installed with the library itself, not just sitting in the git repository.",
      "createdAt": "2023-05-23T17:28:09Z",
      "updatedAt": "2023-05-26T14:28:36Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "8b0961b072b8f04569cf2b240950f7691099d13f",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "danielfett/fix-building",
      "headRefOid": "2febb677c2575ab6037ef68cd8da8e66af53527c",
      "closedAt": "2023-05-23T19:21:43Z",
      "mergedAt": "2023-05-23T19:21:43Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "b916fb56c11962fb6f255549038283db1360e8f4"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5V2wPa",
          "commit": {
            "abbreviatedOid": "2febb67"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "awesome, thank you",
          "createdAt": "2023-05-23T19:21:38Z",
          "updatedAt": "2023-05-23T19:21:38Z",
          "comments": []
        }
      ]
    },
    {
      "number": 77,
      "id": "PR_kwDOJbVClc5RLYLD",
      "title": "feat: added andres to ack",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/77",
      "state": "MERGED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "feat: added andres to ack",
      "createdAt": "2023-05-23T19:32:22Z",
      "updatedAt": "2023-05-26T14:28:28Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "b916fb56c11962fb6f255549038283db1360e8f4",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "awoie/add-andres",
      "headRefOid": "ce91a4f28b2e1a5f46a2323039d911ae2418da36",
      "closedAt": "2023-05-24T13:18:51Z",
      "mergedAt": "2023-05-24T13:18:51Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "b954505f848dc2cd749c5e6655799ca30048f47d"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 78,
      "id": "PR_kwDOJbVClc5RSA4h",
      "title": "fix: fixed intro according to resolution",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/78",
      "state": "MERGED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #69 ",
      "createdAt": "2023-05-24T19:34:18Z",
      "updatedAt": "2023-05-26T14:28:18Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "b954505f848dc2cd749c5e6655799ca30048f47d",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "awoie/fix-69",
      "headRefOid": "9a1af516f06026b5bd35a6de7eb9f6b34cc2cfe7",
      "closedAt": "2023-05-25T08:40:53Z",
      "mergedAt": "2023-05-25T08:40:53Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "9453d7ec21ac8da619b34b7b3fe3dcae36ab6fc3"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5WCCcC",
          "commit": {
            "abbreviatedOid": "9a1af51"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-05-25T08:37:49Z",
          "updatedAt": "2023-05-25T08:37:49Z",
          "comments": []
        }
      ]
    },
    {
      "number": 79,
      "id": "PR_kwDOJbVClc5RSDFx",
      "title": "fix: fixes #63",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/79",
      "state": "MERGED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "fix: fixes #63",
      "createdAt": "2023-05-24T19:41:38Z",
      "updatedAt": "2023-05-26T14:28:16Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "b954505f848dc2cd749c5e6655799ca30048f47d",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "awoie/fix-63",
      "headRefOid": "25f4aca517a5652e2e4718fb3e531850feae3cee",
      "closedAt": "2023-05-25T08:37:32Z",
      "mergedAt": "2023-05-25T08:37:32Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "06fa1efe2e1dec0c8e78bdfb8d7219f9f60608ce"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5WCCRW",
          "commit": {
            "abbreviatedOid": "25f4aca"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-05-25T08:37:25Z",
          "updatedAt": "2023-05-25T08:37:25Z",
          "comments": []
        }
      ]
    },
    {
      "number": 80,
      "id": "PR_kwDOJbVClc5RSeIP",
      "title": "fix: fixes #36; used similar language to rfc8414",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/80",
      "state": "MERGED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #36 ",
      "createdAt": "2023-05-24T21:15:37Z",
      "updatedAt": "2023-05-26T14:28:12Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "11eef80c75ac5535f17ce6384f7376a1b30046b0",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "awoie/fix-36",
      "headRefOid": "3e9172c4023163420f72c26e9350a163e4742a86",
      "closedAt": "2023-05-25T11:36:00Z",
      "mergedAt": "2023-05-25T11:36:00Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "f3aa611889067732af8fd8a00d01abeb9331d30e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5WCnJu",
          "commit": {
            "abbreviatedOid": "002f650"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-25T09:53:05Z",
          "updatedAt": "2023-05-25T09:53:06Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "```suggestion\r\nA JWT Issuer Metadata configuration MUST be queried using an HTTP \"GET\" request\r\nat the path defined in (#jwt-issuer-metadata).\r\n```",
              "createdAt": "2023-05-25T09:53:06Z",
              "updatedAt": "2023-05-25T09:53:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5WCnpM",
          "commit": {
            "abbreviatedOid": "002f650"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-05-25T09:54:15Z",
          "updatedAt": "2023-05-25T09:54:15Z",
          "comments": []
        }
      ]
    },
    {
      "number": 82,
      "id": "PR_kwDOJbVClc5RSfhR",
      "title": "fix: fixes #81",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/82",
      "state": "MERGED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This just moves the flow diagram to the intro section, fixes #81",
      "createdAt": "2023-05-24T21:22:08Z",
      "updatedAt": "2023-05-26T14:28:15Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "11eef80c75ac5535f17ce6384f7376a1b30046b0",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "awoie/fix-81",
      "headRefOid": "ca0398bf015ea8480dc298afe25a4e0c4d01d32c",
      "closedAt": "2023-05-24T21:25:23Z",
      "mergedAt": "2023-05-24T21:25:23Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "0700be7caf14efef1868cbaf394c95cce70fb182"
      },
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Merging this now, so folks don't run into conflicts later. This PR really just moves the diagram.",
          "createdAt": "2023-05-24T21:25:17Z",
          "updatedAt": "2023-05-24T21:25:17Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 83,
      "id": "PR_kwDOJbVClc5RU4aq",
      "title": "Renames Credential to unsecured payload and adds to terminology section",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/83",
      "state": "MERGED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #45",
      "createdAt": "2023-05-25T09:41:12Z",
      "updatedAt": "2023-05-26T14:28:14Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "9453d7ec21ac8da619b34b7b3fe3dcae36ab6fc3",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "awoie/fix-45",
      "headRefOid": "82e662a1bbbc8998a8e7b0ea7ba88d2b6cf0444c",
      "closedAt": "2023-05-25T11:35:37Z",
      "mergedAt": "2023-05-25T11:35:37Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "ac137cd85c4f7a46684eecc1c5786ddef8406032"
      },
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "@danielfett can we merge this now?",
          "createdAt": "2023-05-25T11:10:57Z",
          "updatedAt": "2023-05-25T11:10:57Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5WCjdr",
          "commit": {
            "abbreviatedOid": "923b9fe"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-25T09:44:27Z",
          "updatedAt": "2023-05-25T09:44:27Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "I don't think we need to define this here if we only use it once. I suggest to move this down to the example section.",
              "createdAt": "2023-05-25T09:44:27Z",
              "updatedAt": "2023-05-25T09:44:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5WCjwp",
          "commit": {
            "abbreviatedOid": "923b9fe"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-25T09:45:09Z",
          "updatedAt": "2023-05-25T09:45:10Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\n: A JSON object containing all selectively disclosable and non-selectively disclosable claims\r\n```",
              "createdAt": "2023-05-25T09:45:09Z",
              "updatedAt": "2023-05-25T09:45:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5WClvY",
          "commit": {
            "abbreviatedOid": "923b9fe"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-25T09:49:45Z",
          "updatedAt": "2023-05-25T09:49:46Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "We are using the term in two sections, that is why I defined the term. But we can also remove it in the next version of the document if we don't think it adds any value.",
              "createdAt": "2023-05-25T09:49:45Z",
              "updatedAt": "2023-05-25T09:49:46Z"
            }
          ]
        }
      ]
    },
    {
      "number": 84,
      "id": "PR_kwDOJbVClc5RU8Dc",
      "title": "Editorial changes to Intro, Fix #71",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/84",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-05-25T09:51:53Z",
      "updatedAt": "2023-05-26T14:28:23Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "9453d7ec21ac8da619b34b7b3fe3dcae36ab6fc3",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "danielfett/intro",
      "headRefOid": "d45f8988a992cc0516067f4d69e5d1ec9cb7a2d7",
      "closedAt": "2023-05-25T11:32:00Z",
      "mergedAt": "2023-05-25T11:32:00Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "ab011c06410c1152c99858767fb14a0fe0c27a60"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5WCqwz",
          "commit": {
            "abbreviatedOid": "2358f97"
          },
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-25T10:01:30Z",
          "updatedAt": "2023-05-25T10:01:30Z",
          "comments": [
            {
              "originalPosition": 89,
              "body": "Should we limit the text to cryptographic holder binding?",
              "createdAt": "2023-05-25T10:01:30Z",
              "updatedAt": "2023-05-25T10:01:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5WCq-h",
          "commit": {
            "abbreviatedOid": "2358f97"
          },
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-25T10:02:00Z",
          "updatedAt": "2023-05-25T10:02:00Z",
          "comments": [
            {
              "originalPosition": 87,
              "body": "Holder binding is not enforced by the Verifier but validated?",
              "createdAt": "2023-05-25T10:02:00Z",
              "updatedAt": "2023-05-25T10:02:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5WCrh1",
          "commit": {
            "abbreviatedOid": "2358f97"
          },
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-25T10:03:23Z",
          "updatedAt": "2023-05-25T10:03:23Z",
          "comments": [
            {
              "originalPosition": 92,
              "body": "Should we mention that the Status Provider can also be the Issuer instead of the fourth party?",
              "createdAt": "2023-05-25T10:03:23Z",
              "updatedAt": "2023-05-25T10:03:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5WCs38",
          "commit": {
            "abbreviatedOid": "2358f97"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "A few comments, otherwise looks good to me.",
          "createdAt": "2023-05-25T10:06:38Z",
          "updatedAt": "2023-05-25T10:12:39Z",
          "comments": [
            {
              "originalPosition": 89,
              "body": "```suggestion\r\nare the intended holder of the Verifiable Credential, for example, by proving possession of a\r\ncryptographic key referenced in the credential. This process is further\r\n```",
              "createdAt": "2023-05-25T10:06:38Z",
              "updatedAt": "2023-05-25T10:12:39Z"
            },
            {
              "originalPosition": 93,
              "body": "```suggestion\r\na Status Provider, who delivers credential status information to Verifiers.\r\n```",
              "createdAt": "2023-05-25T10:07:48Z",
              "updatedAt": "2023-05-25T10:12:39Z"
            },
            {
              "originalPosition": 147,
              "body": "```suggestion\r\nVerifiable Credential data model purely through JWT Claim Sets, using registered\r\n```\r\n",
              "createdAt": "2023-05-25T10:11:57Z",
              "updatedAt": "2023-05-25T10:17:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5WCvQ7",
          "commit": {
            "abbreviatedOid": "2358f97"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "A few comments, otherwise looks good to me.",
          "createdAt": "2023-05-25T10:12:39Z",
          "updatedAt": "2023-05-25T10:12:39Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5WCwYJ",
          "commit": {
            "abbreviatedOid": "2358f97"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-25T10:15:35Z",
          "updatedAt": "2023-05-25T10:15:35Z",
          "comments": [
            {
              "originalPosition": 89,
              "body": "I made a suggestion below that cryptographic holder binding is \"an example\". Currently, it is limited to the `cnf` claim but the `cnf` claim has an extension mechanism. So, technically it is not limited from a data model perspective. IMO, this limitation can be done by specific profiles such as the hi-assurance profile.",
              "createdAt": "2023-05-25T10:15:35Z",
              "updatedAt": "2023-05-25T10:15:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5WCxre",
          "commit": {
            "abbreviatedOid": "2358f97"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-25T10:19:07Z",
          "updatedAt": "2023-05-25T10:19:08Z",
          "comments": [
            {
              "originalPosition": 87,
              "body": "The verifier is the only party who can actually enforce holder binding (by validating it, yes).",
              "createdAt": "2023-05-25T10:19:07Z",
              "updatedAt": "2023-05-25T10:19:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5WCx91",
          "commit": {
            "abbreviatedOid": "2358f97"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-25T10:19:41Z",
          "updatedAt": "2023-05-25T10:19:42Z",
          "comments": [
            {
              "originalPosition": 89,
              "body": "Agree, this is meant to cover cryptographic holder binding.",
              "createdAt": "2023-05-25T10:19:41Z",
              "updatedAt": "2023-05-25T10:19:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5WCyR1",
          "commit": {
            "abbreviatedOid": "7bd5545"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-25T10:20:31Z",
          "updatedAt": "2023-05-25T10:20:32Z",
          "comments": [
            {
              "originalPosition": 93,
              "body": "We need to say what \"credential status\" is. Otherwise the term remains very unclear.",
              "createdAt": "2023-05-25T10:20:31Z",
              "updatedAt": "2023-05-25T10:20:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5WCyuB",
          "commit": {
            "abbreviatedOid": "70abc05"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-25T10:21:45Z",
          "updatedAt": "2023-05-25T10:21:46Z",
          "comments": [
            {
              "originalPosition": 93,
              "body": "```suggestion\r\na Status Provider, who delivers revocation information to Verifiers. (The Verifier can\r\nalso serve as the Status Provider.)\r\n```",
              "createdAt": "2023-05-25T10:21:45Z",
              "updatedAt": "2023-05-25T10:21:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5WCyxK",
          "commit": {
            "abbreviatedOid": "70abc05"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-25T10:21:52Z",
          "updatedAt": "2023-05-25T10:21:53Z",
          "comments": [
            {
              "originalPosition": 92,
              "body": "Added proposal below.",
              "createdAt": "2023-05-25T10:21:53Z",
              "updatedAt": "2023-05-25T10:21:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5WDBsF",
          "commit": {
            "abbreviatedOid": "2358f97"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-25T11:01:57Z",
          "updatedAt": "2023-05-25T11:01:58Z",
          "comments": [
            {
              "originalPosition": 93,
              "body": "I thought that this would be covered by @paulbastian spec?",
              "createdAt": "2023-05-25T11:01:57Z",
              "updatedAt": "2023-05-25T11:01:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5WDFIU",
          "commit": {
            "abbreviatedOid": "2358f97"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-25T11:11:08Z",
          "updatedAt": "2023-05-25T11:11:08Z",
          "comments": [
            {
              "originalPosition": 93,
              "body": "I'm not talking about *how* it is achieved, but what \"status\" means. That's why I used the term revocation.",
              "createdAt": "2023-05-25T11:11:08Z",
              "updatedAt": "2023-05-25T11:11:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5WDHE0",
          "commit": {
            "abbreviatedOid": "2358f97"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-25T11:16:36Z",
          "updatedAt": "2023-05-25T11:16:36Z",
          "comments": [
            {
              "originalPosition": 93,
              "body": "Alright",
              "createdAt": "2023-05-25T11:16:36Z",
              "updatedAt": "2023-05-25T11:16:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5WDHNq",
          "commit": {
            "abbreviatedOid": "70abc05"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "lgtm now",
          "createdAt": "2023-05-25T11:17:00Z",
          "updatedAt": "2023-05-25T11:17:00Z",
          "comments": []
        }
      ]
    },
    {
      "number": 85,
      "id": "PR_kwDOJbVClc5RVhfU",
      "title": "fix: added kid to jwks example",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/85",
      "state": "MERGED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #75 ",
      "createdAt": "2023-05-25T11:45:32Z",
      "updatedAt": "2023-05-26T14:28:07Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "f3aa611889067732af8fd8a00d01abeb9331d30e",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "awoie/fix-75",
      "headRefOid": "8fbe379dd896aa8ecf2234be8c38c14bdfe0511d",
      "closedAt": "2023-05-25T11:47:18Z",
      "mergedAt": "2023-05-25T11:47:18Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "b3befa453934a3ade996a19a4b5f6597cf974bc4"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 86,
      "id": "PR_kwDOJbVClc5RVmU3",
      "title": "fix: minor editorial fixes",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/86",
      "state": "MERGED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This just fixes typos and references.",
      "createdAt": "2023-05-25T11:59:40Z",
      "updatedAt": "2023-05-25T12:00:36Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "b3befa453934a3ade996a19a4b5f6597cf974bc4",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "awoie/small-editorial",
      "headRefOid": "1f35abb9b418923ee3f1894282e7b5a30996ee86",
      "closedAt": "2023-05-25T12:00:32Z",
      "mergedAt": "2023-05-25T12:00:32Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "8b61da087c08eb8e10fd5c8ed60830d43ef957b4"
      },
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "This just fixes typos and references. No review required at this stage.",
          "createdAt": "2023-05-25T12:00:36Z",
          "updatedAt": "2023-05-25T12:00:36Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 87,
      "id": "PR_kwDOJbVClc5RVpee",
      "title": "fix: fixed typos",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/87",
      "state": "MERGED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Only minor editorial changes such as typos.",
      "createdAt": "2023-05-25T12:07:45Z",
      "updatedAt": "2023-05-26T14:28:06Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "8b61da087c08eb8e10fd5c8ed60830d43ef957b4",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "awoie/small-editorial",
      "headRefOid": "d9a33ae3832d6aef62e13a683e5d5bb7698addc4",
      "closedAt": "2023-05-25T12:08:37Z",
      "mergedAt": "2023-05-25T12:08:37Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "f6c12b2d0832fe4a18762c45e7674d8e3431b820"
      },
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Only minor editorial changes such as typos -> no peer-review required at this stage.",
          "createdAt": "2023-05-25T12:08:56Z",
          "updatedAt": "2023-05-25T12:08:56Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 88,
      "id": "PR_kwDOJbVClc5RV02D",
      "title": "Removes VP terms; changes language around VPs and presentation of VCs",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/88",
      "state": "MERGED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "- Removes VP terms; changes language around VPs and presentation of VCs;\r\n- fixes #64 ",
      "createdAt": "2023-05-25T12:39:58Z",
      "updatedAt": "2023-05-26T14:28:03Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "f6c12b2d0832fe4a18762c45e7674d8e3431b820",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "awoie/fix-vp-terminology",
      "headRefOid": "66040387c93a4070f6f3a3b92b6fb515efad207d",
      "closedAt": "2023-05-25T13:41:11Z",
      "mergedAt": "2023-05-25T13:41:11Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "8337f2a38a30a8781ea90765631653828be87746"
      },
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "@danielfett gave verbal approval.",
          "createdAt": "2023-05-25T13:41:07Z",
          "updatedAt": "2023-05-25T13:41:07Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5WECbm",
          "commit": {
            "abbreviatedOid": "fdae796"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-25T13:27:18Z",
          "updatedAt": "2023-05-25T13:27:18Z",
          "comments": [
            {
              "originalPosition": 101,
              "body": "@ missing?",
              "createdAt": "2023-05-25T13:27:18Z",
              "updatedAt": "2023-05-25T13:27:18Z"
            }
          ]
        }
      ]
    },
    {
      "number": 90,
      "id": "PR_kwDOJbVClc5RV16J",
      "title": "fix: made cnf optional but made it MUST when holder binding is required",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/90",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #89 ",
      "createdAt": "2023-05-25T12:43:00Z",
      "updatedAt": "2023-05-26T14:28:05Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "f6c12b2d0832fe4a18762c45e7674d8e3431b820",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "awoie/89",
      "headRefOid": "fbb8289b48b493eeed015e21688251db06c1e81d",
      "closedAt": "2023-05-25T13:44:15Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "closing this PR in favor of #91 ",
          "createdAt": "2023-05-25T13:44:15Z",
          "updatedAt": "2023-05-25T13:44:15Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5WEEDE",
          "commit": {
            "abbreviatedOid": "fbb8289"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-25T13:30:28Z",
          "updatedAt": "2023-05-25T13:30:29Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "The \"OPTIONAL\" and \"MUST\" clash. ",
              "createdAt": "2023-05-25T13:30:28Z",
              "updatedAt": "2023-05-25T13:30:29Z"
            }
          ]
        }
      ]
    },
    {
      "number": 91,
      "id": "PR_kwDOJbVClc5RWNwA",
      "title": "fix: made cnf required for holder binding",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/91",
      "state": "MERGED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #89 ",
      "createdAt": "2023-05-25T13:43:44Z",
      "updatedAt": "2023-05-26T14:28:02Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "8337f2a38a30a8781ea90765631653828be87746",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "awoie/fix-cnf",
      "headRefOid": "f3f74403b103a816535297d7d4db174f57993525",
      "closedAt": "2023-05-25T13:44:47Z",
      "mergedAt": "2023-05-25T13:44:47Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "eea3d568ea4b0053aeea0ec1b1e65534c071694b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5WELGe",
          "commit": {
            "abbreviatedOid": "f3f7440"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-05-25T13:44:09Z",
          "updatedAt": "2023-05-25T13:44:09Z",
          "comments": []
        }
      ]
    },
    {
      "number": 92,
      "id": "PR_kwDOJbVClc5RWnpE",
      "title": "fix: fixed ietf metadata",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/92",
      "state": "MERGED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-05-25T14:49:34Z",
      "updatedAt": "2023-05-26T14:27:52Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "eea3d568ea4b0053aeea0ec1b1e65534c071694b",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "awoie/fix-00-publication",
      "headRefOid": "cc6c65b0c85b1dcff9c4b96258063c449c9d0c1d",
      "closedAt": "2023-05-25T15:06:05Z",
      "mergedAt": "2023-05-25T15:06:05Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "c7418b6896418edeea63a9b4859966a044621759"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5WEyTI",
          "commit": {
            "abbreviatedOid": "f554526"
          },
          "author": "c2bo",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-25T14:57:30Z",
          "updatedAt": "2023-05-25T14:57:31Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "```suggestion\r\nname = \"Internet-Draft\"\r\n```",
              "createdAt": "2023-05-25T14:57:31Z",
              "updatedAt": "2023-05-25T14:57:31Z"
            }
          ]
        }
      ]
    },
    {
      "number": 95,
      "id": "PR_kwDOJbVClc5RW_p2",
      "title": "improve reasoning for SD-JWT",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/95",
      "state": "MERGED",
      "author": "paulbastian",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "See #94 ",
      "createdAt": "2023-05-25T15:55:02Z",
      "updatedAt": "2023-05-26T09:09:36Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "c7418b6896418edeea63a9b4859966a044621759",
      "headRepository": "paulbastian/draft-terbu-sd-jwt-vc",
      "headRefName": "introduction",
      "headRefOid": "c216fd1d7ce737af7230b44593d86eaeca536a65",
      "closedAt": "2023-05-26T09:08:15Z",
      "mergedAt": "2023-05-26T09:08:15Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "cbcb68675cdb7b7f9266008e28d4115ed18566df"
      },
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Merging, two approvals.",
          "createdAt": "2023-05-26T09:08:11Z",
          "updatedAt": "2023-05-26T09:08:11Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "fixed #94 ",
          "createdAt": "2023-05-26T09:09:36Z",
          "updatedAt": "2023-05-26T09:09:36Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5WFRrp",
          "commit": {
            "abbreviatedOid": "9aea21d"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-05-25T16:00:04Z",
          "updatedAt": "2023-05-25T16:00:04Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5WFY4h",
          "commit": {
            "abbreviatedOid": "9aea21d"
          },
          "author": "peppelinux",
          "authorAssociation": "NONE",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2023-05-25T16:16:34Z",
          "updatedAt": "2023-05-25T16:17:03Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "holder -> Holder\r\n\r\ndefined term",
              "createdAt": "2023-05-25T16:16:34Z",
              "updatedAt": "2023-05-25T16:17:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5WK8cb",
          "commit": {
            "abbreviatedOid": "c216fd1"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "lgtm",
          "createdAt": "2023-05-26T09:07:56Z",
          "updatedAt": "2023-05-26T09:07:56Z",
          "comments": []
        }
      ]
    },
    {
      "number": 100,
      "id": "PR_kwDOJbVClc5RYCXG",
      "title": "remove the reference to a vcdm from the terminology and intro",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/100",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "as discussed.",
      "createdAt": "2023-05-25T19:45:54Z",
      "updatedAt": "2023-05-26T14:27:50Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "c7418b6896418edeea63a9b4859966a044621759",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "breakAway",
      "headRefOid": "485e5aa2908982d67426b3b52e415a7abcce1b21",
      "closedAt": "2023-05-26T09:30:14Z",
      "mergedAt": "2023-05-26T09:30:14Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "08f7b85dc3c340a705fcd8a7466d466848c054eb"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5WGqVK",
          "commit": {
            "abbreviatedOid": "2e1ea0b"
          },
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-05-25T20:14:49Z",
          "updatedAt": "2023-05-25T20:14:49Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5WG6m-",
          "commit": {
            "abbreviatedOid": "2e1ea0b"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-05-25T21:08:35Z",
          "updatedAt": "2023-05-25T21:08:35Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5WH6Sg",
          "commit": {
            "abbreviatedOid": "2e1ea0b"
          },
          "author": "tplooker",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-05-26T03:01:33Z",
          "updatedAt": "2023-05-26T03:01:33Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5WK7Tl",
          "commit": {
            "abbreviatedOid": "2e1ea0b"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "lgtm, just minor change. ",
          "createdAt": "2023-05-26T09:06:14Z",
          "updatedAt": "2023-05-26T09:07:02Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "```suggestion\r\n:  An Issuer-signed statement about a Subject whose authenticity can be cryptographically verified.\r\n```",
              "createdAt": "2023-05-26T09:06:14Z",
              "updatedAt": "2023-05-26T09:07:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5WK73k",
          "commit": {
            "abbreviatedOid": "2e1ea0b"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "lgtm, just minor change. ",
          "createdAt": "2023-05-26T09:07:03Z",
          "updatedAt": "2023-05-26T09:07:03Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5WK-ju",
          "commit": {
            "abbreviatedOid": "2e1ea0b"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-26T09:10:57Z",
          "updatedAt": "2023-05-26T09:10:58Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "I'm ok with this change but we should not introduce Credential since we don't have a definition for that. I'll replace with the definition above.",
              "createdAt": "2023-05-26T09:10:57Z",
              "updatedAt": "2023-05-26T09:10:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5WLP4x",
          "commit": {
            "abbreviatedOid": "485e5aa"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-05-26T09:29:52Z",
          "updatedAt": "2023-05-26T09:29:52Z",
          "comments": []
        }
      ]
    },
    {
      "number": 104,
      "id": "PR_kwDOJbVClc5Ra_0S",
      "title": "Removed W3C VCDM transformation algo section",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/104",
      "state": "MERGED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #103 ",
      "createdAt": "2023-05-26T09:41:04Z",
      "updatedAt": "2023-05-26T14:27:49Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "08f7b85dc3c340a705fcd8a7466d466848c054eb",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "awoie/fix-103",
      "headRefOid": "fb90893a42871d04e5d2cb297fde597ed2875940",
      "closedAt": "2023-05-26T11:59:15Z",
      "mergedAt": "2023-05-26T11:59:15Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "ddfaefc60ed99191f35e746f94e26c04e4f3f934"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5WMQeT",
          "commit": {
            "abbreviatedOid": "fb90893"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-05-26T11:43:34Z",
          "updatedAt": "2023-05-26T11:43:34Z",
          "comments": []
        }
      ]
    },
    {
      "number": 105,
      "id": "PR_kwDOJbVClc5RbzGy",
      "title": "Editorial changes",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/105",
      "state": "MERGED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Editorial changes",
      "createdAt": "2023-05-26T12:07:27Z",
      "updatedAt": "2023-05-26T14:27:48Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "ddfaefc60ed99191f35e746f94e26c04e4f3f934",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "awoie/editorial-1",
      "headRefOid": "810c86bb2fc1d3efd41c8e73a9a16af67a6146e2",
      "closedAt": "2023-05-26T12:08:23Z",
      "mergedAt": "2023-05-26T12:08:23Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "0965895fed176b5be2fcef2236c4570a37baaa34"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 106,
      "id": "PR_kwDOJbVClc5Rb0zN",
      "title": "Release 01",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/106",
      "state": "MERGED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Release 01",
      "createdAt": "2023-05-26T12:11:47Z",
      "updatedAt": "2023-05-26T12:12:51Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "0965895fed176b5be2fcef2236c4570a37baaa34",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "awoie/release-01",
      "headRefOid": "ba32a58299eeca5506d63e98882bd9a68e5d1a23",
      "closedAt": "2023-05-26T12:12:51Z",
      "mergedAt": "2023-05-26T12:12:51Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "669c212f75b5bfc9b85eee4137910508290df2a7"
      },
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "merging, just editorial changes",
          "createdAt": "2023-05-26T12:12:47Z",
          "updatedAt": "2023-05-26T12:12:47Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 107,
      "id": "PR_kwDOJbVClc5Rb6HU",
      "title": "Adjusted term definition",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/107",
      "state": "MERGED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Adjusted term definition",
      "createdAt": "2023-05-26T12:29:18Z",
      "updatedAt": "2023-05-26T14:27:47Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "669c212f75b5bfc9b85eee4137910508290df2a7",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "awoie/release-01",
      "headRefOid": "7924172770d0f88c45606b20f1408ead1b9c26dc",
      "closedAt": "2023-05-26T13:23:49Z",
      "mergedAt": "2023-05-26T13:23:49Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "588ea557ea5861784bbaf7051eddefdeb6d0751f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5WMwFS",
          "commit": {
            "abbreviatedOid": "58d8420"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-05-26T13:00:58Z",
          "updatedAt": "2023-05-26T13:00:58Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5WMwZ4",
          "commit": {
            "abbreviatedOid": "58d8420"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-26T13:01:42Z",
          "updatedAt": "2023-05-26T13:01:42Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\n:  An Issuer-signed assertion with claims about a Subject whose authenticity\r\n```",
              "createdAt": "2023-05-26T13:01:42Z",
              "updatedAt": "2023-05-26T13:01:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5WMwba",
          "commit": {
            "abbreviatedOid": "58d8420"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-26T13:01:45Z",
          "updatedAt": "2023-05-26T13:01:46Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\n:  An Issuer-signed assertion with claims about a Subject whose authenticity\r\n```",
              "createdAt": "2023-05-26T13:01:45Z",
              "updatedAt": "2023-05-26T13:01:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5WMwrH",
          "commit": {
            "abbreviatedOid": "58d8420"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-26T13:02:21Z",
          "updatedAt": "2023-05-26T13:02:22Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Also, we don't need the \"whose authenticitiy...\" part any longer when we say that it is \"signed\".",
              "createdAt": "2023-05-26T13:02:21Z",
              "updatedAt": "2023-05-26T13:02:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5WM2A-",
          "commit": {
            "abbreviatedOid": "58d8420"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-26T13:14:01Z",
          "updatedAt": "2023-05-26T13:14:01Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "agree, pls review again @danielfett ",
              "createdAt": "2023-05-26T13:14:01Z",
              "updatedAt": "2023-05-26T13:14:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5WM7Bh",
          "commit": {
            "abbreviatedOid": "7924172"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-05-26T13:23:42Z",
          "updatedAt": "2023-05-26T13:23:42Z",
          "comments": []
        }
      ]
    },
    {
      "number": 109,
      "id": "PR_kwDOJbVClc5ReLhn",
      "title": "make private claims relevant",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/109",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Issue #108 ",
      "createdAt": "2023-05-26T20:23:07Z",
      "updatedAt": "2023-06-17T04:23:53Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "588ea557ea5861784bbaf7051eddefdeb6d0751f",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "private-claims",
      "headRefOid": "21ed8a0ee541d22c5ec9efc5ab1dc1bc05a6f392",
      "closedAt": "2023-06-17T04:23:52Z",
      "mergedAt": "2023-06-17T04:23:52Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "d0716fef9e2f7779d83ec0e8af158acd3d114a7f"
      },
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Can you give an example where this is relevant? With excluding private\nclaims we make sure all claims are uniquely identifiable across all parties\nof the three-party-model.\n\nOn Fri 26. May 2023 at 22:23, Kristina ***@***.***> wrote:\n\n> @Sakurann <https://github.com/Sakurann> requested your review on: #109\n> <https://github.com/vcstuff/draft-terbu-sd-jwt-vc/pull/109> make private\n> claims relevant as a code owner.\n>\n> \u2014\n> Reply to this email directly, view it on GitHub\n> <https://github.com/vcstuff/draft-terbu-sd-jwt-vc/pull/109#event-9354429360>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AKLN3MC3CECGQ5Q6RNQ3YA3XIEGLPANCNFSM6AAAAAAYQU74RA>\n> .\n> You are receiving this because your review was requested.Message ID:\n> ***@***.***>\n>\n",
          "createdAt": "2023-05-27T08:05:43Z",
          "updatedAt": "2023-05-27T08:05:43Z"
        },
        {
          "author": "tplooker",
          "authorAssociation": "NONE",
          "body": "> Can you give an example where this is relevant? With excluding private\r\nclaims we make sure all claims are uniquely identifiable across all parties\r\nof the three-party-model.\r\n\r\nI dont believe this PR discourages public claims it simply reflects that there are bunch of scenarios where VC ecosystems what to interoperate on claims that are perhaps not general enough to register as public claims.",
          "createdAt": "2023-06-14T22:21:23Z",
          "updatedAt": "2023-06-14T22:21:23Z"
        },
        {
          "author": "OR13",
          "authorAssociation": "COLLABORATOR",
          "body": "Please merge ",
          "createdAt": "2023-06-17T04:10:52Z",
          "updatedAt": "2023-06-17T04:10:52Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5XpIah",
          "commit": {
            "abbreviatedOid": "21ed8a0"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-08T16:51:35Z",
          "updatedAt": "2023-06-08T16:51:35Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5YF7rr",
          "commit": {
            "abbreviatedOid": "21ed8a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-13T19:49:44Z",
          "updatedAt": "2023-06-13T19:49:44Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5YPQJc",
          "commit": {
            "abbreviatedOid": "21ed8a0"
          },
          "author": "tplooker",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-14T22:20:06Z",
          "updatedAt": "2023-06-14T22:20:06Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5YZzDq",
          "commit": {
            "abbreviatedOid": "21ed8a0"
          },
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-16T10:12:57Z",
          "updatedAt": "2023-06-16T10:12:57Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5Yfior",
          "commit": {
            "abbreviatedOid": "21ed8a0"
          },
          "author": "OR13",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-17T03:57:43Z",
          "updatedAt": "2023-06-17T03:57:43Z",
          "comments": []
        }
      ]
    },
    {
      "number": 117,
      "id": "PR_kwDOJbVClc5Sdgbd",
      "title": "copy MikeP draft",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/117",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "DO NOT MERGE"
      ],
      "body": "",
      "createdAt": "2023-06-07T22:37:12Z",
      "updatedAt": "2023-06-22T09:13:34Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "sakuran-nbf",
      "baseRefOid": "38e84d744a0f4825fc09d1f8d5acd52f18caf165",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "diff-vc-jwt",
      "headRefOid": "0fb898c231155aab2fd62c6a9b3dc1bd5b2b075d",
      "closedAt": "2023-06-22T09:13:33Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "@Sakurann Can you close this since we merged #131 ?",
          "createdAt": "2023-06-21T13:48:33Z",
          "updatedAt": "2023-06-21T13:48:33Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this PR since PR #131 was merged.",
          "createdAt": "2023-06-22T09:13:33Z",
          "updatedAt": "2023-06-22T09:13:33Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5XpAum",
          "commit": {
            "abbreviatedOid": "0fb898c"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "I think the joint spec requires several sections explaining the concepts used by both representations, namely the structure of the payload (all the JWT claims), JWT Issuer Metadata, Key Binding, and individual section covering the differences, namely `typ` values and none selectively disclosable claims (for SD-JWT).\r\nI guess we first need to agree on the objectives and principles of a joint spec. \r\n",
          "createdAt": "2023-06-08T16:30:16Z",
          "updatedAt": "2023-06-08T16:50:23Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\ntitle = \"JWT representation of Verifiable Credentials\"\r\n```\r\n\r\nWhat does \"native\" mean? I would rather like to have a title along the lines of \"Verifiable Credentials with JSON payload following JWT rules with optional selective disclosure support\" but I know that sounds pretty artificial. So removing native might be ok. ",
              "createdAt": "2023-06-08T16:30:16Z",
              "updatedAt": "2023-06-08T16:48:56Z"
            },
            {
              "originalPosition": 13,
              "body": "```suggestion\r\nkeyword = [\"OAUTH\",\"SD-JWT\",\"JWT\"]\r\n```",
              "createdAt": "2023-06-08T16:31:00Z",
              "updatedAt": "2023-06-08T16:48:10Z"
            },
            {
              "originalPosition": 18,
              "body": "I thought we wanted to integrate the JWT part into Oliver's draft. ",
              "createdAt": "2023-06-08T16:36:41Z",
              "updatedAt": "2023-06-08T16:48:10Z"
            },
            {
              "originalPosition": 220,
              "body": "what does \"mapping\" mean? ",
              "createdAt": "2023-06-08T16:37:59Z",
              "updatedAt": "2023-06-08T16:48:10Z"
            },
            {
              "originalPosition": 233,
              "body": "sounds like a self fulfilling prophecy - why is that needed? I would rather state what the expected `typ` value is. ",
              "createdAt": "2023-06-08T16:39:02Z",
              "updatedAt": "2023-06-08T16:48:10Z"
            },
            {
              "originalPosition": 245,
              "body": "or `vc+sd-jwt`",
              "createdAt": "2023-06-08T16:39:20Z",
              "updatedAt": "2023-06-08T16:48:10Z"
            },
            {
              "originalPosition": 263,
              "body": "no definition of the MUST claims in a JWT VC?",
              "createdAt": "2023-06-08T16:40:40Z",
              "updatedAt": "2023-06-08T16:48:11Z"
            },
            {
              "originalPosition": 278,
              "body": "which vc and vp claims? seems this is another self fulfilling prophecy ",
              "createdAt": "2023-06-08T16:41:10Z",
              "updatedAt": "2023-06-08T16:48:11Z"
            },
            {
              "originalPosition": 279,
              "body": "typ or cty? I don't understand this sentence. Given line 211 states `typ` is `vc+jwt`.",
              "createdAt": "2023-06-08T16:41:59Z",
              "updatedAt": "2023-06-08T16:48:11Z"
            }
          ]
        }
      ]
    },
    {
      "number": 118,
      "id": "PR_kwDOJbVClc5Sikpr",
      "title": "breaking change: .well-known/jwt-issuer renamed to .well-known/jwt-vc-issuer",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/118",
      "state": "CLOSED",
      "author": "peppelinux",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "discuss",
        "DO NOT MERGE"
      ],
      "body": "~this PR resolves~ https://github.com/vcstuff/draft-terbu-sd-jwt-vc/issues/101\r\n\r\nmore discussion is needed",
      "createdAt": "2023-06-08T16:19:23Z",
      "updatedAt": "2023-11-27T23:42:19Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "588ea557ea5861784bbaf7051eddefdeb6d0751f",
      "headRepository": "peppelinux/draft-terbu-sd-jwt-vc",
      "headRefName": "vc-issuer-md",
      "headRefOid": "cafdb7fd7b93248941b20eca924e149009f2b10e",
      "closedAt": "2023-11-27T23:42:19Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "might be a stupid question: but given the latest change from VC-SD-JWT to SD-JWT VC, shouldn\u2019t the metadata location name be `jwt-vc-issuer` instead of `vc-jwt-issuer`?",
          "createdAt": "2023-06-08T16:24:36Z",
          "updatedAt": "2023-06-08T16:24:36Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Potentially fixes #101 ",
          "createdAt": "2023-06-21T14:38:51Z",
          "updatedAt": "2023-06-21T14:38:51Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I propose that we wait to resolve the discussion in #101 before merging this.",
          "createdAt": "2023-06-22T09:19:28Z",
          "updatedAt": "2023-06-22T09:19:28Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Marked as DO NOT MERGE since we have to wait for the discussion in #101 to resolve first.",
          "createdAt": "2023-06-22T09:19:37Z",
          "updatedAt": "2023-06-22T09:19:37Z"
        },
        {
          "author": "OR13",
          "authorAssociation": "COLLABORATOR",
          "body": "I added a related PR here: https://github.com/w3c/vc-jwt/pull/111",
          "createdAt": "2023-06-26T15:28:48Z",
          "updatedAt": "2023-06-26T15:28:48Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "NONE",
          "body": "@selfissued what about having jwt_issuer as a oidc federation metadata type?\r\n\r\nIf this well known resource Is a generic purpose metadata that every kind of entity can expose, how to check the protocol metadata It carries?\r\n\r\nIt might be and OpenID provider and a relying party and an RS or whatever, without a unique identifier It wouldnt be good for metadata but Just for Key attestation\r\n\r\nSo the difference between this and x509 would be just the data format.\r\n\r\nOr, differently, in jwt-issuer there would space for multiple metadata with unique type identifiers like the federation EC?\r\n\r\n",
          "createdAt": "2023-06-29T20:41:22Z",
          "updatedAt": "2023-06-29T20:41:22Z"
        },
        {
          "author": "OR13",
          "authorAssociation": "COLLABORATOR",
          "body": "Why not define, `.well-known/jwks.json`... doesn't seem like jwt or issuer are needed... ",
          "createdAt": "2023-06-30T00:47:42Z",
          "updatedAt": "2023-06-30T00:47:42Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "NONE",
          "body": "> Why not define, `.well-known/jwks.json`... doesn't seem like jwt or issuer are needed...\r\n\r\nThat's the same though I had, if It Is Just for Key attestation let's give to it the semantic It should",
          "createdAt": "2023-06-30T07:06:40Z",
          "updatedAt": "2023-06-30T07:06:40Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "NONE",
          "body": " Ok dears, may I change the endpoint name to `.well-known/jwks.json` in this PR and ask again your kindly revision?",
          "createdAt": "2023-06-30T22:32:47Z",
          "updatedAt": "2023-06-30T22:32:47Z"
        },
        {
          "author": "selfissued",
          "authorAssociation": "NONE",
          "body": "`.well-known/jwt-issuer` is a better name than `.well-known/jwks.json`.  The latter implies that the only claim that will be in the metadata is the `jwks_uri` claim, which won't be the case for some use cases.  Just like `.well-known/openid-configuration` and `.well-known/oauth-authorization-server`, yes, we'll have `jwks_uri`, but we also want the metadata to be extensible.\r\n\r\nThe existing name is good.",
          "createdAt": "2023-06-30T22:40:02Z",
          "updatedAt": "2023-06-30T22:40:02Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "NONE",
          "body": "names are very often semantical or cosmetic and driven by personal tastes or objective meanings, that's just a name.\r\n\r\nI would like to ask which are the scopes of this endpoint, if it is just for key attestation or also for metadata.\r\nI assume the second. Since it is also for metadata, I assume here, how the metadata of a formless and abstract entity could be carried in that endpoint?\r\n\r\nmy answer is, by defining several metadata types, as already done in [federation entity configuration](https://openid.net/specs/openid-connect-federation-1_0.html#name-metadata-type-identifiers) \r\n\r\nbut this seems not clear, or out of scope for now, or let them think about this later on.\r\nWell, without the big picture I find very difficult giving a name to an endpoint, since the name should represent its scopes and values",
          "createdAt": "2023-06-30T22:48:26Z",
          "updatedAt": "2023-07-01T13:13:03Z"
        },
        {
          "author": "tplooker",
          "authorAssociation": "NONE",
          "body": "> Why not define, `.well-known/jwks.json`... doesn't seem like jwt or issuer are needed...\r\n\r\nI like this more, having a well known location to associate a set of JWKs to seems generally useful, if you have additional metadata to communicate to parties that should be served from higher level well-known endpoints that are defined for that protocol / application.",
          "createdAt": "2023-07-10T19:05:06Z",
          "updatedAt": "2023-07-10T19:05:06Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "NONE",
          "body": "if the purpose of this endpoint is only for serving jwks, I think `.well-known/jwk-set` is a good choice\r\n\r\n",
          "createdAt": "2023-07-10T20:15:41Z",
          "updatedAt": "2023-07-10T20:15:41Z"
        },
        {
          "author": "TakahikoKawasaki",
          "authorAssociation": "NONE",
          "body": "Any path name would be fine (e.g., `/.well-known/jwks.json`, `/.well-known/jwk-set`, `/.well-known/jwks`, ...), but I think it's a good idea to assign a well-known path to the endpoint that returns the JWK Set document.\r\n\r\nDefining such a well-known path will not prevent the definition of `/.well-known/jwt-issuer`. Both paths can coexist. The discussion for `/.well-known/jwt-issuer` can be revisisted in the future if the need arises.",
          "createdAt": "2023-07-10T21:48:13Z",
          "updatedAt": "2023-07-10T21:48:13Z"
        },
        {
          "author": "OR13",
          "authorAssociation": "COLLABORATOR",
          "body": "You could remove the content type from the resource identifier, and use the accept header.\n\nGET `/.well-known/keys`\n\n--accept application/jwk-set+json\n--accept application/cose-key-set\n\n",
          "createdAt": "2023-07-10T21:53:25Z",
          "updatedAt": "2023-07-10T21:53:58Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "NONE",
          "body": "> You could remove the content type from the resource identifier, and use the accept header.\r\n> \r\n> GET `/.well-known/keys`\r\n> \r\n> --accept application/jwk-set+json --accept application/cose-key-set\r\n\r\nI love this, however I'd prefer two separate endpoints for two different format, since without the definition of any content-type in the request would return a default value, then: Jose or cose Key set?",
          "createdAt": "2023-07-10T22:01:20Z",
          "updatedAt": "2023-07-10T22:01:20Z"
        },
        {
          "author": "OR13",
          "authorAssociation": "COLLABORATOR",
          "body": "Server reserves the right to set the content type header or throw a content type unsupported error, but you can also probably say jwk-set+json is the default when requesting the endpoint be reserved....\n\nopenid-configuration is known to be application/json, and didn't reserve\n\n`/.well-known/openid-configuration.json`",
          "createdAt": "2023-07-10T22:10:20Z",
          "updatedAt": "2023-07-10T22:10:59Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "NONE",
          "body": "overseeded by https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/189",
          "createdAt": "2023-11-27T23:42:19Z",
          "updatedAt": "2023-11-27T23:42:19Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5Xo9xc",
          "commit": {
            "abbreviatedOid": "b0d0d2c"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "please also see my comment",
          "createdAt": "2023-06-08T16:23:07Z",
          "updatedAt": "2023-06-08T16:24:58Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "```suggestion\r\n# JWT VC Issuer Metadata {#vc-jwt-issuer-metadata}\r\n```",
              "createdAt": "2023-06-08T16:23:07Z",
              "updatedAt": "2023-06-08T16:24:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5XpDDr",
          "commit": {
            "abbreviatedOid": "b0d0d2c"
          },
          "author": "peppelinux",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-08T16:36:59Z",
          "updatedAt": "2023-06-08T16:36:59Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "done, thank you",
              "createdAt": "2023-06-08T16:36:59Z",
              "updatedAt": "2023-06-08T16:36:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5YfixH",
          "commit": {
            "abbreviatedOid": "cafdb7f"
          },
          "author": "OR13",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "I don't think this helps with readability",
          "createdAt": "2023-06-17T04:02:19Z",
          "updatedAt": "2023-06-17T04:02:19Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5Y28et",
          "commit": {
            "abbreviatedOid": "cafdb7f"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "lgtm",
          "createdAt": "2023-06-21T13:51:03Z",
          "updatedAt": "2023-06-21T13:51:03Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5ZUtNv",
          "commit": {
            "abbreviatedOid": "cafdb7f"
          },
          "author": "OR13",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-26T13:55:56Z",
          "updatedAt": "2023-06-26T13:55:56Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "why are we intentionally breaking compatibility with oidc?",
              "createdAt": "2023-06-26T13:55:56Z",
              "updatedAt": "2023-06-26T13:55:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5ZUuez",
          "commit": {
            "abbreviatedOid": "cafdb7f"
          },
          "author": "OR13",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-26T13:57:24Z",
          "updatedAt": "2023-06-26T13:57:25Z",
          "comments": [
            {
              "originalPosition": 98,
              "body": "provide a full example of the dereferenced resource.... something like:\r\n\r\n```json\r\n{\r\n  \"keys\": [\r\n  {\r\n     \"kid\": \"...\"\r\n  }\r\n   ]\r\n}\r\n```",
              "createdAt": "2023-06-26T13:57:24Z",
              "updatedAt": "2023-06-26T13:57:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5ZUvHR",
          "commit": {
            "abbreviatedOid": "cafdb7f"
          },
          "author": "OR13",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "This seems to break compatibility with both DIDs and OIDC.",
          "createdAt": "2023-06-26T13:58:11Z",
          "updatedAt": "2023-06-26T13:58:11Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5Zw4_7",
          "commit": {
            "abbreviatedOid": "cafdb7f"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "i do not think we have enough data points to make this decision, yet. this mechanism `/.well-known/jwt-issuer/` is meant to be a generic mechanism, applicable beyond only VCs and I don't think it conflicts with other .well-known paths like in federation (partially because we do not have clarity around what other metadata to put under that path other thank JWK...)",
          "createdAt": "2023-06-29T19:48:41Z",
          "updatedAt": "2023-06-29T19:48:41Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5Zw9qP",
          "commit": {
            "abbreviatedOid": "cafdb7f"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-29T19:52:57Z",
          "updatedAt": "2023-06-29T19:52:57Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "OIDC uses a different path, so I don't think it breaks compatibility with it. (this path is being defined in this spec, because we were surprised to find that a generic jwt-issuer .well-known path has not been defined, but at the same time maybe it was not defined because it is too generic and this path needs to be scoped to jwt-vcs, not sure yet)",
              "createdAt": "2023-06-29T19:52:57Z",
              "updatedAt": "2023-06-29T19:52:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5ZxAOk",
          "commit": {
            "abbreviatedOid": "cafdb7f"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-29T19:58:33Z",
          "updatedAt": "2023-06-29T19:58:34Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "@OR13 A SD-JWT VC is not an ID Token and a verifier does not know how a SD-JWT VC was issued. So I don't see the relationship to OIDC: Could you please explain what \"breaking compatibility with OIDC\" means? \r\n",
              "createdAt": "2023-06-29T19:58:33Z",
              "updatedAt": "2023-06-29T19:58:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5ZxHgf",
          "commit": {
            "abbreviatedOid": "cafdb7f"
          },
          "author": "selfissued",
          "authorAssociation": "NONE",
          "state": "CHANGES_REQUESTED",
          "body": "I would leave the name `.well-known/jwt-issuer`.  This is a general-purpose capability usable by other kinds of JWTs.  It just happens to being defined in this spec.\r\n\r\nThere's nothing wrong with that.  In fact, specs often do that, to the benefit of others wanting to use these more-general-purpose facilities.  They get put in IANA registries, from which their definitions are discoverable.",
          "createdAt": "2023-06-29T20:14:12Z",
          "updatedAt": "2023-06-29T20:14:12Z",
          "comments": []
        }
      ]
    },
    {
      "number": 120,
      "id": "PR_kwDOJbVClc5SmL7F",
      "title": "first pass at adding a non-selectively disclosable JWT VC to the spec",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/120",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "DO NOT MERGE"
      ],
      "body": "Changes\r\n- renamed the draft \r\n    - kept the short name, might need to introduce a term like `JOSE-VC` to aggregate both \"JWT VC and SD-JWT VC\" but might work without it too)\r\n    - I must admit I fought the urge to call it JWS VC...\r\n- restructured so that there is a `common data format` section with headers and payload requirements\r\n    - followed by a section per jwt vc and sd-jwt vc that defines media type and non-disclosable claims (for sd-jwt vc)\r\n- verification and processing is a top level section now\r\n- no changes to the jwt issuer metadata section\r\n- presenting VC section is common to both\r\n    - introduced ho to present a JWT VC with a HB JWT. this is currently the only way to do HB with JWT VC when HB is necessary. \r\n- no example of JWT VC yet - can be another PR I think\r\n\r\n[link to rendered preview](https://vcstuff.github.io/draft-terbu-sd-jwt-vc/jwt-vc/draft-terbu-oauth-jwt-vc.html\r\n)",
      "createdAt": "2023-06-09T08:20:25Z",
      "updatedAt": "2023-06-21T19:59:02Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "588ea557ea5861784bbaf7051eddefdeb6d0751f",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "jwt-vc",
      "headRefOid": "d852bcc1bfed1173a98061b3c404b1d3aee9a7f3",
      "closedAt": "2023-06-21T19:59:02Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "please rename to draft-terbu-jwt-vc",
          "createdAt": "2023-06-14T21:02:24Z",
          "updatedAt": "2023-06-14T21:02:24Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "cc @OR13, @mprorock. ",
          "createdAt": "2023-06-14T22:51:00Z",
          "updatedAt": "2023-06-14T22:51:00Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "\"Holder Binding\" is soon to be \"Key Binding\"  (e.g., https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/286 & https://github.com/vcstuff/draft-terbu-sd-jwt-vc/pull/126) so it might make sense to use \"Key Binding\" in the new text of this PR? I dunno, timing and coordinating some of these changes is challenging. \r\n\r\nSimilarly, the SD-JWT section numbers are almost certain to change some over time (especially https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/290 but not only that) so it make sense to not reference specific section numbers yet. ",
          "createdAt": "2023-06-15T18:24:34Z",
          "updatedAt": "2023-06-15T18:24:34Z"
        },
        {
          "author": "peacekeeper",
          "authorAssociation": "NONE",
          "body": "What's the difference between a \"JWT VC\" and a \"JWT\" ?",
          "createdAt": "2023-06-16T19:40:17Z",
          "updatedAt": "2023-06-16T19:40:17Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "> What's the difference between a \"JWT VC\" and a \"JWT\" ?\r\n\r\n@peacekeeper I hope the text below from PR #131 explains it:\r\n\r\n\"SD-JWT is a superset of JWT as it can also be used when there are no selectively disclosable claims and also supports JWS JSON serialization, which is useful for long term archiving and multi signatures. However, SD-JWT itself does not define the claims that must be used within the payload or their semantics.\r\n\r\nThis specification therefore uses SD-JWT and the well-established JWT content rules and extensibility model as basis for representing Verifiable Credentials with JSON payload. Those Verifiable Credentials are called SD-JWT VCs.\r\n\r\nSD-JWTs VC can contain claims that are registered in \"JSON Web Token Claims\" registry as defined in [@!RFC7519], as well as public and private claims.\"\r\n\r\nbottomline, how would you use JWT RFC7519 to have interoperable JWT VCs? you need to have a set of mandatory JWT claims, rules how to discovery the keys to validate it, etc.",
          "createdAt": "2023-06-16T20:02:35Z",
          "updatedAt": "2023-06-16T20:02:35Z"
        },
        {
          "author": "peacekeeper",
          "authorAssociation": "NONE",
          "body": "@Sakurann Thank you.. So if I understand correctly, a \"JWT VC\" nowdays is almost the same as a traditional JWT, except that it makes some JWT claims mandatory and ~~steals~~ - uh excuse me - adopts and \"JWTifies\" several other concepts invented by VCs, such as \"type\", three party model, key discovery, status list, etc.?",
          "createdAt": "2023-06-16T20:19:16Z",
          "updatedAt": "2023-06-16T20:19:16Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "First and foremost, if W3C VC WG was the right place to define credentials in three party model with vanilla JSON and JWT claims, that work would not be happening elsewhere. W3C VC WG made it clear that it is only interested in working on anything JSON-LD so a JW-* work item in W3C will focus on protecting the payload that is JSON-LD without using any JWT claims. so all of us interested in working on vanilla JSON/JWT claim set based three party model credentials had to find a new home for it.\r\n\r\nSo yes, JWT VC that uses JWT claims is (should have always been) based on the \"traditional JWT\", assuming you mean RFC 7519 and I do not see anything wrong with that :)\r\n\r\nSecond, let's not argue who invented what - the concepts of typing JWTs (ex: RFC8725), key discovery (ex: RFC8414), and status lists (ex: CRLs) have existed before/alongside VCs. though as I said, VCDM should get the benefit of making the three party model concept widely known and should be appreciated and praised for that. (which is how i feel).\r\n\r\nFinally, it usually makes people happy when the concepts they have worked on are being used in other places, even in places they have not anticipated. so your choice of words is very \"interesting\".",
          "createdAt": "2023-06-16T22:27:55Z",
          "updatedAt": "2023-06-16T22:27:55Z"
        },
        {
          "author": "OR13",
          "authorAssociation": "COLLABORATOR",
          "body": "Very excited for VCs that are CBOR and JSON.\n\nAlso excited for key transparency, COSE and SCITT... IETF has an excellent community and building blocks that make development easy.\n\nEverything does not need to happen at the W3C, in JSON-LD, with terms controlled by w3id.org which is not even the W3C.\n\nI personally prefer my terms to come from RFCs and IANA, but reasonable people can disagree.\n",
          "createdAt": "2023-06-17T03:45:00Z",
          "updatedAt": "2023-06-17T03:45:00Z"
        },
        {
          "author": "peacekeeper",
          "authorAssociation": "NONE",
          "body": "@Sakurann Sorry for my choice of words, I didn't mean it in a negative way :) I actually like this direction.. On the technical level, this specification and PR feel right to keep the VC data model and JWT data model separate, in order to avoid things like a \"vc\" claim and unclear transformation rules that we have seen in the past.\r\n\r\nOn the marketing and communication level however this needs improvement I think. How is anyone supposed to understand the difference between a \"VC\", a \"JWT\", a \"JWT VC\", and \"VC-JWT\"? If a \"JWT VC\" is a \"VC\", then what do you call what the W3C VC WG is defining? Does this mean there will be \"VCDM-based VCs\" and \"non-VCDM-based VCs\"?",
          "createdAt": "2023-06-17T17:10:55Z",
          "updatedAt": "2023-06-17T17:10:55Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "@Sakurann Do you want to close this PR since we merged PR #131 ? ",
          "createdAt": "2023-06-21T13:52:32Z",
          "updatedAt": "2023-06-21T13:52:32Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5Xtdfk",
          "commit": {
            "abbreviatedOid": "8acb37d"
          },
          "author": "tplooker",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-09T08:56:14Z",
          "updatedAt": "2023-06-09T08:56:15Z",
          "comments": [
            {
              "originalPosition": 3,
              "body": "How about just `JWT based Verifiable Credentials` I think the fact that they are selectively disclosable can be addressed right in the intro and abstract",
              "createdAt": "2023-06-09T08:56:14Z",
              "updatedAt": "2023-06-09T08:56:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5XteJs",
          "commit": {
            "abbreviatedOid": "8acb37d"
          },
          "author": "tplooker",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-09T08:57:48Z",
          "updatedAt": "2023-06-09T08:57:48Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "```suggestion\r\nrules to express Verifiable Credentials as a JWT [@!RFC7519] or an SD-JWT [@!I-D.ietf-oauth-selective-disclosure-jwt]\r\n```\r\n\r\nproposed simplification",
              "createdAt": "2023-06-09T08:57:48Z",
              "updatedAt": "2023-06-09T08:57:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5XtedX",
          "commit": {
            "abbreviatedOid": "8acb37d"
          },
          "author": "tplooker",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-09T08:58:36Z",
          "updatedAt": "2023-06-09T08:58:36Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "```suggestion\r\nThis specification defines Verifiable Credentials based on the JWT and SD-JWT.\r\n```",
              "createdAt": "2023-06-09T08:58:36Z",
              "updatedAt": "2023-06-09T08:58:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5XyRGN",
          "commit": {
            "abbreviatedOid": "8acb37d"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-09T17:51:43Z",
          "updatedAt": "2023-06-09T17:51:43Z",
          "comments": [
            {
              "originalPosition": 3,
              "body": "yeah, title.. `JWT based` and `with a JWT Claim set` is different in my mind because `JWT != SD-JWT`, and the most important thing we are trying to convey is that the payload is vanilla JSON and I found `with a JWT Claim set` to be a good compromise because JSON-LD payload does not use JWT claims while JSON-LD is still JSON.",
              "createdAt": "2023-06-09T17:51:43Z",
              "updatedAt": "2023-06-09T17:51:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5XyRzS",
          "commit": {
            "abbreviatedOid": "8acb37d"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-09T17:53:02Z",
          "updatedAt": "2023-06-09T17:53:02Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "I think we need to highlight that we are proposing two different ways to protect JSON payload (JWT claim set) with and without SD, and the current text is more explicit about it.",
              "createdAt": "2023-06-09T17:53:02Z",
              "updatedAt": "2023-06-09T17:53:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5XySAN",
          "commit": {
            "abbreviatedOid": "8acb37d"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-09T17:53:24Z",
          "updatedAt": "2023-06-09T17:53:25Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "same comment as above two comments..",
              "createdAt": "2023-06-09T17:53:24Z",
              "updatedAt": "2023-06-09T17:53:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5Xzg4f",
          "commit": {
            "abbreviatedOid": "8acb37d"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-09T22:21:02Z",
          "updatedAt": "2023-06-09T22:21:03Z",
          "comments": [
            {
              "originalPosition": 3,
              "body": "I'd argue that a shorter more succinct title like `JWT and SD-JWT Verifiable Credentials` would be better. Any subtleties could be added/addressed in the abstract or intro. If needed. But the title doesn't seem like the right place to be differentiating a JWT claim set (which is JSON) or JSON or JSON-LD or whatever. ",
              "createdAt": "2023-06-09T22:21:03Z",
              "updatedAt": "2023-06-09T22:21:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5XzhkZ",
          "commit": {
            "abbreviatedOid": "8acb37d"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-09T22:26:04Z",
          "updatedAt": "2023-06-09T22:26:04Z",
          "comments": [
            {
              "originalPosition": 3,
              "body": "And yes, I know there's a recent [title change committed to SD-JWT](https://github.com/oauth-wg/oauth-selective-disclosure-jwt/commit/332ded8faf20d528c5c05e04cebed28aab1a0d33) but I don't love it.  ",
              "createdAt": "2023-06-09T22:26:04Z",
              "updatedAt": "2023-06-09T22:26:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5Xzhz8",
          "commit": {
            "abbreviatedOid": "8acb37d"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-09T22:27:59Z",
          "updatedAt": "2023-06-09T22:27:59Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "I think the suggested text from @tplooker conveys it too.  ",
              "createdAt": "2023-06-09T22:27:59Z",
              "updatedAt": "2023-06-09T22:27:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5X95e1",
          "commit": {
            "abbreviatedOid": "8acb37d"
          },
          "author": "tplooker",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-12T21:21:52Z",
          "updatedAt": "2023-06-12T21:21:52Z",
          "comments": [
            {
              "originalPosition": 3,
              "body": "> I'd argue that a shorter more succinct title like JWT and SD-JWT Verifiable Credentials would be better. Any subtleties could be added/addressed in the abstract or intro. If needed. But the title doesn't seem like the right place to be differentiating a JWT claim set (which is JSON) or JSON or JSON-LD or whatever.\r\n\r\nI'm in support of this.",
              "createdAt": "2023-06-12T21:21:52Z",
              "updatedAt": "2023-06-12T21:21:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5X_mG1",
          "commit": {
            "abbreviatedOid": "8acb37d"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-13T05:41:49Z",
          "updatedAt": "2023-06-13T05:41:49Z",
          "comments": [
            {
              "originalPosition": 3,
              "body": "```suggestion\r\ntitle = \"JWT and SD-JWT Verifiable Credentials\"\r\n```",
              "createdAt": "2023-06-13T05:41:49Z",
              "updatedAt": "2023-06-13T05:41:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5X_mkD",
          "commit": {
            "abbreviatedOid": "8acb37d"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-13T05:43:34Z",
          "updatedAt": "2023-06-13T05:43:35Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "as you said yourself, Brian, `a JWS with a JWT claim set is a JWT`, which is why I am ok calling it a JWT VC, but at least in the intro I think we agreed to make it clear that `a JWS with a JWT claim set is a JWT`",
              "createdAt": "2023-06-13T05:43:34Z",
              "updatedAt": "2023-06-13T05:43:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5YAEaZ",
          "commit": {
            "abbreviatedOid": "8acb37d"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-13T07:11:34Z",
          "updatedAt": "2023-06-13T07:11:35Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "I think Tobias' proposal is just fine.",
              "createdAt": "2023-06-13T07:11:34Z",
              "updatedAt": "2023-06-13T07:11:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5YAEzR",
          "commit": {
            "abbreviatedOid": "8acb37d"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-13T07:12:23Z",
          "updatedAt": "2023-06-13T07:12:23Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "Tobias' proposal, but remove `the`.\r\n```suggestion\r\nThis specification defines Verifiable Credentials based on JWT and SD-JWT.\r\n```",
              "createdAt": "2023-06-13T07:12:23Z",
              "updatedAt": "2023-06-13T07:12:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5YAFLx",
          "commit": {
            "abbreviatedOid": "0b42e6c"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2023-06-13T07:13:19Z",
          "updatedAt": "2023-06-13T07:24:03Z",
          "comments": [
            {
              "originalPosition": 3,
              "body": "Reversing the order makes it a bit more clear IMO. I propose introducing the short terms here, but can live without.\r\n```suggestion\r\ntitle = \"Verifiable Credentials using JWT and SD-JWT (JWT VC, SD-JWT VC)\"\r\n```",
              "createdAt": "2023-06-13T07:13:19Z",
              "updatedAt": "2023-06-13T07:24:03Z"
            },
            {
              "originalPosition": 40,
              "body": "```suggestion\r\n  - Data model and media types for Verifiable Credentials based on JWTs and SD-JWTs.\r\n```",
              "createdAt": "2023-06-13T07:14:26Z",
              "updatedAt": "2023-06-13T07:24:03Z"
            },
            {
              "originalPosition": 172,
              "body": "```suggestion\r\nOut of the claims used in SD-JWT VC defined in (#registered-jwt-claims),\r\nonly the `sub` claim MAY be selectively disclosable. Other claims not defined in (#registered-jwt-claims) MAY be selectively disclosable.\r\n```",
              "createdAt": "2023-06-13T07:18:31Z",
              "updatedAt": "2023-06-13T07:24:03Z"
            },
            {
              "originalPosition": 186,
              "body": "```suggestion\r\nThe recipient of the JWT VC MUST process and verify a JWT or SD-JWT VC as\r\n```",
              "createdAt": "2023-06-13T07:19:05Z",
              "updatedAt": "2023-06-13T07:24:03Z"
            },
            {
              "originalPosition": 195,
              "body": "```suggestion\r\n 1. REQUIRED. To process and verify a JWT VC, follow the stepd defined in\r\nSection 7.2 of [@!RFC7519]. To process and verify a SD-JWT VC, follow the steps\r\ndefined in Section 6 of [@!I-D.ietf-oauth-selective-disclosure-jwt]. For the\r\nverification, the `iss` claim in the payload MAY be used to retrieve the public\r\n```",
              "createdAt": "2023-06-13T07:19:22Z",
              "updatedAt": "2023-06-13T07:24:03Z"
            },
            {
              "originalPosition": 202,
              "body": "```suggestion\r\n(#jwt-issuer-metadata)) of the JWT VC or SD-JWT VC Issuer. A Verifier MAY use alternative\r\nmethods to obtain the public key to verify the signature of the JWT VC or SD-JWT VC.\r\n 1. OPTIONAL. If `status` is present in the verified payload,\r\n```",
              "createdAt": "2023-06-13T07:19:44Z",
              "updatedAt": "2023-06-13T07:24:03Z"
            },
            {
              "originalPosition": 220,
              "body": "```suggestion\r\nA presentation of a JWT VC or an SD-JWT VC MAY contain a Holder Binding JWT defined in\r\nSection 5.4.1 of [@!I-D.ietf-oauth-selective-disclosure-jwt].\r\n```",
              "createdAt": "2023-06-13T07:20:06Z",
              "updatedAt": "2023-06-13T07:24:03Z"
            },
            {
              "originalPosition": 260,
              "body": "```suggestion\r\nIf the presentation includes a Holder Binding JWT, the\r\nfollowing claims are used within the Holder Binding JWT in addition to those defined in\r\nSection 5.4.1 of [@!I-D.ietf-oauth-selective-disclosure-jwt]:\r\n```",
              "createdAt": "2023-06-13T07:22:34Z",
              "updatedAt": "2023-06-13T07:24:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5YB9tA",
          "commit": {
            "abbreviatedOid": "be77533"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "I like the direction. I think we still need to find a good way to differentiate between the credential format in general (I prefer JWT VC) and the terms we use when describing details on requirements and processing for the variations, perhaps vc-jwt and vc-sd-jwt (based on the different mediatypes). \r\nI also added some modifications to unchanged parts as I cannot propose changes there in a PR. Please revert if you don't like the suggestions. ",
          "createdAt": "2023-06-13T11:20:50Z",
          "updatedAt": "2023-06-13T11:42:13Z",
          "comments": [
            {
              "originalPosition": 3,
              "body": "I would opt for a simpler name. \r\n```suggestion\r\ntitle = \"JWT Verifiable Credentials\"\r\n```",
              "createdAt": "2023-06-13T11:20:50Z",
              "updatedAt": "2023-06-13T11:42:13Z"
            },
            {
              "originalPosition": 106,
              "body": "```suggestion\r\nThis section defines JOSE header parameters for the JWT VC\r\n```",
              "createdAt": "2023-06-13T11:34:13Z",
              "updatedAt": "2023-06-13T11:42:13Z"
            },
            {
              "originalPosition": 107,
              "body": "```suggestion\r\nand SD-JWT VCs.\r\n```",
              "createdAt": "2023-06-13T11:34:25Z",
              "updatedAt": "2023-06-13T11:42:13Z"
            },
            {
              "originalPosition": 227,
              "body": "```suggestion\r\nSection 7.2 of [@!RFC7519]. If the VC is a SD-JWT VC, follow the steps\r\n```",
              "createdAt": "2023-06-13T11:36:05Z",
              "updatedAt": "2023-06-13T11:42:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5YF-sW",
          "commit": {
            "abbreviatedOid": "ecc9afb"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-13T19:58:45Z",
          "updatedAt": "2023-06-13T19:58:46Z",
          "comments": [
            {
              "originalPosition": 3,
              "body": "```suggestion\r\ntitle = \"JWT-based Verifiable Credentials (JWT VC)\"\r\n```",
              "createdAt": "2023-06-13T19:58:45Z",
              "updatedAt": "2023-06-13T20:01:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5YGAni",
          "commit": {
            "abbreviatedOid": "1fc4b8c"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-13T20:04:23Z",
          "updatedAt": "2023-06-13T20:04:23Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "```suggestion\r\nrules to express Verifiable Credentials based on JWT [@!RFC7519] or SD-JWT [@!I-D.ietf-oauth-selective-disclosure-jwt]\r\n```",
              "createdAt": "2023-06-13T20:04:23Z",
              "updatedAt": "2023-06-13T20:05:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5YGByK",
          "commit": {
            "abbreviatedOid": "e420952"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-13T20:08:07Z",
          "updatedAt": "2023-06-13T20:08:08Z",
          "comments": [
            {
              "originalPosition": 107,
              "body": "```suggestion\r\nand the SD-JWT VC.\r\n```",
              "createdAt": "2023-06-13T20:08:07Z",
              "updatedAt": "2023-06-13T20:08:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5YGCDv",
          "commit": {
            "abbreviatedOid": "e420952"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-13T20:09:01Z",
          "updatedAt": "2023-06-13T20:09:01Z",
          "comments": [
            {
              "originalPosition": 186,
              "body": "```suggestion\r\nThe recipient of the JWT VC MUST process and verify a JWT VC or an SD-JWT VC as\r\n```",
              "createdAt": "2023-06-13T20:09:01Z",
              "updatedAt": "2023-06-13T20:09:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5YJtzW",
          "commit": {
            "abbreviatedOid": "63e121f"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-14T09:25:39Z",
          "updatedAt": "2023-06-14T09:25:39Z",
          "comments": [
            {
              "originalPosition": 123,
              "body": "Should we consider to use the same `typ` header value for both variants, JWT and SD-JWT? I came across this when I was thinking about the OID4VC credential format profile for JWT-based VCs. A single `typ` would also result in a single format identifier in the presentation request, which might everyone's live easier. The only reason to distinguish would be that a dedicated format identifier for sd-jwt would allow the processor to directly decide whether selective disclosure is allowed in the presentation definition. ",
              "createdAt": "2023-06-14T09:25:39Z",
              "updatedAt": "2023-06-14T09:25:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5YOSeM",
          "commit": {
            "abbreviatedOid": "63e121f"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-14T19:16:04Z",
          "updatedAt": "2023-06-14T19:16:04Z",
          "comments": [
            {
              "originalPosition": 43,
              "body": "I suggest to remove this paragraph. It is not required in this draft.",
              "createdAt": "2023-06-14T19:16:04Z",
              "updatedAt": "2023-06-14T19:16:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5YOb4l",
          "commit": {
            "abbreviatedOid": "63e121f"
          },
          "author": "selfissued",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-14T19:44:50Z",
          "updatedAt": "2023-06-14T19:44:50Z",
          "comments": [
            {
              "originalPosition": 123,
              "body": "I'm fine starting with distinct \"typ\" media types, as it provides recipients an indication of whether the VC is a plain JWT or SD-JWT.  We could later decide to make that distinction using \"cty\" if we decide to go in that direction.",
              "createdAt": "2023-06-14T19:44:50Z",
              "updatedAt": "2023-06-14T19:44:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5YOdaD",
          "commit": {
            "abbreviatedOid": "63e121f"
          },
          "author": "selfissued",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "This is taking us in good directions.",
          "createdAt": "2023-06-14T19:49:44Z",
          "updatedAt": "2023-06-14T19:49:44Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5YOmk-",
          "commit": {
            "abbreviatedOid": "63e121f"
          },
          "author": "tplooker",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-14T20:13:47Z",
          "updatedAt": "2023-06-14T20:13:47Z",
          "comments": [
            {
              "originalPosition": 43,
              "body": "Agreed I think we can remove this.",
              "createdAt": "2023-06-14T20:13:47Z",
              "updatedAt": "2023-06-14T20:13:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5YOn14",
          "commit": {
            "abbreviatedOid": "63e121f"
          },
          "author": "tplooker",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "Minor nits on review but in general massive +1 to the direction this takes the draft in",
          "createdAt": "2023-06-14T20:17:46Z",
          "updatedAt": "2023-06-14T20:17:46Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5YPQ5e",
          "commit": {
            "abbreviatedOid": "63e121f"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-14T22:23:32Z",
          "updatedAt": "2023-06-14T22:23:32Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\nipr = \"trust200902\"\r\n```",
              "createdAt": "2023-06-14T22:23:32Z",
              "updatedAt": "2023-06-14T22:23:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5YPT5O",
          "commit": {
            "abbreviatedOid": "be77533"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-14T22:38:33Z",
          "updatedAt": "2023-06-14T22:38:34Z",
          "comments": [
            {
              "originalPosition": 227,
              "body": "i am not a fan of `if a VC is an SD-JWT VC`. SD-JWT VC is a VC.",
              "createdAt": "2023-06-14T22:38:34Z",
              "updatedAt": "2023-06-14T22:38:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5YPUsX",
          "commit": {
            "abbreviatedOid": "63e121f"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-14T22:43:00Z",
          "updatedAt": "2023-06-14T22:43:00Z",
          "comments": [
            {
              "originalPosition": 123,
              "body": "it's not just the presentation request that needs to differentiate whether there is a selective disclosure or not. how would issuer, verifier, wallets indicate that they support only sd-jwt vc in their metadata? processing of sd-jwt vc and jwt vc are different enough to have separate `typ` values.\r\n\r\n@danielfett @bc-pi what do you think?",
              "createdAt": "2023-06-14T22:43:00Z",
              "updatedAt": "2023-06-14T22:43:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5YPVQR",
          "commit": {
            "abbreviatedOid": "4d24052"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-14T22:46:02Z",
          "updatedAt": "2023-06-14T22:46:02Z",
          "comments": [
            {
              "originalPosition": 51,
              "body": "```suggestion\r\n```",
              "createdAt": "2023-06-14T22:46:02Z",
              "updatedAt": "2023-06-14T22:46:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5YPVTN",
          "commit": {
            "abbreviatedOid": "4d24052"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-14T22:46:16Z",
          "updatedAt": "2023-06-14T22:46:16Z",
          "comments": [
            {
              "originalPosition": 49,
              "body": "```suggestion\r\n```",
              "createdAt": "2023-06-14T22:46:16Z",
              "updatedAt": "2023-06-14T22:46:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5YPVcV",
          "commit": {
            "abbreviatedOid": "63e121f"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-14T22:47:11Z",
          "updatedAt": "2023-06-14T22:47:11Z",
          "comments": [
            {
              "originalPosition": 43,
              "body": "removed",
              "createdAt": "2023-06-14T22:47:11Z",
              "updatedAt": "2023-06-14T22:47:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5YPW1Y",
          "commit": {
            "abbreviatedOid": "5381a5a"
          },
          "author": "OR13",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-14T22:54:01Z",
          "updatedAt": "2023-06-14T22:54:01Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5YPYoO",
          "commit": {
            "abbreviatedOid": "5e5124c"
          },
          "author": "mprorock",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "Excellent step in the right direction.  Enough of an improvement I would say to merge then we can build onnit",
          "createdAt": "2023-06-14T23:04:11Z",
          "updatedAt": "2023-06-14T23:04:11Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5YQ0E2",
          "commit": {
            "abbreviatedOid": "5e5124c"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-15T06:44:10Z",
          "updatedAt": "2023-06-15T06:44:10Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5YQ0kA",
          "commit": {
            "abbreviatedOid": "be77533"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-15T06:45:41Z",
          "updatedAt": "2023-06-15T06:45:42Z",
          "comments": [
            {
              "originalPosition": 227,
              "body": "but not every VC is a SD-JWT",
              "createdAt": "2023-06-15T06:45:41Z",
              "updatedAt": "2023-06-15T06:45:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5YQ1Nt",
          "commit": {
            "abbreviatedOid": "63e121f"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-15T06:47:39Z",
          "updatedAt": "2023-06-15T06:47:39Z",
          "comments": [
            {
              "originalPosition": 123,
              "body": "create an issue",
              "createdAt": "2023-06-15T06:47:39Z",
              "updatedAt": "2023-06-15T06:47:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5YVub1",
          "commit": {
            "abbreviatedOid": "63e121f"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-15T17:29:16Z",
          "updatedAt": "2023-06-15T17:29:16Z",
          "comments": [
            {
              "originalPosition": 123,
              "body": "I can't help but wonder if it'd make sense to have the spec be only about SD-JWT VCs and treat the plain JWT VC as just a special case of an SD-JWT with no selectively disclosable claims. ",
              "createdAt": "2023-06-15T17:29:16Z",
              "updatedAt": "2023-06-15T17:29:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5YV7FM",
          "commit": {
            "abbreviatedOid": "63e121f"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-15T18:05:58Z",
          "updatedAt": "2023-06-15T18:05:58Z",
          "comments": [
            {
              "originalPosition": 123,
              "body": "that's what @tlodderstedt has suggested, too. would that change the structure in this PR quite a lot? since the text will be all about sd-jwt vc and there will be one section saying that to do sd-jwt vc, one only need to not use `_sd` and no disclosures?",
              "createdAt": "2023-06-15T18:05:58Z",
              "updatedAt": "2023-06-15T18:05:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5YV7RV",
          "commit": {
            "abbreviatedOid": "5e5124c"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-15T18:06:32Z",
          "updatedAt": "2023-06-15T18:06:32Z",
          "comments": [
            {
              "originalPosition": 231,
              "body": "```suggestion\r\nThe recipient of the JWT-based VC MUST process and verify a JWT VC or an SD-JWT VC as\r\n```",
              "createdAt": "2023-06-15T18:06:32Z",
              "updatedAt": "2023-06-15T18:06:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5YV9Mq",
          "commit": {
            "abbreviatedOid": "5e5124c"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-15T18:12:29Z",
          "updatedAt": "2023-06-15T18:12:30Z",
          "comments": [
            {
              "originalPosition": 382,
              "body": "```suggestion\r\nWe would like to thank Alen Horvat, Andres Uribe, Brian Campbell, Christian Bormann,\r\n```\r\nis this poor etiquette?  \ud83e\udd23 ",
              "createdAt": "2023-06-15T18:12:29Z",
              "updatedAt": "2023-06-15T18:12:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5YWB_a",
          "commit": {
            "abbreviatedOid": "5e5124c"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-15T18:26:13Z",
          "updatedAt": "2023-06-15T18:26:13Z",
          "comments": [
            {
              "originalPosition": 237,
              "body": "```suggestion\r\n 1. REQUIRED. To process and verify a JWT VC, follow the steps defined in\r\n```",
              "createdAt": "2023-06-15T18:26:13Z",
              "updatedAt": "2023-06-15T18:26:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5YWMVC",
          "commit": {
            "abbreviatedOid": "63e121f"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-15T18:57:26Z",
          "updatedAt": "2023-06-15T18:57:27Z",
          "comments": [
            {
              "originalPosition": 123,
              "body": "Yeah, I think it would change this PR quite a lot. Or a new one... Sorry!* I'm honestly not 100% sure about the idea but my intuition is that it would be a cleaner/better/simpler approach. \r\n\r\n\\* I did mention \"Isn't a JWT VC just a SD-JWT VC without any selectively disclosable claims... ?\" last week in some slack conversation though so this shouldn't be a total surprise. ",
              "createdAt": "2023-06-15T18:57:27Z",
              "updatedAt": "2023-06-15T18:57:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5YX4v7",
          "commit": {
            "abbreviatedOid": "5e5124c"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-16T03:15:33Z",
          "updatedAt": "2023-06-16T03:15:33Z",
          "comments": [
            {
              "originalPosition": 382,
              "body": "nah, perfect.",
              "createdAt": "2023-06-16T03:15:33Z",
              "updatedAt": "2023-06-16T03:15:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5Yg2NW",
          "commit": {
            "abbreviatedOid": "be77533"
          },
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-18T08:05:52Z",
          "updatedAt": "2023-06-18T08:05:53Z",
          "comments": [
            {
              "originalPosition": 227,
              "body": "Actually every VC (JSON or JSON-LD) can be protected with SD-JWT\r\nsame as every JSON or JSON-LD can be protected with JWS",
              "createdAt": "2023-06-18T08:05:53Z",
              "updatedAt": "2023-06-18T08:05:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5Yg2jF",
          "commit": {
            "abbreviatedOid": "d852bcc"
          },
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-18T08:15:03Z",
          "updatedAt": "2023-06-18T08:15:04Z",
          "comments": [
            {
              "originalPosition": 62,
              "body": "Note that JWT sets all claims as optional.",
              "createdAt": "2023-06-18T08:15:03Z",
              "updatedAt": "2023-06-18T08:15:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5Yg2vZ",
          "commit": {
            "abbreviatedOid": "d852bcc"
          },
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-18T08:17:57Z",
          "updatedAt": "2023-06-18T08:17:57Z",
          "comments": [
            {
              "originalPosition": 65,
              "body": "Should this be improved:\r\n\r\nThis specification defines how Verifiable Credentials can be expressed using JWT claim set and protected with JWS or SD-JWT?\r\n\r\n(\r\nnote that if convergence between JWS and SD-JWT is achieved it could be even something like:\r\n\r\nThis specification defines how Verifiable Credentials can be expressed using JWT claim set and protected using JWS. The specification also defines how Selective Disclosure (SD-JWT) can be applied.\r\n)",
              "createdAt": "2023-06-18T08:17:57Z",
              "updatedAt": "2023-06-18T08:17:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5Yg3Rh",
          "commit": {
            "abbreviatedOid": "d852bcc"
          },
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-18T08:27:49Z",
          "updatedAt": "2023-06-18T08:27:50Z",
          "comments": [
            {
              "originalPosition": 76,
              "body": "Should we acknowledge that JWT limits the JWS to compact serialised and that SD-JWT supports both serialisations?",
              "createdAt": "2023-06-18T08:27:49Z",
              "updatedAt": "2023-06-18T08:27:50Z"
            }
          ]
        }
      ]
    },
    {
      "number": 122,
      "id": "PR_kwDOJbVClc5S4Gj8",
      "title": "update text on status provider",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/122",
      "state": "MERGED",
      "author": "c2bo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Status Provider should be either 4th party or issuer (not verifier).",
      "createdAt": "2023-06-13T11:43:35Z",
      "updatedAt": "2023-06-21T13:47:30Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "588ea557ea5861784bbaf7051eddefdeb6d0751f",
      "headRepository": "c2bo/draft-terbu-sd-jwt-vc",
      "headRefName": "status-provider",
      "headRefOid": "41a80cf7c87703d8b5dd5b0f43c6f9e9703df566",
      "closedAt": "2023-06-21T13:47:29Z",
      "mergedAt": "2023-06-21T13:47:29Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "85d396fe5e5a690da72fe8b3109af58b56399d43"
      },
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Merging this since multiple approvals.",
          "createdAt": "2023-06-21T13:47:26Z",
          "updatedAt": "2023-06-21T13:47:26Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5YCnYW",
          "commit": {
            "abbreviatedOid": "41a80cf"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-13T12:44:01Z",
          "updatedAt": "2023-06-13T12:44:01Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5YC2KY",
          "commit": {
            "abbreviatedOid": "41a80cf"
          },
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-13T13:11:30Z",
          "updatedAt": "2023-06-13T13:11:30Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5YHub5",
          "commit": {
            "abbreviatedOid": "41a80cf"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-14T03:44:18Z",
          "updatedAt": "2023-06-14T03:44:18Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5YPP8F",
          "commit": {
            "abbreviatedOid": "41a80cf"
          },
          "author": "tplooker",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-14T22:19:08Z",
          "updatedAt": "2023-06-14T22:19:08Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5Yfis6",
          "commit": {
            "abbreviatedOid": "41a80cf"
          },
          "author": "OR13",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-17T03:59:31Z",
          "updatedAt": "2023-06-17T03:59:31Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5Ym7sJ",
          "commit": {
            "abbreviatedOid": "41a80cf"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-19T17:13:15Z",
          "updatedAt": "2023-06-19T17:13:15Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5Y2568",
          "commit": {
            "abbreviatedOid": "41a80cf"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "lgtm, thank you!",
          "createdAt": "2023-06-21T13:46:59Z",
          "updatedAt": "2023-06-21T13:46:59Z",
          "comments": []
        }
      ]
    },
    {
      "number": 123,
      "id": "PR_kwDOJbVClc5S4Kvo",
      "title": "remove URI requirement on sub claim",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/123",
      "state": "MERGED",
      "author": "tlodderstedt",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I don't think there is a need to constraint the `sub` claim value to be a URI. ",
      "createdAt": "2023-06-13T11:55:35Z",
      "updatedAt": "2023-06-17T04:37:48Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "588ea557ea5861784bbaf7051eddefdeb6d0751f",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "subasuri",
      "headRefOid": "264a080444d82a2dd856d4b8d1bbc97026bd9e8d",
      "closedAt": "2023-06-17T04:37:48Z",
      "mergedAt": "2023-06-17T04:37:48Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "9119083958ea6f636927df22c9a5769400558f3f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5YF7Pd",
          "commit": {
            "abbreviatedOid": "264a080"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-13T19:48:26Z",
          "updatedAt": "2023-06-13T19:48:26Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5YPPyi",
          "commit": {
            "abbreviatedOid": "264a080"
          },
          "author": "tplooker",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-14T22:18:30Z",
          "updatedAt": "2023-06-14T22:18:30Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5YaQhP",
          "commit": {
            "abbreviatedOid": "264a080"
          },
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-16T11:41:02Z",
          "updatedAt": "2023-06-16T11:41:02Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5Yb7_F",
          "commit": {
            "abbreviatedOid": "264a080"
          },
          "author": "c2bo",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-16T15:02:11Z",
          "updatedAt": "2023-06-16T15:02:11Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5YfizO",
          "commit": {
            "abbreviatedOid": "264a080"
          },
          "author": "OR13",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-17T04:03:21Z",
          "updatedAt": "2023-06-17T04:03:21Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5YfkAT",
          "commit": {
            "abbreviatedOid": "264a080"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-17T04:27:09Z",
          "updatedAt": "2023-06-17T04:27:09Z",
          "comments": []
        }
      ]
    },
    {
      "number": 124,
      "id": "PR_kwDOJbVClc5S4MFq",
      "title": "aligned draft name with IETF rules",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/124",
      "state": "MERGED",
      "author": "tlodderstedt",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-06-13T11:59:08Z",
      "updatedAt": "2023-06-22T09:22:06Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "85d396fe5e5a690da72fe8b3109af58b56399d43",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "draft-name",
      "headRefOid": "4114bf665dd8a36b5eeef73655d8c820ebec06f5",
      "closedAt": "2023-06-22T09:22:05Z",
      "mergedAt": "2023-06-22T09:22:05Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "5a00d34f8694a9be39f84793bb0e02919080462b"
      },
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Merging this since this is an improvement and PR #120 might not be merged as is.",
          "createdAt": "2023-06-21T13:54:43Z",
          "updatedAt": "2023-06-21T13:54:43Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "@tlodderstedt can you pls resolve merge conflicts, then we can merge this PR.",
          "createdAt": "2023-06-21T15:39:49Z",
          "updatedAt": "2023-06-21T15:39:49Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Merging PR since a lot of approvals.",
          "createdAt": "2023-06-22T09:22:05Z",
          "updatedAt": "2023-06-22T09:22:05Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5YF7EO",
          "commit": {
            "abbreviatedOid": "9cb4eed"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-13T19:47:53Z",
          "updatedAt": "2023-06-13T19:47:53Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5YF7Kc",
          "commit": {
            "abbreviatedOid": "9cb4eed"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-13T19:48:11Z",
          "updatedAt": "2023-06-13T19:48:11Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5YPYgk",
          "commit": {
            "abbreviatedOid": "9cb4eed"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "overtaken by PR #120, which also renamed the draft. let's close this one.",
          "createdAt": "2023-06-14T23:03:36Z",
          "updatedAt": "2023-06-14T23:03:36Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5Yfi0v",
          "commit": {
            "abbreviatedOid": "9cb4eed"
          },
          "author": "OR13",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-17T04:03:52Z",
          "updatedAt": "2023-06-17T04:03:52Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5Y2-Zw",
          "commit": {
            "abbreviatedOid": "9cb4eed"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "lgtm, since we have merged PR #131 and might not merge PR #120, we should merge this.",
          "createdAt": "2023-06-21T13:54:00Z",
          "updatedAt": "2023-06-21T13:54:00Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5Y4E9W",
          "commit": {
            "abbreviatedOid": "9cb4eed"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-21T15:36:53Z",
          "updatedAt": "2023-06-21T15:36:53Z",
          "comments": []
        }
      ]
    },
    {
      "number": 126,
      "id": "PR_kwDOJbVClc5S54Ji",
      "title": "Change Holder Binding to Key Binding, adapt examples",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/126",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Holder Binding is now more appropriately called Key Binding in SD-JWT. This PR makes the necessary changes in this specification.",
      "createdAt": "2023-06-13T15:52:18Z",
      "updatedAt": "2023-06-22T09:24:45Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "5a00d34f8694a9be39f84793bb0e02919080462b",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "danielfett/fix-examples",
      "headRefOid": "06e7a0b6793463c5c24244ab99e47f61bf168d81",
      "closedAt": "2023-06-22T09:24:44Z",
      "mergedAt": "2023-06-22T09:24:44Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "80ba41ef10e659ffd84bf06f6a3edbf023ce1dc0"
      },
      "comments": [
        {
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "body": "Would it be intresting to add a holder binding section that references to the options of\r\n- claim based binding with PII (name, birthday etc)\r\n- claim based binding with biometrics (porttrait)\r\n- key binding (referencing to this part here)\r\n?",
          "createdAt": "2023-06-16T11:38:31Z",
          "updatedAt": "2023-06-16T11:38:31Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "my current thinking is that key binding, biometrics based binding and claim based binding solve very different problems, so I would not mix them.",
          "createdAt": "2023-06-16T19:56:24Z",
          "updatedAt": "2023-06-16T19:56:24Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "@danielfett can you resolve merge conflicts, then pls merge since we have multiple approvals.",
          "createdAt": "2023-06-21T13:57:23Z",
          "updatedAt": "2023-06-21T13:57:36Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5YHukR",
          "commit": {
            "abbreviatedOid": "b1f0b4a"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "`cryptographic key binding` -> `key binding`?",
          "createdAt": "2023-06-14T03:45:05Z",
          "updatedAt": "2023-06-14T03:45:05Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5YaOcN",
          "commit": {
            "abbreviatedOid": "b1f0b4a"
          },
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-16T11:36:03Z",
          "updatedAt": "2023-06-16T11:36:03Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5Yfi3X",
          "commit": {
            "abbreviatedOid": "b1f0b4a"
          },
          "author": "OR13",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-17T04:04:07Z",
          "updatedAt": "2023-06-17T04:04:08Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5Ym-hV",
          "commit": {
            "abbreviatedOid": "b1f0b4a"
          },
          "author": "c2bo",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-19T17:26:29Z",
          "updatedAt": "2023-06-19T17:26:29Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5Y3AFv",
          "commit": {
            "abbreviatedOid": "b1f0b4a"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks for the updates!",
          "createdAt": "2023-06-21T13:56:43Z",
          "updatedAt": "2023-06-21T13:56:43Z",
          "comments": []
        }
      ]
    },
    {
      "number": 131,
      "id": "PR_kwDOJbVClc5TJ8NG",
      "title": "first pass at positioning jwt vc as an sd-jwt vc without selectively disclosable claims",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/131",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "alternative to #120 based on @bc-pi 's comment \"I can't help but wonder if it'd make sense to have the spec be only about SD-JWT VCs and treat the plain JWT VC as just a special case of an SD-JWT with no selectively disclosable claims.\"\r\n\r\nno changes to the basic structure. simple clarifications what to do when there are no selectively disclosable claims ie no `_sd` claim and no Disclosures. Might need some more details but this is how it might look like.\r\n\r\n(cc @OR13, @mprorock)\r\n\r\n[linked to rendered preview](https://vcstuff.github.io/draft-terbu-sd-jwt-vc/jwt-vc-2/draft-terbu-sd-jwt-vc.html\r\n)",
      "createdAt": "2023-06-16T05:46:35Z",
      "updatedAt": "2023-09-09T01:05:44Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "9119083958ea6f636927df22c9a5769400558f3f",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "jwt-vc-2",
      "headRefOid": "8066e23e44786c29e43c853d3c3506803c4ce872",
      "closedAt": "2023-06-21T12:53:44Z",
      "mergedAt": "2023-06-21T12:53:44Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "caa0482b4a3e9cf92c0c3c8bbc9a65fc1bb409b8"
      },
      "comments": [
        {
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "body": "Generally, I really like this approach!\r\nSome examples could be useful for key binding with JWT (no disclosures)",
          "createdAt": "2023-06-16T11:42:35Z",
          "updatedAt": "2023-06-16T11:42:35Z"
        },
        {
          "author": "OR13",
          "authorAssociation": "COLLABORATOR",
          "body": "I'd expect the typ for both to have +jwt if that were really the case.\n\nThere is another draft up for multiple suffixes.\n\nhttps://www.ietf.org/archive/id/draft-ietf-mediaman-suffixes-04.html\n\nIs it simple enough to support now?",
          "createdAt": "2023-06-16T12:34:55Z",
          "updatedAt": "2023-06-16T12:34:55Z"
        },
        {
          "author": "mprorock",
          "authorAssociation": "NONE",
          "body": "should this be titled `draft-terbu-oauth-vc-jwt` ?\r\nI think this should be changed as well as the title before merging to make sure we are calling out that this covering SD-JWTs and JWTs",
          "createdAt": "2023-06-16T19:18:56Z",
          "updatedAt": "2023-06-16T19:27:04Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes. Will make a change once we have a decision whether PR #120 or this one is the way to go\u2026",
          "createdAt": "2023-06-16T19:24:49Z",
          "updatedAt": "2023-06-16T19:24:49Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "What is the position of this specification?\r\nFrom my understanding\r\n- it defines a VC with JWT claims\r\n- it defines a profile for the JWT claims\r\n- it defines a profile for securing the VC\r\n\r\nThere's an open discussion between the sd-jwt and JWS protection. Relevant discussion has been started https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/291 - sd-jwt introduces an encoding that becomes incompatible with JWS in the limit where selective disclosure is not used. In other words, it introduces a first-order phase transition. Let's see how this topic resolves.\r\n\r\nIMO, the data model and securing mechanisms should support both sd-jwt and JWS.",
          "createdAt": "2023-06-18T08:00:14Z",
          "updatedAt": "2023-06-18T08:00:14Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I do like this approach, but I am a bit concerned that even in the 'no disclosures' case, we'll have the trailing tilde in the issuance and presentation (when no KB is present). A JWT is *not* a special case of an SD-JWT for this reason.",
          "createdAt": "2023-06-19T17:11:49Z",
          "updatedAt": "2023-06-19T17:11:49Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "> I do like this approach, but I am a bit concerned that even in the 'no disclosures' case, we'll have the trailing tilde in the issuance and presentation (when no KB is present). A JWT is _not_ a special case of an SD-JWT for this reason.\r\n\r\nI agree with the concern.",
          "createdAt": "2023-06-19T17:23:08Z",
          "updatedAt": "2023-06-19T17:23:08Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> I do like this approach, but I am a bit concerned that even in the 'no disclosures' case, we'll have the trailing tilde in the issuance and presentation (when no KB is present). A JWT is _not_ a special case of an SD-JWT for this reason.\r\n\r\nIMHO keeping the trailing tilde is preferable as it keeps the model consistent. ",
          "createdAt": "2023-06-19T18:56:08Z",
          "updatedAt": "2023-06-19T18:56:08Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "from what I am sensing, there seems to be a lot of preference towards the approach in this PR over #120, partially because it is simpler and gives one credential format and not two (consolidation, yay!), with one major discussion point being a ~ after a JWT VC when it is issued.\r\n\r\na bit of the context... this trailing ~ is the result of the decision being taken in SD-JWT spec to better align the issuance and presentation formats, (https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/293 does it, and it has not been merged yet). One option is to keep issuance and presentation formats separate in SD-JWT (as-is) so that there is no ~ when (SD-)JWT VC is issued. but that is not that clean from a pure SD-JWT processing perspective is I think the opinion of its authors (@danielfett, @bc-pi).\r\n\r\nso the question is really what to do with a trailing ~ when there is no SD in SD-JWT based VC.",
          "createdAt": "2023-06-20T04:16:18Z",
          "updatedAt": "2023-06-20T04:16:18Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "should be good to merge once @awoie takes a look and approves",
          "createdAt": "2023-06-20T22:42:35Z",
          "updatedAt": "2023-06-20T22:42:35Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm ok with this direction. I personally don't like the trailing tilde but we can fix that in another PR. I'll open an issue in the repository.",
          "createdAt": "2023-06-21T12:51:46Z",
          "updatedAt": "2023-06-21T12:51:46Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Merging this PR since a lot of approvals and no objections.",
          "createdAt": "2023-06-21T12:53:33Z",
          "updatedAt": "2023-06-21T12:53:33Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5YYYos",
          "commit": {
            "abbreviatedOid": "2ac2b2f"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2023-06-16T06:18:02Z",
          "updatedAt": "2023-06-16T06:49:54Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "why do we even need to change this?",
              "createdAt": "2023-06-16T06:18:02Z",
              "updatedAt": "2023-06-16T06:49:55Z"
            },
            {
              "originalPosition": 38,
              "body": "```suggestion\r\ntheir semantics. SD-JWT can also be used when there are no selectively disclosable claims.\r\n```",
              "createdAt": "2023-06-16T06:18:46Z",
              "updatedAt": "2023-06-16T06:49:55Z"
            },
            {
              "originalPosition": 40,
              "body": "```suggestion\r\ncan be expressed using SD-JWT with and without selective disclosure.\r\n```",
              "createdAt": "2023-06-16T06:19:27Z",
              "updatedAt": "2023-06-16T06:49:55Z"
            },
            {
              "originalPosition": 71,
              "body": "out of curiosity - the change to align issuance and presentation format would lead to the fact that non sd VCs would be JWTs + a `~`, right? ",
              "createdAt": "2023-06-16T06:21:14Z",
              "updatedAt": "2023-06-16T06:49:55Z"
            },
            {
              "originalPosition": 36,
              "body": "suggest to reorganize this paragraph \r\nMove 2nd and 3rd sentence to previous paragraph forward (all related to sd and non sd). Modify 3rd sentence.\r\n\r\n\"This specification therefore defines how Verifiable Credentials\r\ncan be expressed using SD-JWT covering both options, with and without selective disclosure.\"\r\n\r\n1st sentence fits better with the last paragraph as this is about the content. Suggest to add the following sentence between this sentence and the rest: \r\n\"SD-JWT VC defines a content model based on JWT claims.\"",
              "createdAt": "2023-06-16T06:27:16Z",
              "updatedAt": "2023-06-16T06:49:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5YZ-IG",
          "commit": {
            "abbreviatedOid": "2ac2b2f"
          },
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-16T10:46:32Z",
          "updatedAt": "2023-06-16T10:46:33Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "while this might be technically correct, I agree it might be confusing to first time readers. Either reverse to:\r\n\"based on the SD-JWT (Selective Disclosure for JWT and JWS with JSON payloads) format\"\r\nor leave it as is, as the full title is gehind the reference",
              "createdAt": "2023-06-16T10:46:32Z",
              "updatedAt": "2023-06-16T10:46:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5YaAzh",
          "commit": {
            "abbreviatedOid": "2ac2b2f"
          },
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-16T10:54:38Z",
          "updatedAt": "2023-06-16T10:54:39Z",
          "comments": [
            {
              "originalPosition": 71,
              "body": "```suggestion\r\nIn that case, the SD-JWT VC MUST NOT contain the `_sd` claim in the JWT body and\r\nMUST NOT have any Disclosures.\r\n```",
              "createdAt": "2023-06-16T10:54:38Z",
              "updatedAt": "2023-06-16T10:54:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5YaBMr",
          "commit": {
            "abbreviatedOid": "2ac2b2f"
          },
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-16T10:55:54Z",
          "updatedAt": "2023-06-16T10:55:54Z",
          "comments": [
            {
              "originalPosition": 71,
              "body": "I guess so, also key binding would be very easy as it is still being appended after ~ in presentation?",
              "createdAt": "2023-06-16T10:55:54Z",
              "updatedAt": "2023-06-16T10:55:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5YaBs7",
          "commit": {
            "abbreviatedOid": "2ac2b2f"
          },
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-16T10:57:25Z",
          "updatedAt": "2023-06-16T10:57:26Z",
          "comments": [
            {
              "originalPosition": 81,
              "body": "```suggestion\r\nIf there are no selectively disclosable claims, there is no need to process the\r\n`_sd` claim nor any Disclosures.\r\n```",
              "createdAt": "2023-06-16T10:57:26Z",
              "updatedAt": "2023-06-16T10:57:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5YaBzs",
          "commit": {
            "abbreviatedOid": "2ac2b2f"
          },
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-16T10:57:46Z",
          "updatedAt": "2023-06-16T10:57:46Z",
          "comments": [
            {
              "originalPosition": 90,
              "body": "```suggestion\r\nWhen there are no selectively disclosable claims, a presentation of SD-JWT VC\r\ndoes not contain any Disclosures.\r\n```",
              "createdAt": "2023-06-16T10:57:46Z",
              "updatedAt": "2023-06-16T10:57:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5YaCq6",
          "commit": {
            "abbreviatedOid": "2ac2b2f"
          },
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-16T11:00:27Z",
          "updatedAt": "2023-06-16T11:00:27Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "I actually like this section as it gives rationale for the issuer-holder-verifier model",
              "createdAt": "2023-06-16T11:00:27Z",
              "updatedAt": "2023-06-16T11:00:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5YaDKY",
          "commit": {
            "abbreviatedOid": "2ac2b2f"
          },
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-16T11:01:55Z",
          "updatedAt": "2023-06-16T11:01:55Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "I agree, when the section above is removed, the paragraphs don't really fit together nicely",
              "createdAt": "2023-06-16T11:01:55Z",
              "updatedAt": "2023-06-16T11:01:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5YbbZi",
          "commit": {
            "abbreviatedOid": "72d7a7e"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-16T14:04:10Z",
          "updatedAt": "2023-06-16T14:04:10Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nrules to express Verifiable Credentials with JSON payloads based on the Selective Disclosure\r\n```",
              "createdAt": "2023-06-16T14:04:10Z",
              "updatedAt": "2023-06-16T14:04:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5YbbhY",
          "commit": {
            "abbreviatedOid": "72d7a7e"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-16T14:04:27Z",
          "updatedAt": "2023-06-16T14:04:28Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\nfor JWT (SD-JWT) format [@!I-D.ietf-oauth-selective-disclosure-jwt].\r\n```",
              "createdAt": "2023-06-16T14:04:27Z",
              "updatedAt": "2023-06-16T14:04:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5Ybb65",
          "commit": {
            "abbreviatedOid": "72d7a7e"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-16T14:05:12Z",
          "updatedAt": "2023-06-16T14:05:13Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\n```",
              "createdAt": "2023-06-16T14:05:12Z",
              "updatedAt": "2023-06-16T14:05:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5YbcnB",
          "commit": {
            "abbreviatedOid": "72d7a7e"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-16T14:06:00Z",
          "updatedAt": "2023-06-16T14:06:00Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "I think this section distracts from the real topic. ",
              "createdAt": "2023-06-16T14:06:00Z",
              "updatedAt": "2023-06-16T14:06:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5Yc2Hh",
          "commit": {
            "abbreviatedOid": "72d7a7e"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-16T16:56:46Z",
          "updatedAt": "2023-06-16T16:56:47Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "because I think acronyms should be expanded when used the first time. we are deep in the details, but many do not know what SD-JWT is when they see it for the first time. and we should not assume that anyone reading this already knows what SD-JWT is.",
              "createdAt": "2023-06-16T16:56:46Z",
              "updatedAt": "2023-06-16T16:56:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5Yc2l_",
          "commit": {
            "abbreviatedOid": "72d7a7e"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-16T16:57:52Z",
          "updatedAt": "2023-06-16T16:57:52Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "why? I think SD/no SD needs to be highlighted in the intro. I am pretty sure we will keep getting questions if this spec supports no disclosure too if we don't put it crystal clear.",
              "createdAt": "2023-06-16T16:57:52Z",
              "updatedAt": "2023-06-16T16:57:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5Yc3oD",
          "commit": {
            "abbreviatedOid": "72d7a7e"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-16T16:59:35Z",
          "updatedAt": "2023-06-16T16:59:35Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "if this document talks about credentials without selective disclosure, it is contradictory to also have a text that explains why selective disclosure is necessary for three-party-model..",
              "createdAt": "2023-06-16T16:59:35Z",
              "updatedAt": "2023-06-16T16:59:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5Yc4C7",
          "commit": {
            "abbreviatedOid": "72d7a7e"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-16T17:00:50Z",
          "updatedAt": "2023-06-16T17:00:50Z",
          "comments": [
            {
              "originalPosition": 71,
              "body": "```suggestion\r\nIn that case, the SD-JWT VC MUST NOT contain the `_sd` claim in the JWT body. I also\r\nMUST NOT have any Disclosures.\r\n```",
              "createdAt": "2023-06-16T17:00:50Z",
              "updatedAt": "2023-06-16T17:00:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5Yc4Xc",
          "commit": {
            "abbreviatedOid": "72d7a7e"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-16T17:01:15Z",
          "updatedAt": "2023-06-16T17:01:15Z",
          "comments": [
            {
              "originalPosition": 71,
              "body": "I prefer avoiding two normative requirements (MUST NOTs) in the same sentence.",
              "createdAt": "2023-06-16T17:01:15Z",
              "updatedAt": "2023-06-16T17:01:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5Yc6fx",
          "commit": {
            "abbreviatedOid": "2ac2b2f"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-16T17:06:36Z",
          "updatedAt": "2023-06-16T17:06:37Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "thanks - I think it reads better now.",
              "createdAt": "2023-06-16T17:06:36Z",
              "updatedAt": "2023-06-16T17:06:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5Yc7Uj",
          "commit": {
            "abbreviatedOid": "2ac2b2f"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-16T17:09:17Z",
          "updatedAt": "2023-06-16T17:09:17Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "outdated with torsten's commit.",
              "createdAt": "2023-06-16T17:09:17Z",
              "updatedAt": "2023-06-16T17:09:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5Yc7aR",
          "commit": {
            "abbreviatedOid": "2ac2b2f"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-16T17:09:35Z",
          "updatedAt": "2023-06-16T17:09:35Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "outdated with torsten's commit.",
              "createdAt": "2023-06-16T17:09:35Z",
              "updatedAt": "2023-06-16T17:09:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5Yc74B",
          "commit": {
            "abbreviatedOid": "2ac2b2f"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-16T17:10:41Z",
          "updatedAt": "2023-06-16T17:10:41Z",
          "comments": [
            {
              "originalPosition": 71,
              "body": "aaa that is an important question. It is a little counter intuitive, but if sd-jwt is the basis of jwt vcs ending with Tilde will be more natural and will be a nice differentiator between normal jwts and jwt vcs..?",
              "createdAt": "2023-06-16T17:10:41Z",
              "updatedAt": "2023-06-16T17:10:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5YdIOP",
          "commit": {
            "abbreviatedOid": "f3a04a7"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-16T17:42:48Z",
          "updatedAt": "2023-06-16T17:42:49Z",
          "comments": [
            {
              "originalPosition": 89,
              "body": "```suggestion\r\nIn that case, the SD-JWT VC MUST NOT contain the `_sd` claim in the JWT body. It also\r\n```",
              "createdAt": "2023-06-16T17:42:49Z",
              "updatedAt": "2023-06-16T17:42:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5Yfi6b",
          "commit": {
            "abbreviatedOid": "f3a04a7"
          },
          "author": "OR13",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-17T04:04:58Z",
          "updatedAt": "2023-06-17T04:04:58Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5Yg1By",
          "commit": {
            "abbreviatedOid": "2ac2b2f"
          },
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-18T07:52:02Z",
          "updatedAt": "2023-06-18T07:52:02Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "I guess this should be aligned with: https://github.com/vcstuff/draft-terbu-sd-jwt-vc/pull/132",
              "createdAt": "2023-06-18T07:52:02Z",
              "updatedAt": "2023-06-18T07:52:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5Yg17B",
          "commit": {
            "abbreviatedOid": "72d7a7e"
          },
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-18T08:02:40Z",
          "updatedAt": "2023-06-18T08:02:40Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "I agree that the supported securing mechanisms should be explicit.\r\n\r\nShould the specification define which claims can be hidden and which not when SD is applied? e.g., iss, exp, nbf, cnf is probably conditional.",
              "createdAt": "2023-06-18T08:02:40Z",
              "updatedAt": "2023-06-18T08:02:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5Yg-wJ",
          "commit": {
            "abbreviatedOid": "f3a04a7"
          },
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-18T10:33:22Z",
          "updatedAt": "2023-06-18T10:33:22Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "This is already the case.\n> If present, the following registered JWT claims MUST be included in the SD-JWT and MUST NOT be included in the Disclosures, i.e. cannot be selectively disclosed:",
              "createdAt": "2023-06-18T10:33:22Z",
              "updatedAt": "2023-06-18T10:33:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5Ym452",
          "commit": {
            "abbreviatedOid": "f3a04a7"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-19T17:03:39Z",
          "updatedAt": "2023-06-19T17:03:39Z",
          "comments": [
            {
              "originalPosition": 88,
              "body": "```suggestion\r\nAn SD-JWT VC MAY have no selectively disclosable claims.\r\n```",
              "createdAt": "2023-06-19T17:03:39Z",
              "updatedAt": "2023-06-19T17:03:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5Ym5eB",
          "commit": {
            "abbreviatedOid": "f3a04a7"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-19T17:05:56Z",
          "updatedAt": "2023-06-19T17:05:56Z",
          "comments": [
            {
              "originalPosition": 125,
              "body": "```suggestion\r\nWe would like to thank\r\nAlen Horvat,\r\nAndres Uribe,\r\nBrian Campbell,\r\nChristian Bormann,\r\nGiuseppe De Marco,\r\nMichael Jones,\r\nMike Prorock,\r\nOrie Steele,\r\nPaul Bastian,\r\nTorsten Lodderstedt,\r\nTobias Looker, and\r\nKristina Yasuda\r\nfor their contributions (some of which substantial) to this draft and to the initial set of implementations.\r\n```",
              "createdAt": "2023-06-19T17:05:56Z",
              "updatedAt": "2023-06-19T17:05:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5Ym5x4",
          "commit": {
            "abbreviatedOid": "f3a04a7"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-19T17:07:13Z",
          "updatedAt": "2023-06-19T17:07:13Z",
          "comments": [
            {
              "originalPosition": 90,
              "body": "```suggestion\r\nMUST NOT have any Disclosures. For issuance, the trailing `~` MUST BE omitted from the SD-JWT.\r\nFor presentation the trailing `~` MUST BE omitted unless a Key Binding JWT is present.\r\n```",
              "createdAt": "2023-06-19T17:07:13Z",
              "updatedAt": "2023-06-19T17:07:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5Ym56v",
          "commit": {
            "abbreviatedOid": "f3a04a7"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-19T17:07:45Z",
          "updatedAt": "2023-06-19T17:07:45Z",
          "comments": [
            {
              "originalPosition": 86,
              "body": "```suggestion\r\n#### SD-JWT VC without Selectively Disclosable Claims\r\n```",
              "createdAt": "2023-06-19T17:07:45Z",
              "updatedAt": "2023-06-19T17:07:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5YnqBO",
          "commit": {
            "abbreviatedOid": "f3a04a7"
          },
          "author": "selfissued",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-19T19:29:20Z",
          "updatedAt": "2023-06-19T19:29:21Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "I agree that the \"with JSON payloads\" wording is clunky and should go.  All JWTs have JSON payloads, so we don't need to say so in the title.",
              "createdAt": "2023-06-19T19:29:21Z",
              "updatedAt": "2023-06-19T19:29:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5Ynt5K",
          "commit": {
            "abbreviatedOid": "f3a04a7"
          },
          "author": "selfissued",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-19T19:33:29Z",
          "updatedAt": "2023-06-19T19:33:30Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Also, see https://github.com/vcstuff/draft-terbu-sd-jwt-vc/pull/132, which requests a parallel change to the title.",
              "createdAt": "2023-06-19T19:33:29Z",
              "updatedAt": "2023-06-19T19:33:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5Yn7aQ",
          "commit": {
            "abbreviatedOid": "f3a04a7"
          },
          "author": "selfissued",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "I prefer https://github.com/vcstuff/draft-terbu-sd-jwt-vc/pull/120 since I find its description of what we're achieving more natural / less surprising.  But I can live with this description as well, provided the distracting \"with JSON Claims\" language is removed.",
          "createdAt": "2023-06-19T19:59:20Z",
          "updatedAt": "2023-06-19T19:59:20Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5Yn8f3",
          "commit": {
            "abbreviatedOid": "72d7a7e"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-19T20:04:34Z",
          "updatedAt": "2023-06-19T20:04:34Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "#132 should be addressed after we have clarity on direction whether #120 or #131.\r\n\r\njfyi `Selective Disclosure for JWT and JWS with JSON payloads (SD-JWT)` is a new spec title for SD-JWT, and \"JWS with JSON payloads\" is meant to cater for JSON serialization which is not allowed in JWT.",
              "createdAt": "2023-06-19T20:04:34Z",
              "updatedAt": "2023-06-19T20:04:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5Yn9VW",
          "commit": {
            "abbreviatedOid": "2ac2b2f"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-19T20:09:00Z",
          "updatedAt": "2023-06-19T20:09:00Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "let's bikeshed the title in this PR for what is in scope for this PR. and then see if it is aligned or not with #132.",
              "createdAt": "2023-06-19T20:09:00Z",
              "updatedAt": "2023-06-19T20:09:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5YoE3z",
          "commit": {
            "abbreviatedOid": "9ceaabf"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-19T20:39:31Z",
          "updatedAt": "2023-06-19T20:39:32Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "The full (and admittedly clunky) title of SD-JWT doesn't need to be spelled out here though.  (and ugh we should have capitalized Payloads in that title)  \r\n```suggestion\r\nfor JWT (SD-JWT) [@!I-D.ietf-oauth-selective-disclosure-jwt] format.\r\n```",
              "createdAt": "2023-06-19T20:39:32Z",
              "updatedAt": "2023-06-19T20:39:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5YoIB8",
          "commit": {
            "abbreviatedOid": "2ac2b2f"
          },
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-19T20:52:53Z",
          "updatedAt": "2023-06-19T20:52:54Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "I believe it is important to clarify what the specification is trying to achieve.\r\nJWS: compact or JSON serialised JWS -> protection mechanism + serialisation\r\nSD-JWT: SD-JWT serialisation (JWS+disclosures+tilde) or JSON serialised JWS -> protection mechanism + serialisation --> note that this could be fixed if the SD authors agree to. Issue is still open, a viable proposal is on the table.\r\nJWT: compact serialised JWS -> claim set + protection\r\nid token -> JWT + rules for the claims -> claim set + verification rules + protection\r\n\r\nIf I understand correctly, this specification defines a profile for Verifiable Credentials with the JWT claims set. So\r\nvc+jwt -> claim set (VC + JWT claims), verification rules + protection (JWS or SD-JWT)\r\n\r\nIf my understanding is correct and if the specification is defining a new type, like in #132: vc+jwt, the specification can be defined as:\r\nVerifiable Credential with JWT claims and protected by JWS (any serialisation) and/or SD-JWT\r\n\r\nOr define a new brand:\r\n- Verifiable Web Tokens (I prefer this one)\r\n- JSON Verifiable Credentials\r\n- JSON Web Credentials\r\n- Verifiable Credential Tokens (don't like this one)\r\n\r\nI agree with @selfissued  that \"with JSON\" payloads is clumsy/confusing.\r\n\r\nNote: ID Tokens are not called JWT ID nor ID JWT ;)",
              "createdAt": "2023-06-19T20:52:53Z",
              "updatedAt": "2023-06-19T20:54:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5Ypekc",
          "commit": {
            "abbreviatedOid": "2ac2b2f"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-20T04:07:44Z",
          "updatedAt": "2023-06-20T04:07:45Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "I don't think things need to be that complicated...\r\n\r\nBottomline, there is a need for a credential format that uses JWT claim set in the payload, and depending on the use-case there may or may not be a need for selective disclosure. To achieve that we are exploring two approaches:\r\n1. define a credential format without SD based on JWT RFC (JWT VC) and with SD based on the IETF SD-JWT draft (SD-JWT VC) - PR #120\r\n2. define a credential format based on IETF SD-JWT that can be with or without SD (SD-WT VC) - PR #131\r\n\r\nthat's it.",
              "createdAt": "2023-06-20T04:07:44Z",
              "updatedAt": "2023-06-20T04:07:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5Ypgwy",
          "commit": {
            "abbreviatedOid": "f3a04a7"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-20T04:17:44Z",
          "updatedAt": "2023-06-20T04:17:45Z",
          "comments": [
            {
              "originalPosition": 90,
              "body": "if we keep approach in this PR, `~` needs to stay even when there is no SD.",
              "createdAt": "2023-06-20T04:17:44Z",
              "updatedAt": "2023-06-20T04:17:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5YphZW",
          "commit": {
            "abbreviatedOid": "a623ffc"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-20T04:19:42Z",
          "updatedAt": "2023-06-20T04:19:42Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\nfor JWTs (SD-JWT) [@!I-D.ietf-oauth-selective-disclosure-jwt] format.\r\n```",
              "createdAt": "2023-06-20T04:19:42Z",
              "updatedAt": "2023-06-20T04:19:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5YpoG_",
          "commit": {
            "abbreviatedOid": "2ac2b2f"
          },
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-20T04:53:22Z",
          "updatedAt": "2023-06-20T04:53:22Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Hi @Sakurann . I agree that id doesn't have to be that complicated. IMO 2nd approach is cleaner as you can clearly split the data model and protection mechanisms.\r\nSee:\r\n> If I understand correctly, this specification defines a profile for Verifiable Credentials with the JWT claims set. So\r\n> vc+jwt -> claim set (VC + JWT claims), verification rules + protection (JWS or SD-JWT)\r\n\r\nFrom your answer I understand you agree with \"this specification defines a profile for Verifiable Credentials with the JWT claims set\"\r\nFrom design perspective, proposal 2 is better. Having a data model that depends on the signature format has limited re-usability. Let's assume a new signature or SD for JWT format is introduced. Would this required new data model specifications?\r\n\r\nEdit: Note that the trailing tilde in the limit of no SD will raise many questions.\r\nI recommend to define a data model here and present how the credential is protected in the case of JWS or SD-JWT. (Similar to the OIDC ID token specification part)",
              "createdAt": "2023-06-20T04:53:22Z",
              "updatedAt": "2023-06-20T04:57:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5Yp2_O",
          "commit": {
            "abbreviatedOid": "1582aec"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-20T06:00:19Z",
          "updatedAt": "2023-06-20T06:00:19Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "I don't think it needs to be highlighted in the introduction. Rationale is sufficient in my opinion.",
              "createdAt": "2023-06-20T06:00:19Z",
              "updatedAt": "2023-06-20T06:00:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5YvxaW",
          "commit": {
            "abbreviatedOid": "1582aec"
          },
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-20T19:54:25Z",
          "updatedAt": "2023-06-20T19:54:25Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5Yvx31",
          "commit": {
            "abbreviatedOid": "1582aec"
          },
          "author": "tplooker",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-20T19:55:44Z",
          "updatedAt": "2023-06-20T19:55:44Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5YvyY-",
          "commit": {
            "abbreviatedOid": "0ec7de6"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-20T19:56:54Z",
          "updatedAt": "2023-06-20T19:56:54Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "in other issue.",
              "createdAt": "2023-06-20T19:56:54Z",
              "updatedAt": "2023-06-20T19:56:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5YvywZ",
          "commit": {
            "abbreviatedOid": "0ec7de6"
          },
          "author": "c2bo",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-20T19:58:01Z",
          "updatedAt": "2023-06-20T19:58:01Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5Yvy6C",
          "commit": {
            "abbreviatedOid": "0ec7de6"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-20T19:58:29Z",
          "updatedAt": "2023-06-20T19:58:29Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5YvzbY",
          "commit": {
            "abbreviatedOid": "0ec7de6"
          },
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I approve this approach over #120 as,\r\n- the specification is much cleaner\r\n- I expect implementations to be much cleaner\r\n- I don't see confusion with trailing tilde, because typ is not jwt but sd-jwt\r\n- most interop profiles will require SD support anyway",
          "createdAt": "2023-06-20T19:59:20Z",
          "updatedAt": "2023-06-20T19:59:20Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5YvziA",
          "commit": {
            "abbreviatedOid": "0ec7de6"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-20T19:59:33Z",
          "updatedAt": "2023-06-20T19:59:33Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5YvznJ",
          "commit": {
            "abbreviatedOid": "0ec7de6"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-20T19:59:44Z",
          "updatedAt": "2023-06-20T19:59:44Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5Y2chh",
          "commit": {
            "abbreviatedOid": "8066e23"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "approving but will create an issue to address trailing tilde.",
          "createdAt": "2023-06-21T12:52:33Z",
          "updatedAt": "2023-06-21T12:52:33Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5geOvZ",
          "commit": {
            "abbreviatedOid": "8066e23"
          },
          "author": "bob420-svg",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-09-09T01:05:44Z",
          "updatedAt": "2023-09-09T01:05:44Z",
          "comments": []
        }
      ]
    },
    {
      "number": 132,
      "id": "PR_kwDOJbVClc5TOLig",
      "title": "Update draft-terbu-sd-jwt-vc.md",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/132",
      "state": "CLOSED",
      "author": "OR13",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "discuss",
        "DO NOT MERGE"
      ],
      "body": "",
      "createdAt": "2023-06-16T19:26:58Z",
      "updatedAt": "2023-06-26T13:54:23Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "588ea557ea5861784bbaf7051eddefdeb6d0751f",
      "headRepository": null,
      "headRefName": "patch-1",
      "headRefOid": "3a077c11d9a07780b54e6f64cb673e10c814523b",
      "closedAt": "2023-06-26T13:54:22Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "> the \"with JSON payloads\" wording is clunky and redundant. All JWTs have JSON payloads.\r\n\r\nbut not all JWS, which can sign anything. this is a way to draw a line with a document in W3C which uses JWS to sign over JSON-LD.",
          "createdAt": "2023-06-19T20:01:46Z",
          "updatedAt": "2023-06-19T20:01:46Z"
        },
        {
          "author": "OR13",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this PR, we will try again later.... this document should be titled vc-jwt, since it does not describe securing other content types.",
          "createdAt": "2023-06-26T13:54:22Z",
          "updatedAt": "2023-06-26T13:54:22Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5Ydy9Q",
          "commit": {
            "abbreviatedOid": "3a077c1"
          },
          "author": "mprorock",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-16T19:27:51Z",
          "updatedAt": "2023-06-16T19:27:51Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "```suggestion\r\nabbrev = \"JWT-VC\"\r\n```",
              "createdAt": "2023-06-16T19:27:51Z",
              "updatedAt": "2023-06-16T19:27:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5YdzIu",
          "commit": {
            "abbreviatedOid": "3a077c1"
          },
          "author": "OR13",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-16T19:28:21Z",
          "updatedAt": "2023-06-16T19:28:21Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "^ can we reverse to \"VC-JWT\" ?",
              "createdAt": "2023-06-16T19:28:21Z",
              "updatedAt": "2023-06-16T19:28:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5YdzKH",
          "commit": {
            "abbreviatedOid": "3a077c1"
          },
          "author": "mprorock",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "approve of this but see suggestion on abbrev",
          "createdAt": "2023-06-16T19:28:22Z",
          "updatedAt": "2023-06-16T19:28:22Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5YdzPz",
          "commit": {
            "abbreviatedOid": "3a077c1"
          },
          "author": "mprorock",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-16T19:28:37Z",
          "updatedAt": "2023-06-16T19:28:38Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "totally good with that",
              "createdAt": "2023-06-16T19:28:37Z",
              "updatedAt": "2023-06-16T19:28:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5YfjDr",
          "commit": {
            "abbreviatedOid": "3a077c1"
          },
          "author": "OR13",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Reasoning for name change.\n\n1. Verifiable Credential is the new part not JWT or SD-JWT.\n2. This item focuses on securing Verifiable Credential with 2 existing IETF work items, so you can't start the name of the work item with 2 formats, but you can start it with the name of the thing that has 2 secured representations.\n3. This is truly the vc-jwt spec, the one at W3C is focused on vc+ld+json... We should make the names as simple and clear as possible.\n4. Putting JWT first is not correct, if the typ values differ in the spec and don't both use +jwt suffix (this is a variation on 2).",
          "createdAt": "2023-06-17T04:10:02Z",
          "updatedAt": "2023-06-17T04:10:02Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5YnszL",
          "commit": {
            "abbreviatedOid": "3a077c1"
          },
          "author": "selfissued",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "the \"with JSON payloads\" wording is clunky and redundant.  All JWTs have JSON payloads.",
          "createdAt": "2023-06-19T19:32:41Z",
          "updatedAt": "2023-06-19T19:32:41Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5Yn7ZE",
          "commit": {
            "abbreviatedOid": "3a077c1"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "we need to make a decision whether to go #120 or #131 path. and I am personally more and more favorable towards #131. and this PR is more inline with #120 than #131.",
          "createdAt": "2023-06-19T19:59:14Z",
          "updatedAt": "2023-06-19T19:59:14Z",
          "comments": []
        }
      ]
    },
    {
      "number": 133,
      "id": "PR_kwDOJbVClc5TXwHW",
      "title": "Update names of included files for examples",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/133",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Update names of included files for examples for when/if https://github.com/danielfett/sd-jwt/pull/11 gets merged into the reference implementation used to generate the examples",
      "createdAt": "2023-06-19T19:26:57Z",
      "updatedAt": "2023-06-22T09:29:37Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "9119083958ea6f636927df22c9a5769400558f3f",
      "headRepository": null,
      "headRefName": "tilde-and-terms",
      "headRefOid": "7fe048b09f12ef17399b8b5055c41eef36eef403",
      "closedAt": "2023-06-22T09:29:36Z",
      "mergedAt": "2023-06-22T09:29:36Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "f077f9b30ce88b0bda2c301134ba932d58c68f21"
      },
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "@awoie This should be merged immediately after I merged this PR in the library: https://github.com/danielfett/sd-jwt/pull/11 - let's coordinate.",
          "createdAt": "2023-06-20T14:39:27Z",
          "updatedAt": "2023-06-20T14:39:27Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5Yte3p",
          "commit": {
            "abbreviatedOid": "7fe048b"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-20T14:37:57Z",
          "updatedAt": "2023-06-20T14:37:57Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5Y-epN",
          "commit": {
            "abbreviatedOid": "7fe048b"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "lgtm",
          "createdAt": "2023-06-22T09:26:33Z",
          "updatedAt": "2023-06-22T09:26:33Z",
          "comments": []
        }
      ]
    },
    {
      "number": 138,
      "id": "PR_kwDOJbVClc5Tlgze",
      "title": "Replace \"Three-Party-Model\" with \"Issuer-Holder-Verifier Model\"",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/138",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "<!-- If this pull request closes an issue, please mention the issue number below -->\r\nCloses #111\r\n\r\n## \ud83d\udcd1 Description\r\nReplace \"Three-Party-Model\" with \"Issuer-Holder-Verifier Model\"\r\n",
      "createdAt": "2023-06-21T19:48:17Z",
      "updatedAt": "2023-06-22T09:34:37Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "85d396fe5e5a690da72fe8b3109af58b56399d43",
      "headRepository": null,
      "headRefName": "3s-company",
      "headRefOid": "ce827c423e9a4b3dc0597e2e12aa61f3d0f500cd",
      "closedAt": "2023-06-22T09:34:37Z",
      "mergedAt": "2023-06-22T09:34:37Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "0e66e74f7fbdbea787ec15016af8960843dd2096"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5Y-WxG",
          "commit": {
            "abbreviatedOid": "ce827c4"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "thanks, lgtm",
          "createdAt": "2023-06-22T09:08:20Z",
          "updatedAt": "2023-06-22T09:08:20Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5Y-htj",
          "commit": {
            "abbreviatedOid": "ce827c4"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-22T09:33:45Z",
          "updatedAt": "2023-06-22T09:33:45Z",
          "comments": []
        }
      ]
    },
    {
      "number": 139,
      "id": "PR_kwDOJbVClc5TlnBU",
      "title": "Make the title shorter, simpler and less clunky",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/139",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "As @selfissued has aptly pointed out, 'the \"with JSON payloads\" wording is clunky and redundant.'",
      "createdAt": "2023-06-21T20:05:42Z",
      "updatedAt": "2023-06-22T09:36:29Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "85d396fe5e5a690da72fe8b3109af58b56399d43",
      "headRepository": null,
      "headRefName": "less-is-more",
      "headRefOid": "ca4662566a54a0bb9495eba10e69f45e74bfcc44",
      "closedAt": "2023-06-22T09:36:28Z",
      "mergedAt": "2023-06-22T09:36:28Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "46194ce95221f2a852c062a33ba9c2324a942a9f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5Y-ik0",
          "commit": {
            "abbreviatedOid": "ca46625"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "I see no reason to have the \"with JSON payloads\" in the title",
          "createdAt": "2023-06-22T09:35:48Z",
          "updatedAt": "2023-06-22T09:35:48Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5Y-ipf",
          "commit": {
            "abbreviatedOid": "ca46625"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "lgtm",
          "createdAt": "2023-06-22T09:35:58Z",
          "updatedAt": "2023-06-22T09:35:58Z",
          "comments": []
        }
      ]
    },
    {
      "number": 140,
      "id": "PR_kwDOJbVClc5Tuvjf",
      "title": "Update CODEOWNERS",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/140",
      "state": "MERGED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "<!-- If this pull request closes an issue, please mention the issue number below -->\r\nCloses # <!-- Issue # here -->\r\n\r\n## \ud83d\udcd1 Description\r\n<!-- Add a brief description of the pr -->\r\n\r\n<!-- You can also choose to add a list of changes and if they have been completed or not by using the markdown to-do list syntax\r\n- [ ] Not Completed\r\n- [x] Completed\r\n-->\r\n\r\n## Preview Link\r\n\r\n<!-- Update the link below to provide reviewers with a convenient link to view a rendered version of the PR-->\r\n<!-- In general the link should be of the form https://github.com/<repo-name>/<branch-name>/<draft-name>.html-->\r\n\r\n[click here for rendered preview of PR](https://github.com/<repo-name>/<branch-name>/<draft-name>.html)",
      "createdAt": "2023-06-23T09:22:22Z",
      "updatedAt": "2023-06-23T09:24:38Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "8e6fcf5ffcc760f14bc0629f479f5b1f18aa7b8a",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "awoie-patch-1",
      "headRefOid": "c6448270c1a17e10736fe643628ca4d450037fb9",
      "closedAt": "2023-06-23T09:24:37Z",
      "mergedAt": "2023-06-23T09:24:37Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "cfaed1134f80b3aa73d878c5bddafa72cdcfb647"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5ZGKwR",
          "commit": {
            "abbreviatedOid": "c644827"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-23T09:22:56Z",
          "updatedAt": "2023-06-23T09:22:56Z",
          "comments": []
        }
      ]
    },
    {
      "number": 141,
      "id": "PR_kwDOJbVClc5TyYpo",
      "title": "remove requirement to have kid in cnf",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/141",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "<!-- If this pull request closes an issue, please mention the issue number below -->\r\nCloses #97\r\n\r\n## \ud83d\udcd1 Description\r\nremove requirement to have kid in cnf\r\n",
      "createdAt": "2023-06-23T21:46:30Z",
      "updatedAt": "2023-07-03T14:48:32Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "cfaed1134f80b3aa73d878c5bddafa72cdcfb647",
      "headRepository": null,
      "headRefName": "no-kid-in-cnf-jwk",
      "headRefOid": "b1f4d16cfde9c4312a5cacbd9ec41c0c3c3695ed",
      "closedAt": "2023-07-03T14:48:31Z",
      "mergedAt": "2023-07-03T14:48:31Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "2dcd80d978ced2f7fc6b1fc96d4fcdafd2745cf6"
      },
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "> I think more text can be removed here...\r\n> \r\n> Are we trying to prevent users from doing this:\r\n\r\nWe are not trying to prevent that in this spec. The default should be the `jwk` cnf method but this is not what the PR changed or added. This PR just removes the requirement that the `kid` has to be in the `jwk` claim. This PR does not talk about the `kid` cnf method which is still an option. ",
          "createdAt": "2023-06-26T14:53:10Z",
          "updatedAt": "2023-06-26T14:53:10Z"
        },
        {
          "author": "OR13",
          "authorAssociation": "COLLABORATOR",
          "body": "btw, I added a related comment here: https://github.com/w3c/vc-jwt/pull/111",
          "createdAt": "2023-06-26T15:28:25Z",
          "updatedAt": "2023-06-26T15:28:25Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5ZLKSS",
          "commit": {
            "abbreviatedOid": "b1f4d16"
          },
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-23T21:58:51Z",
          "updatedAt": "2023-06-23T21:58:52Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5ZUzHX",
          "commit": {
            "abbreviatedOid": "b1f4d16"
          },
          "author": "OR13",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "I think more text can be removed here...\r\n\r\nAre we trying to prevent users from doing this: \r\n\r\n```json\r\n{\r\n      \"iss\": \"https://server.example.com\",\r\n      \"aud\": \"https://client.example.org\",\r\n      \"exp\": 1361398824,\r\n      \"cnf\":{\r\n        \"kid\": \"dfd1aa97-6d8d-4575-a0fe-34b96de2bfad\"\r\n       }\r\n     }\r\n```\r\n\r\n```json\r\n{\r\n      \"iss\": \"did:example:123\",\r\n      \"aud\": \"https://client.example.org\",\r\n      \"exp\": 1361398824,\r\n      \"cnf\":{\r\n        \"kid\": \"did:example:123#key-42\"\r\n       }\r\n     }\r\n```\r\n\r\nSeems like it should just say support RFC7800.\r\n\r\nAnd make no recommendations on `jwk` vs `kid`",
          "createdAt": "2023-06-26T14:01:48Z",
          "updatedAt": "2023-06-26T14:01:48Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5ZVRH-",
          "commit": {
            "abbreviatedOid": "b1f4d16"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "lgtm",
          "createdAt": "2023-06-26T14:53:40Z",
          "updatedAt": "2023-06-26T14:53:40Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5ZViID",
          "commit": {
            "abbreviatedOid": "b1f4d16"
          },
          "author": "OR13",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Approving based on @awoie ",
          "createdAt": "2023-06-26T15:26:34Z",
          "updatedAt": "2023-06-26T15:26:34Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5ZwztH",
          "commit": {
            "abbreviatedOid": "b1f4d16"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-29T19:45:45Z",
          "updatedAt": "2023-06-29T19:45:45Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5Zw8zR",
          "commit": {
            "abbreviatedOid": "b1f4d16"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-29T19:51:42Z",
          "updatedAt": "2023-06-29T19:51:42Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5aFUHK",
          "commit": {
            "abbreviatedOid": "b1f4d16"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-03T14:48:10Z",
          "updatedAt": "2023-07-03T14:48:10Z",
          "comments": []
        }
      ]
    },
    {
      "number": 146,
      "id": "PR_kwDOJbVClc5UREkK",
      "title": "Clarify vcdm",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/146",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "adding a note that sd-jwt vc is not w3c vcdm.\r\nwe can decide to remove this note before final, but sounds like it is beneficial for clarify rn",
      "createdAt": "2023-06-29T18:32:40Z",
      "updatedAt": "2023-07-03T14:46:46Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "cfaed1134f80b3aa73d878c5bddafa72cdcfb647",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "clarify-vcdm",
      "headRefOid": "480f67df473541cb17123580c9396622ef204b97",
      "closedAt": "2023-07-03T14:46:45Z",
      "mergedAt": "2023-07-03T14:46:45Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "b7719a18f9aa26f31ad982f540883087aa7c8fc8"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5ZwYj5",
          "commit": {
            "abbreviatedOid": "fe02e0a"
          },
          "author": "tplooker",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-29T18:40:13Z",
          "updatedAt": "2023-06-29T18:40:13Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5ZwY6b",
          "commit": {
            "abbreviatedOid": "fe02e0a"
          },
          "author": "OR13",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-29T18:41:14Z",
          "updatedAt": "2023-06-29T18:41:14Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5ZwkLk",
          "commit": {
            "abbreviatedOid": "fe02e0a"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2023-06-29T19:12:14Z",
          "updatedAt": "2023-06-29T19:17:40Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "```suggestion\r\nNote: This specification does not utilize the W3C's Verifiable Credentials Data Model.\r\n\r\n```",
              "createdAt": "2023-06-29T19:12:14Z",
              "updatedAt": "2023-06-29T19:17:40Z"
            },
            {
              "originalPosition": 4,
              "body": "and delete the whole `<reference anchor=\"W3C.VCDM / VC-DATA\" target=\"https://www.w3.org/TR/vc-data-model-2.0/\">...<reference/>` block (which is more than GH will let me suggest) ",
              "createdAt": "2023-06-29T19:16:37Z",
              "updatedAt": "2023-06-29T19:17:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5Zwm6S",
          "commit": {
            "abbreviatedOid": "fe02e0a"
          },
          "author": "peppelinux",
          "authorAssociation": "NONE",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2023-06-29T19:20:04Z",
          "updatedAt": "2023-06-29T19:20:27Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "```suggestion\r\n* added a note that this is not w3c vcdm.\r\n```",
              "createdAt": "2023-06-29T19:20:04Z",
              "updatedAt": "2023-06-29T19:20:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5ZwtuZ",
          "commit": {
            "abbreviatedOid": "88cd398"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-29T19:39:25Z",
          "updatedAt": "2023-06-29T19:39:25Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "```suggestion\r\nNote: This specification does not utilize the W3C's Verifiable Credentials Data Model v1.0, v1.1, or v2.0.\r\n```",
              "createdAt": "2023-06-29T19:39:25Z",
              "updatedAt": "2023-06-29T19:39:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5ZwxAO",
          "commit": {
            "abbreviatedOid": "480f67d"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-29T19:44:10Z",
          "updatedAt": "2023-06-29T19:44:10Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5ZxPNM",
          "commit": {
            "abbreviatedOid": "480f67d"
          },
          "author": "peppelinux",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-29T20:33:00Z",
          "updatedAt": "2023-06-29T20:33:00Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5ZxYH2",
          "commit": {
            "abbreviatedOid": "480f67d"
          },
          "author": "c2bo",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-29T20:53:00Z",
          "updatedAt": "2023-06-29T20:53:00Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5aDQui",
          "commit": {
            "abbreviatedOid": "480f67d"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "lgtm. thank you.",
          "createdAt": "2023-07-03T09:44:31Z",
          "updatedAt": "2023-07-03T09:44:31Z",
          "comments": []
        }
      ]
    },
    {
      "number": 148,
      "id": "PR_kwDOJbVClc5UXmCE",
      "title": "Request vc+jwt registration",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/148",
      "state": "CLOSED",
      "author": "OR13",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #147 ",
      "createdAt": "2023-06-30T22:57:02Z",
      "updatedAt": "2023-07-17T15:54:26Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "cfaed1134f80b3aa73d878c5bddafa72cdcfb647",
      "headRepository": null,
      "headRefName": "feat/vc-jwt",
      "headRefOid": "b4ba092ef731cf24eab210d4af46a8ac9d12c841",
      "closedAt": "2023-07-17T13:53:50Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "OR13",
          "authorAssociation": "COLLABORATOR",
          "body": "> vc+sd-jwt was to be used for both SD-JWT VC with and without SD.\r\n\r\n@Sakurann This does not make sense to me.\r\n\r\n> As JWTs are being used by more different protocols in diverse application areas, it becomes increasingly important to prevent cases of JWT tokens that have been issued for one purpose being subverted and used for another. Note that this is a specific type of substitution attack. If the JWT could be used in an application context in which it could be confused with other kinds of JWTs, then mitigations MUST be employed to prevent these substitution attacks.\r\n\r\nhttps://datatracker.ietf.org/doc/html/rfc8725#section-2.8\r\n\r\n> Sometimes, one kind of JWT can be confused for another. If a particular kind of JWT is subject to such confusion, that JWT can include an explicit JWT type value, and the validation rules can specify checking the type. This mechanism can prevent such confusion. Explicit JWT typing is accomplished by using the \"typ\" Header Parameter.\r\n\r\nhttps://datatracker.ietf.org/doc/html/rfc8725#section-3.11\r\n\r\nI think it would be better to follow the BCP.\r\n\r\nAlso... `+jwt` is a structured suffix:\r\n\r\nhttps://www.iana.org/assignments/media-type-structured-suffix/media-type-structured-suffix.xhtml\r\n\r\nFurther `sd-jwt` is not a JWT, it supports JSON serialization, and it does not follow the encoding rules for JWT:\r\n\r\n> 8bit; JWT values are encoded as a series of base64url encoded values (some of which may be the empty string) separated by period ('.') characters.\r\n      \r\nhttps://www.iana.org/assignments/media-types/application/jwt\r\n\r\nCurrent draft says \"vc+sd-jwt\" is \r\n\r\n> 8-bit code points; SD-JWT VC values are encoded as a series of base64url-encoded values (some of which may be the empty string) separated by period ('.') and tilde ('~') characters.\r\n\r\n",
          "createdAt": "2023-06-30T23:09:41Z",
          "updatedAt": "2023-06-30T23:09:41Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "I think the shift in the mental model needs to happen. with the current approach, selective disclosure now becomes a feature of one credential format. no more of \"i use credential format A (current vc-jwt) because i do not need SD, i use credential format B (original sd-jwt vc) because i need SD\". now, it's \"i use sd-jwt vc and turn on SD feature on and off depending on the use-case\" - so it's better for the interop and the code base.\r\n\r\n>Current draft says \"vc+sd-jwt\" is\r\n> \r\n> 8-bit code points; SD-JWT VC values are encoded as a series of base64url-encoded values (some of which may be the empty string) separated by period ('.') and tilde ('~') characters.\r\n\r\nyes, and vc+sd-jwt without SD in the current draft meets this perfectly because even without SD, it is <issuer-signed JWT>~<optional KB JWT>. ",
          "createdAt": "2023-06-30T23:55:37Z",
          "updatedAt": "2023-06-30T23:55:37Z"
        },
        {
          "author": "OR13",
          "authorAssociation": "COLLABORATOR",
          "body": "We discussed this in relation to https://github.com/w3c/vc-jose-cose/pull/88\r\n\r\nWe think the proposed `+sd-jwt` path forward will simplify things for implementers.\r\n",
          "createdAt": "2023-07-17T13:53:50Z",
          "updatedAt": "2023-07-17T13:53:50Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "can/should https://github.com/vcstuff/draft-terbu-sd-jwt-vc/issues/147 also be closed? ",
          "createdAt": "2023-07-17T15:54:25Z",
          "updatedAt": "2023-07-17T15:54:25Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5Z4aUD",
          "commit": {
            "abbreviatedOid": "b4ba092"
          },
          "author": "OR13",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-30T22:57:40Z",
          "updatedAt": "2023-06-30T22:57:41Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "I ran `make-lint`... looks like the last person did not.",
              "createdAt": "2023-06-30T22:57:40Z",
              "updatedAt": "2023-06-30T22:57:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5Z4aWO",
          "commit": {
            "abbreviatedOid": "b4ba092"
          },
          "author": "OR13",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-30T22:58:04Z",
          "updatedAt": "2023-06-30T22:58:04Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "or github just doesn't understand this diff",
              "createdAt": "2023-06-30T22:58:04Z",
              "updatedAt": "2023-06-30T22:58:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5Z4aj6",
          "commit": {
            "abbreviatedOid": "b4ba092"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "this needs discussions, with the direction agreed on PR #131, ` vc+sd-jwt` was to be used for both SD-JWT VC with and without SD.",
          "createdAt": "2023-06-30T23:00:24Z",
          "updatedAt": "2023-06-30T23:00:24Z",
          "comments": []
        }
      ]
    },
    {
      "number": 152,
      "id": "PR_kwDOJbVClc5VHF9A",
      "title": "fixed data tracker issues",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/152",
      "state": "MERGED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes IETF data tracker issues",
      "createdAt": "2023-07-10T17:36:35Z",
      "updatedAt": "2023-07-10T17:43:48Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "2dcd80d978ced2f7fc6b1fc96d4fcdafd2745cf6",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "awoie/fix-data-tracker",
      "headRefOid": "db2e78058d0349f5b947d213a9fb54440cf975b3",
      "closedAt": "2023-07-10T17:43:47Z",
      "mergedAt": "2023-07-10T17:43:47Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "a7ac8bd0ba514d8b6d4bf9d7a8ef7258d235e613"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 153,
      "id": "PR_kwDOJbVClc5VqCNE",
      "title": "added more text to define and examplify the type claim",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/153",
      "state": "MERGED",
      "author": "tlodderstedt",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-07-17T10:56:16Z",
      "updatedAt": "2023-08-09T11:29:25Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "a7ac8bd0ba514d8b6d4bf9d7a8ef7258d235e613",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "definition-type",
      "headRefOid": "4789d690a95eeb11ce0955d4ce8b6c35827d0792",
      "closedAt": "2023-08-09T11:29:25Z",
      "mergedAt": "2023-08-09T11:29:25Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "1554fe42d80e0f14967c1abc58792ea1fd1a4edd"
      },
      "comments": [
        {
          "author": "mprorock",
          "authorAssociation": "NONE",
          "body": "I worry about collisions and confusion with `typ` (and with `cty`) - those of us that work with this stuff will likely understand the difference, but there is probably a better descriptor we could use than `type` for this reason.  \r\n\r\nMaybe specifying \"schema\" or \"schemaName\" or \"sn\" (for nice short form) would be more useful here",
          "createdAt": "2023-07-17T13:16:39Z",
          "updatedAt": "2023-07-17T13:16:39Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "@mprorock there is a conversation on renaming type claim in Issue https://github.com/vcstuff/draft-terbu-sd-jwt-vc/issues/130. which should be a separate PR if we agree on an alternative claim name..",
          "createdAt": "2023-07-18T09:51:56Z",
          "updatedAt": "2023-07-18T09:51:56Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5beN0_",
          "commit": {
            "abbreviatedOid": "f328e7a"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-18T09:44:33Z",
          "updatedAt": "2023-07-18T09:44:33Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "```suggestion\r\nThis specification defines the JWT claim `type`. The `type` claim value is the\r\nidentifier for a pre-defined bundle of claims that the respective SD-JWT VC\r\nconforms to. The `type` value MUST be a case-sensitive `StringOrURI` value.\r\n```\r\n\r\nI don't really understand what `associated with certain policies for enrollment and issuance` means..?",
              "createdAt": "2023-07-18T09:44:33Z",
              "updatedAt": "2023-07-18T09:44:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5beP89",
          "commit": {
            "abbreviatedOid": "f328e7a"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-18T09:49:16Z",
          "updatedAt": "2023-07-18T09:49:16Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "```suggestion\r\nSD-JWT VC of a type `IdentityCredential` is defined as containing \r\n- mandatory JWT claims `given_name`, `family_name`, `birthdate`, and `address` registered in the \"JSON Web Token Claims\" registry created by [@!RFC7519],\r\n- optional JWT claims `email` and `phone_number` defined in the same registry, and\r\n- optional claims `is_over_18`, `is_over_21`, and `is_over_65` defined by this Credential type.\r\n```\r\n\r\nI think this is what this text wants to say...?",
              "createdAt": "2023-07-18T09:49:16Z",
              "updatedAt": "2023-07-18T09:49:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5beQwr",
          "commit": {
            "abbreviatedOid": "f328e7a"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "DISMISSED",
          "body": "I agree with the direction would just like to see a bit more clarity..",
          "createdAt": "2023-07-18T09:51:10Z",
          "updatedAt": "2023-08-09T11:29:13Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5bhlR0",
          "commit": {
            "abbreviatedOid": "f328e7a"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "@tlodderstedt made some suggestions",
          "createdAt": "2023-07-18T17:01:04Z",
          "updatedAt": "2023-07-18T17:52:21Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "I agree, I don't fully understand either I think I have a clue but imo, it sounds a bit too difficult to parse for most readers.",
              "createdAt": "2023-07-18T17:01:04Z",
              "updatedAt": "2023-07-18T17:52:21Z"
            },
            {
              "originalPosition": 10,
              "body": "```suggestion\r\nThis specification defines the JWT claim `type`. The `type` value\r\nspecifies the type of the VC represented by the SD-JWT VC. The\r\ntype determines the presence of JWT claims in the \r\nunsecured payload of the SD-JWT VC. The type also indicates which\r\nJWT claims can have corresponding entries in the `_sd` claim and\r\nare selective disclosable. The `type` value MUST be a case-sensitive\r\n`StringOrURI` value.\r\n```",
              "createdAt": "2023-07-18T17:35:09Z",
              "updatedAt": "2023-07-18T17:52:21Z"
            },
            {
              "originalPosition": 21,
              "body": "```suggestion\r\nFor example, a type `IdentityCredential` can be defined that an SD-JWT VC of type `IdentityCredential` requires at least the registered JWT claims `given_name`, `family_name`, `birthdate`, and `address` in the unsecured payload. Additionally, the unsecured payload might optionally contain the registered JWT claims `email` and `phone_number`, and the private claims `is_over_18`, `is_over_21`, and `is_over_65`. The type might also indicate that `given_name`, `family_name`, `birthdate`, `address` can have corresponding entries in the `_sd` claim and are selective disclosable. \r\n```",
              "createdAt": "2023-07-18T17:51:57Z",
              "updatedAt": "2023-07-18T17:52:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5bh6YF",
          "commit": {
            "abbreviatedOid": "f328e7a"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-18T17:52:51Z",
          "updatedAt": "2023-07-18T17:52:51Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "I'd prefer my suggestion below.",
              "createdAt": "2023-07-18T17:52:51Z",
              "updatedAt": "2023-07-18T17:52:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5dhELv",
          "commit": {
            "abbreviatedOid": "f328e7a"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "Proposed new wordings.",
          "createdAt": "2023-08-09T07:45:47Z",
          "updatedAt": "2023-08-09T07:50:21Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "Rewording based on @awoie's proposal and incorporating Torsten's ideas.\r\n\r\n```suggestion\r\nThis specification defines the JWT claim `type`. The `type` value\r\nMUST be a case-sensitive `StringOrURI` value serving as an identifier\r\nfor the type of the SD-JWT VC. A type defines which claims may or must appear in the \r\nUnsecured Payload of the SD-JWT VC and whether they may, must, or must not be\r\nselectively disclosable. This specification does not define any `type` values; instead\r\nit is expected that ecosystems using SD-JWT VCs define such values including\r\nthe semantics of the respective claims and associated rules (e.g., policies for issuing and\r\nvalidating credentials beyond what is defined in this specification).\r\n```",
              "createdAt": "2023-08-09T07:45:47Z",
              "updatedAt": "2023-08-09T11:17:40Z"
            },
            {
              "originalPosition": 21,
              "body": "```suggestion\r\nFor example, a type `IdentityCredential` can be defined such that at least the registered JWT claims `given_name`, `family_name`, `birthdate`, and `address` must appear in the Unsecured Payload. Additionally, the registered JWT claims `email` and `phone_number`, and the private claims `is_over_18`, `is_over_21`, and `is_over_65` may be used. The type might also indicate that `given_name`, `family_name`, `birthdate`, `address` can be selectively disclosable.\r\n```",
              "createdAt": "2023-08-09T07:50:04Z",
              "updatedAt": "2023-08-09T07:50:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5dif2s",
          "commit": {
            "abbreviatedOid": "1c0d990"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "lgtm after we applied @danielfett suggestion",
          "createdAt": "2023-08-09T11:20:43Z",
          "updatedAt": "2023-08-09T11:20:43Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5digyA",
          "commit": {
            "abbreviatedOid": "86f2651"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-08-09T11:22:13Z",
          "updatedAt": "2023-08-09T11:22:13Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5dihbx",
          "commit": {
            "abbreviatedOid": "86f2651"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-09T11:23:31Z",
          "updatedAt": "2023-08-09T11:23:31Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\nfor the type of the SD-JWT VC. A type defines which claims may or must appear in the\r\n```",
              "createdAt": "2023-08-09T11:23:31Z",
              "updatedAt": "2023-08-09T11:23:32Z"
            }
          ]
        }
      ]
    },
    {
      "number": 154,
      "id": "PR_kwDOJbVClc5VxteJ",
      "title": "add reference to status list",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/154",
      "state": "MERGED",
      "author": "paulbastian",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "<!-- If this pull request closes an issue, please mention the issue number below -->\r\nCloses #142 \r\n\r\n## \ud83d\udcd1 Description\r\nAdd reference to https://vcstuff.github.io/draft-looker-oauth-jwt-cwt-status-list/draft-looker-oauth-jwt-cwt-status-list.html\r\n\r\n## Preview Link\r\n\r\n<!-- Update the link below to provide reviewers with a convenient link to view a rendered version of the PR-->\r\n<!-- In general the link should be of the form https://github.com/<repo-name>/<branch-name>/<draft-name>.html-->\r\n\r\n[click here for rendered preview of PR](https://github.com/<repo-name>/<branch-name>/<draft-name>.html)",
      "createdAt": "2023-07-18T11:41:18Z",
      "updatedAt": "2023-07-18T16:50:40Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "a7ac8bd0ba514d8b6d4bf9d7a8ef7258d235e613",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "statuslist",
      "headRefOid": "05ff0f42bf7aecd78b75f6483698d2778ef65d60",
      "closedAt": "2023-07-18T16:50:34Z",
      "mergedAt": "2023-07-18T16:50:34Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "6934603760b226b287f7a3c076ac8e820e49158a"
      },
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Merging this since informative only.",
          "createdAt": "2023-07-18T16:50:40Z",
          "updatedAt": "2023-07-18T16:50:40Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5be9ks",
          "commit": {
            "abbreviatedOid": "05ff0f4"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "lgtm",
          "createdAt": "2023-07-18T11:42:10Z",
          "updatedAt": "2023-07-18T11:42:10Z",
          "comments": []
        }
      ]
    },
    {
      "number": 156,
      "id": "PR_kwDOJbVClc5Xgj8o",
      "title": "Fix references, align terminology",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/156",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Closes #150.\r\n\r\nI removed the subsection numbers where appropriate to be less dependent on changes in the SD-JWT spec.\r\n\r\nI also removed references to the issuance/presentation format, as this was unified in SD-JWT. This also meant that the section on the data formats for issuance and presentation in our spec can now be just one section, as there are no big differences any longer.",
      "createdAt": "2023-08-09T08:12:09Z",
      "updatedAt": "2023-08-09T11:35:05Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "6934603760b226b287f7a3c076ac8e820e49158a",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "danielfett/align-terminology",
      "headRefOid": "eefdc28372e1e89c8d9ca66ebd4cb25544f05cda",
      "closedAt": "2023-08-09T11:35:04Z",
      "mergedAt": "2023-08-09T11:35:04Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "841f159aa13f648825886f59642b73dd9c9c369e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5dhQBh",
          "commit": {
            "abbreviatedOid": "a611d3e"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-09T08:13:49Z",
          "updatedAt": "2023-08-09T08:13:50Z",
          "comments": [
            {
              "originalPosition": 46,
              "body": "To be honest, I had no clue what this sentence was saying, so I removed it.",
              "createdAt": "2023-08-09T08:13:49Z",
              "updatedAt": "2023-08-09T08:13:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5dilik",
          "commit": {
            "abbreviatedOid": "eefdc28"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "lgtm",
          "createdAt": "2023-08-09T11:34:45Z",
          "updatedAt": "2023-08-09T11:34:45Z",
          "comments": []
        }
      ]
    },
    {
      "number": 157,
      "id": "PR_kwDOJbVClc5Xgy8h",
      "title": "Fix key binding check description, consolidate into one section",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/157",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "We currently have two section describing verification by Verifiers. This commit consolidates both sections.\r\n\r\nImportantly, this commit fixes the description of the key binding check to ensure that removing a KB JWT from the presentation does not allow circumventing KB.",
      "createdAt": "2023-08-09T08:56:46Z",
      "updatedAt": "2023-08-09T11:54:02Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "841f159aa13f648825886f59642b73dd9c9c369e",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "danielfett/fix-key-binding-description",
      "headRefOid": "136673cd506a17bd328abf06e9d12f10d17d033c",
      "closedAt": "2023-08-09T11:54:01Z",
      "mergedAt": "2023-08-09T11:54:01Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "6b787f906c923d56f1bb76f62897754d607c8265"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5dhjwm",
          "commit": {
            "abbreviatedOid": "4bebab2"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-09T08:57:33Z",
          "updatedAt": "2023-08-09T08:57:34Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "@awoie What is the importance of the last sentence here? Can we give more context?",
              "createdAt": "2023-08-09T08:57:33Z",
              "updatedAt": "2023-08-09T08:57:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5diq_L",
          "commit": {
            "abbreviatedOid": "5bc77d4"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "thank you! great improvement.",
          "createdAt": "2023-08-09T11:48:13Z",
          "updatedAt": "2023-08-09T11:48:13Z",
          "comments": []
        }
      ]
    },
    {
      "number": 158,
      "id": "PR_kwDOJbVClc5YDv6g",
      "title": "Prepare submission as WG draft",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/158",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Prepare working group draft",
      "createdAt": "2023-08-16T12:19:50Z",
      "updatedAt": "2023-08-16T12:32:12Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "6b787f906c923d56f1bb76f62897754d607c8265",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "danielfett/prepare-wg-draft",
      "headRefOid": "848d0dbb37b04275facd3c98c10869115c3154c2",
      "closedAt": "2023-08-16T12:32:12Z",
      "mergedAt": "2023-08-16T12:32:12Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "98caefbc371a9ca2e6ad7b6fe45da487f7b0732e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5eNF1n",
          "commit": {
            "abbreviatedOid": "848d0db"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-08-16T12:32:01Z",
          "updatedAt": "2023-08-16T12:32:01Z",
          "comments": []
        }
      ]
    },
    {
      "number": 160,
      "id": "PR_kwDOJbVClc5Z3_N8",
      "title": "Change framing around SD",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/160",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Addresses https://github.com/vcstuff/draft-terbu-sd-jwt-vc/issues/151",
      "createdAt": "2023-09-08T12:52:09Z",
      "updatedAt": "2023-09-08T13:21:02Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "98caefbc371a9ca2e6ad7b6fe45da487f7b0732e",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "danielfett/frame-sd-jwt-vc",
      "headRefOid": "7ed591bfcc58be4a784dbd2f9fa26213f15332d3",
      "closedAt": "2023-09-08T13:21:02Z",
      "mergedAt": "2023-09-08T13:21:01Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "c305d39b1dc9b4b4c63c9bb0c90bfe02d6538672"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5gaM91",
          "commit": {
            "abbreviatedOid": "7ed591b"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-09-08T13:20:45Z",
          "updatedAt": "2023-09-08T13:20:45Z",
          "comments": []
        }
      ]
    },
    {
      "number": 161,
      "id": "PR_kwDOJbVClc5Z4QwP",
      "title": "Remove use case section, fixes #29",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/161",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Closes #29 ",
      "createdAt": "2023-09-08T13:35:19Z",
      "updatedAt": "2023-09-08T13:36:01Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "c305d39b1dc9b4b4c63c9bb0c90bfe02d6538672",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "danielfett/remove-use-case-section",
      "headRefOid": "e15193487a019b3bf06ac295b60a0d2de33e67ae",
      "closedAt": "2023-09-08T13:36:01Z",
      "mergedAt": "2023-09-08T13:36:01Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "b263263b69cb338f301a1fb967d6283fe732847e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5gaUEq",
          "commit": {
            "abbreviatedOid": "e151934"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-09-08T13:35:45Z",
          "updatedAt": "2023-09-08T13:35:45Z",
          "comments": []
        }
      ]
    },
    {
      "number": 162,
      "id": "PR_kwDOJbVClc5Z4Uqk",
      "title": "fix: fixes #96",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/162",
      "state": "MERGED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "<!-- If this pull request closes an issue, please mention the issue number below -->\r\nCloses #96\r\n\r\n## \ud83d\udcd1 Description\r\n<!-- Add a brief description of the pr -->\r\n\r\n<!-- You can also choose to add a list of changes and if they have been completed or not by using the markdown to-do list syntax\r\n- [ ] Not Completed\r\n- [x] Completed\r\n-->\r\n\r\n## Preview Link\r\n\r\n<!-- Update the link below to provide reviewers with a convenient link to view a rendered version of the PR-->\r\n<!-- In general the link should be of the form https://github.com/<repo-name>/<branch-name>/<draft-name>.html-->\r\n\r\n[click here for rendered preview of PR](https://github.com/<repo-name>/<branch-name>/<draft-name>.html)",
      "createdAt": "2023-09-08T13:46:00Z",
      "updatedAt": "2023-09-08T13:47:19Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "b263263b69cb338f301a1fb967d6283fe732847e",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "awoie/fix-96",
      "headRefOid": "b05019f2ed675c6aec552360546a8ff736520a2b",
      "closedAt": "2023-09-08T13:47:19Z",
      "mergedAt": "2023-09-08T13:47:19Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "eb74ec47f1d5515e60f97c98bf9ec25425b10ef1"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5gaZpM",
          "commit": {
            "abbreviatedOid": "b05019f"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-09-08T13:47:12Z",
          "updatedAt": "2023-09-08T13:47:12Z",
          "comments": []
        }
      ]
    },
    {
      "number": 163,
      "id": "PR_kwDOJbVClc5aNsWK",
      "title": "Add security considerations, closes #47",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/163",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Closes #47 ",
      "createdAt": "2023-09-13T09:31:53Z",
      "updatedAt": "2023-09-13T11:03:00Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "eb74ec47f1d5515e60f97c98bf9ec25425b10ef1",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "danielfett/security-considerations",
      "headRefOid": "02f3f16e6b66fef028bc2bbec49e4d2a1683ff66",
      "closedAt": "2023-09-13T11:03:00Z",
      "mergedAt": "2023-09-13T11:03:00Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "4dee0bd93efc4ebc04b4770ca7e6f331bfab51b0"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5g0GWF",
          "commit": {
            "abbreviatedOid": "02f3f16"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-09-13T10:59:35Z",
          "updatedAt": "2023-09-13T10:59:35Z",
          "comments": []
        }
      ]
    },
    {
      "number": 164,
      "id": "PR_kwDOJbVClc5aOHP7",
      "title": "fix: added privacy considerations",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/164",
      "state": "MERGED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Added privacy considerations section from SD-JWT which provides a good foundation. Fixes #11, #48, #125",
      "createdAt": "2023-09-13T10:41:09Z",
      "updatedAt": "2023-09-21T09:26:53Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "eb74ec47f1d5515e60f97c98bf9ec25425b10ef1",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "awoie/fix-48",
      "headRefOid": "c0b2452d82c5fd67939f11c1b3068e376458f01f",
      "closedAt": "2023-09-21T09:26:53Z",
      "mergedAt": "2023-09-21T09:26:53Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "ded2a28063db979e431c9b7ac0ccef9f33dd17d2"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5g0KIz",
          "commit": {
            "abbreviatedOid": "c10e6e3"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-13T11:09:25Z",
          "updatedAt": "2023-09-13T11:09:25Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "```suggestion\r\nThe privacy considerations in Section 10.5 in [@!I-D.ietf-oauth-selective-disclosure-jwt]\r\n```",
              "createdAt": "2023-09-13T11:09:25Z",
              "updatedAt": "2023-09-13T11:09:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5g0s8Z",
          "commit": {
            "abbreviatedOid": "65a89b2"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2023-09-13T12:33:01Z",
          "updatedAt": "2023-09-13T12:40:01Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "```suggestion\r\nThe Privacy Considerations in Section 10.5 of [@!I-D.ietf-oauth-selective-disclosure-jwt]\r\napply especially to the `cnf` claim.\r\n```",
              "createdAt": "2023-09-13T12:33:01Z",
              "updatedAt": "2023-09-13T12:40:01Z"
            },
            {
              "originalPosition": 18,
              "body": "```suggestion\r\ndisclosure of claims of a given SD-JWT VC, the `type` claim is not selectively disclosable.\r\n```",
              "createdAt": "2023-09-13T12:34:20Z",
              "updatedAt": "2023-09-13T12:40:01Z"
            },
            {
              "originalPosition": 21,
              "body": "```suggestion\r\nIn general, Issuers are advised to choose `type` values following data minimization principles.\r\n```",
              "createdAt": "2023-09-13T12:34:37Z",
              "updatedAt": "2023-09-13T12:40:01Z"
            },
            {
              "originalPosition": 22,
              "body": "```suggestion\r\nFor example, government Issuers issuing an SD-JWT VC to their citizens to enable them to prove their age,\r\n```",
              "createdAt": "2023-09-13T12:34:58Z",
              "updatedAt": "2023-09-13T12:40:01Z"
            },
            {
              "originalPosition": 25,
              "body": "I'm not sure if this can be our general recommendation. It would mean that a digital citizenship credential can never be used for age verification. It would be better to argue that a certain level of leakage may be acceptable (e.g., country of residence), but other details should never leak.",
              "createdAt": "2023-09-13T12:37:14Z",
              "updatedAt": "2023-09-13T12:40:01Z"
            },
            {
              "originalPosition": 28,
              "body": "```suggestion\r\nAdditionally, Holders have to be informed that, besides the actual requested claims, the\r\n`type` information is shared with the Verifier.\r\n```",
              "createdAt": "2023-09-13T12:37:38Z",
              "updatedAt": "2023-09-13T12:40:01Z"
            },
            {
              "originalPosition": 41,
              "body": "```suggestion\r\nand how often the SD-JWT VC was used.\r\n```",
              "createdAt": "2023-09-13T12:38:24Z",
              "updatedAt": "2023-09-13T12:40:01Z"
            },
            {
              "originalPosition": 46,
              "body": "```suggestion\r\nVerifiers are advised to establish trust in an SD-JWT VC by pinning specific Issuer identifiers\r\nand should monitor suspicious behaviour such as frequently rotating Issuer identifiers.\r\nIf such behaviour was detected, Verifiers are advised to reject SD-JWT VCs issued by such\r\nIssuers.\r\n```\r\nWhat does pinning mean here?\r\nAnd should the should be a SHOULD?",
              "createdAt": "2023-09-13T12:39:20Z",
              "updatedAt": "2023-09-13T12:40:01Z"
            },
            {
              "originalPosition": 48,
              "body": "```suggestion\r\nHolders are advised to reject SD-JWT VCs if they contain easily correlatable information\r\n```",
              "createdAt": "2023-09-13T12:39:51Z",
              "updatedAt": "2023-09-13T12:40:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5hfAAa",
          "commit": {
            "abbreviatedOid": "750067d"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-20T12:27:24Z",
          "updatedAt": "2023-09-20T12:27:24Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "Well, this means that an issuer should not call their credential type \"CitizenOfUtopiaCredential\" and instead just call it \"CitizenCredential\".",
              "createdAt": "2023-09-20T12:27:24Z",
              "updatedAt": "2023-09-20T12:27:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5hfB1C",
          "commit": {
            "abbreviatedOid": "750067d"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-20T12:31:13Z",
          "updatedAt": "2023-09-20T12:31:13Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "i updated the PR to make it a bit less strict.",
              "createdAt": "2023-09-20T12:31:13Z",
              "updatedAt": "2023-09-20T12:31:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5hmCFP",
          "commit": {
            "abbreviatedOid": "21418ea"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-21T09:25:30Z",
          "updatedAt": "2023-09-21T09:25:30Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "```suggestion\r\nmight consider using a `type` value that does not allow third-parties to infer additional personal information\r\nabout the Holder, e.g., country of residency or citizenship.\r\n```",
              "createdAt": "2023-09-21T09:25:30Z",
              "updatedAt": "2023-09-21T09:25:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5hmCYJ",
          "commit": {
            "abbreviatedOid": "c0b2452"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-09-21T09:26:03Z",
          "updatedAt": "2023-09-21T09:26:03Z",
          "comments": []
        }
      ]
    },
    {
      "number": 165,
      "id": "PR_kwDOJbVClc5aOmon",
      "title": "Fix repo URL for library",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/165",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "It was outdated.",
      "createdAt": "2023-09-13T12:12:19Z",
      "updatedAt": "2023-09-13T12:19:00Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "4dee0bd93efc4ebc04b4770ca7e6f331bfab51b0",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "danielfett/fix-library-url",
      "headRefOid": "041cd567e8d157f1f885aeb11a804dcf6fb9df8d",
      "closedAt": "2023-09-13T12:19:00Z",
      "mergedAt": "2023-09-13T12:19:00Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "4065c7da82ea9d0fb32ae1d3de8d7913f1da6efd"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5g0mCA",
          "commit": {
            "abbreviatedOid": "041cd56"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-09-13T12:18:36Z",
          "updatedAt": "2023-09-13T12:18:36Z",
          "comments": []
        }
      ]
    },
    {
      "number": 166,
      "id": "PR_kwDOJbVClc5aOooL",
      "title": "fix: fixes broken links in README.md",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/166",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes broken links in README.md",
      "createdAt": "2023-09-13T12:17:54Z",
      "updatedAt": "2023-09-13T12:24:39Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "4dee0bd93efc4ebc04b4770ca7e6f331bfab51b0",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "awoe/fix-links",
      "headRefOid": "f44b02bb7ec35f3735c45986b6e83236c56681ef",
      "closedAt": "2023-09-13T12:24:39Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 167,
      "id": "PR_kwDOJbVClc5aOtDF",
      "title": "Add extra header parameter 'kid'",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/167",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Closes Issue #99.",
      "createdAt": "2023-09-13T12:29:50Z",
      "updatedAt": "2023-09-20T07:43:38Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "744ba5eae2918bb0d3adb058d7eb0179b3aa04eb",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "danielfett/fix-99",
      "headRefOid": "163483536eada48d9d6abd8d5bab7eca15a406f3",
      "closedAt": "2023-09-20T07:43:38Z",
      "mergedAt": "2023-09-20T07:43:37Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "156c9953d776a31044a0468d967122e839bf5e6a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5g8FbG",
          "commit": {
            "abbreviatedOid": "1634835"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "cannot confirm that it works but lgtm.",
          "createdAt": "2023-09-14T08:46:59Z",
          "updatedAt": "2023-09-14T08:46:59Z",
          "comments": []
        }
      ]
    },
    {
      "number": 169,
      "id": "PR_kwDOJbVClc5a3ieE",
      "title": "fix: removed recommendation to use jwks_uri over jwks",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/169",
      "state": "MERGED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #125 ",
      "createdAt": "2023-09-21T09:50:54Z",
      "updatedAt": "2023-09-21T09:54:03Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "ded2a28063db979e431c9b7ac0ccef9f33dd17d2",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "awoie/fix-125",
      "headRefOid": "28d5321300675143290bfe074ea9c9fdc2450bd0",
      "closedAt": "2023-09-21T09:54:02Z",
      "mergedAt": "2023-09-21T09:54:02Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "a8193ae7bb17b4b8679561eb4b64cfb8d78a7dbc"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5hmPkl",
          "commit": {
            "abbreviatedOid": "28d5321"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-09-21T09:53:24Z",
          "updatedAt": "2023-09-21T09:53:24Z",
          "comments": []
        }
      ]
    },
    {
      "number": 170,
      "id": "PR_kwDOJbVClc5bg-uE",
      "title": "Adding examples for ARF/mDL, fixes #144",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/170",
      "state": "CLOSED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "DO NOT MERGE"
      ],
      "body": "This adds the examples previously provided for SD-JWT to this specification, with minor adaptions.\r\n\r\nSee rendered text here: https://drafts.oauth.net/oauth-sd-jwt-vc/danielfett/arf-examples/draft-ietf-oauth-sd-jwt-vc.html#name-examples-2\r\n\r\nFixes #144 ",
      "createdAt": "2023-09-29T08:42:55Z",
      "updatedAt": "2024-02-27T18:06:44Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "a8193ae7bb17b4b8679561eb4b64cfb8d78a7dbc",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "danielfett/arf-examples",
      "headRefOid": "847a627f01c313d5424920abd1dc141338d1f151",
      "closedAt": "2024-02-27T18:06:44Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "peacekeeper",
          "authorAssociation": "NONE",
          "body": "Thank you for your efforts on this. Please allow some time for participants from the EBSI community to review this.",
          "createdAt": "2023-10-14T10:41:35Z",
          "updatedAt": "2023-10-14T10:41:35Z"
        },
        {
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "body": "Fyi: To my knowledge, the examples will be split into separate PRs and will undergo some changes",
          "createdAt": "2023-10-14T20:53:56Z",
          "updatedAt": "2023-10-14T20:53:56Z"
        },
        {
          "author": "peacekeeper",
          "authorAssociation": "NONE",
          "body": "In all the SD-JWT VC work, why does it sometimes use \"credentialSubject\" from the VCDM, and sometimes not?",
          "createdAt": "2023-10-16T11:45:05Z",
          "updatedAt": "2023-10-16T11:45:05Z"
        },
        {
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "body": "In my opinion, examples with credentialSubject are deprecated",
          "createdAt": "2023-10-16T11:57:43Z",
          "updatedAt": "2023-10-16T11:57:43Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "> Fyi: To my knowledge, the examples will be split into separate PRs and will undergo some changes\r\n\r\nYes, those examples will undergo some changes.",
          "createdAt": "2023-10-16T12:01:11Z",
          "updatedAt": "2023-10-16T12:01:11Z"
        },
        {
          "author": "peacekeeper",
          "authorAssociation": "NONE",
          "body": "So this means that by now, compatibility of SD-JWT VC with VCDM has been completely abandoned, right? At this point, we're faced not only with different proof formats, but also completely different data models.",
          "createdAt": "2023-10-16T12:08:17Z",
          "updatedAt": "2023-10-16T12:08:17Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Note: I changed this PR from \"ready\" to \"draft\" since we identified various problems in the examples, some of which were created quite a while ago. Further discussions and modifications are needed.",
          "createdAt": "2023-10-19T14:36:02Z",
          "updatedAt": "2023-10-19T14:36:02Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "As discussed, separate PRs will be created for the examples.",
          "createdAt": "2024-02-27T18:06:44Z",
          "updatedAt": "2024-02-27T18:06:44Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5iXsSB",
          "commit": {
            "abbreviatedOid": "3f91c50"
          },
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2023-09-29T09:10:23Z",
          "updatedAt": "2023-09-29T09:16:39Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\n  !sd given_name: Erika\r\n```",
              "createdAt": "2023-09-29T09:10:24Z",
              "updatedAt": "2023-09-29T09:16:39Z"
            },
            {
              "originalPosition": 9,
              "body": "Why are these not using iat, exp?",
              "createdAt": "2023-09-29T09:12:54Z",
              "updatedAt": "2023-09-29T09:16:39Z"
            },
            {
              "originalPosition": 8,
              "body": "Whats the use of credentialSubject here?",
              "createdAt": "2023-09-29T09:14:41Z",
              "updatedAt": "2023-09-29T09:16:39Z"
            },
            {
              "originalPosition": 2,
              "body": "I expect this to be the equievalent of cnf for claim-based binding. This should be a standardized claim in the spec imo.",
              "createdAt": "2023-09-29T09:15:43Z",
              "updatedAt": "2023-09-29T09:16:39Z"
            },
            {
              "originalPosition": 7,
              "body": "```suggestion\r\n      birth_date: '1973-01-01'\r\n      family_name: Mustermann\r\n      given_name: Erika\r\n```",
              "createdAt": "2023-09-29T09:16:27Z",
              "updatedAt": "2023-09-29T09:16:39Z"
            }
          ]
        }
      ]
    },
    {
      "number": 172,
      "id": "PR_kwDOJbVClc5dHcuj",
      "title": "Add proper typ header to examples",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/172",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-10-18T09:24:00Z",
      "updatedAt": "2023-10-19T08:32:27Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "a8193ae7bb17b4b8679561eb4b64cfb8d78a7dbc",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "danielfett/fix-typ-header",
      "headRefOid": "b47a6ae069597a7d51f002e619357ad634b84d2c",
      "closedAt": "2023-10-19T08:32:26Z",
      "mergedAt": "2023-10-19T08:32:26Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "b63bfbef616bef1948ea3d5b114663f8a9ded201"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5kjWRU",
          "commit": {
            "abbreviatedOid": "b47a6ae"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-19T08:02:59Z",
          "updatedAt": "2023-10-19T08:02:59Z",
          "comments": []
        }
      ]
    },
    {
      "number": 173,
      "id": "PR_kwDOJbVClc5dHi3N",
      "title": "Introduce rules for type identifiers",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/173",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "- Type identifiers MUST be collision-resistant names as defined in RFC7515\r\n- Changed the example to a URI",
      "createdAt": "2023-10-18T09:38:02Z",
      "updatedAt": "2023-10-19T08:31:54Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "a8193ae7bb17b4b8679561eb4b64cfb8d78a7dbc",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "danielfett/fix-171",
      "headRefOid": "1aa84df5da27a13166cd35eee9689564068b00e5",
      "closedAt": "2023-10-19T08:31:54Z",
      "mergedAt": "2023-10-19T08:31:54Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "ae2f842a0efc32e4e98c43e54cd55306c67a1b33"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5kby1p",
          "commit": {
            "abbreviatedOid": "aad6523"
          },
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-18T12:57:27Z",
          "updatedAt": "2023-10-18T12:57:27Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5ke7rb",
          "commit": {
            "abbreviatedOid": "aad6523"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-18T18:27:39Z",
          "updatedAt": "2023-10-18T18:27:39Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "I know it's not normative but the example elsewhere in the document uses all the same claims (and was the same type value) and has them all selectively disclosable. It'd be good to not give the impression of contradictory type definition even if it's not a real definition. \r\n\r\n```suggestion\r\nFor example, a type `https://credentials.example.com/identity_credential` can be associated with rules that define that at least the registered JWT claims `given_name`, `family_name`, `birthdate`, and `address` must appear in the Unsecured Payload. Additionally, the registered JWT claims `email` and `phone_number`, and the private claims `is_over_18`, `is_over_21`, and `is_over_65` may be used. The type might also indicate that any of the aforementioned claims can be selectively disclosable.\r\n```",
              "createdAt": "2023-10-18T18:27:39Z",
              "updatedAt": "2023-10-18T18:27:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5kfEuG",
          "commit": {
            "abbreviatedOid": "aad6523"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-18T18:50:59Z",
          "updatedAt": "2023-10-18T18:51:00Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "Also, kinda related, the generated example(s) currently still have `type: IdentityCredential` (at [this yml](https://github.com/oauth-wg/oauth-sd-jwt-vc/blob/danielfett/fix-171/examples/01/specification.yml#L2) and [this other yml](https://github.com/oauth-wg/oauth-sd-jwt-vc/blob/danielfett/fix-171/examples/02/specification.yml#L4)) which of course isn't a Collision-Resistant Name.  Should probably update those to `https://credentials.example.com/identity_credential` to line up with the examples given in text and align with the requirement of being a Collision-Resistant Name.",
              "createdAt": "2023-10-18T18:50:59Z",
              "updatedAt": "2023-10-18T20:28:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5kjXEa",
          "commit": {
            "abbreviatedOid": "aad6523"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-19T08:04:47Z",
          "updatedAt": "2023-10-19T08:04:47Z",
          "comments": []
        }
      ]
    },
    {
      "number": 174,
      "id": "PR_kwDOJbVClc5dd26J",
      "title": "Rename 'type' to 'vct'",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/174",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "This PR renames the claim `type` to `dct`, as per the discussion in #130 ",
      "createdAt": "2023-10-22T15:19:13Z",
      "updatedAt": "2023-10-23T16:28:14Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "82a9401e65b8f115d15d0e8435940976a3b96655",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "danielfett/fix-130",
      "headRefOid": "43561b93587e8446e3c3d7433673e5eec6f4dbb5",
      "closedAt": "2023-10-23T16:28:14Z",
      "mergedAt": "2023-10-23T16:28:14Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "c7049b708feddff122186b58b85dab57503da631"
      },
      "comments": [
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I oppose against this change. I suggest to use 'vct' instead.",
          "createdAt": "2023-10-22T16:14:35Z",
          "updatedAt": "2023-10-22T16:14:35Z"
        },
        {
          "author": "selfissued",
          "authorAssociation": "NONE",
          "body": "I'm good with `vct`.\r\n\r\nFor the record, I think it's important to move away from `type`, because https://www.w3.org/TR/vc-data-model/ uses the claim name, but with a different syntax.  Keeping the naming conflict will inevitably lead to grief.",
          "createdAt": "2023-10-22T16:43:23Z",
          "updatedAt": "2023-10-22T16:43:23Z"
        },
        {
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "body": "Naming is hard. Regarding dct: isn't it obvious for an internet standard that we refer to digital credentials? ",
          "createdAt": "2023-10-22T18:25:58Z",
          "updatedAt": "2023-10-22T18:25:58Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Neither dct nor vct are intuitive for me, so I am pretty unsure. \n\nBut between dct and vct, I would prefer dct. A term Verifiable credentials got enough feedback that it has strong too strong of an association to W3C VC-DATA-MODEL. And Digital credentials seems to be a term that is acceptable to generalize.",
          "createdAt": "2023-10-22T22:24:37Z",
          "updatedAt": "2023-10-22T22:24:37Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "> Neither dct nor vct are intuitive for me, so I am pretty unsure.\r\n> \r\n> But between dct and vct, I would prefer dct. A term Verifiable credentials got enough feedback that it has strong too strong of an association to W3C VC-DATA-MODEL. And Digital credentials seems to be a term that is acceptable to generalize.\r\n\r\nWhy is \"Verifiable Credential Type\" (vct) not intuitive to you? This would match the current definition of `type`. Isn't this what this claim is about? That is why I'm actually in favor of `vct` over `dct`, `dty`.",
          "createdAt": "2023-10-22T22:30:15Z",
          "updatedAt": "2023-10-22T22:30:15Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "I meant that abbreviations are not intuitive to me.\n\nAnd \"type\" is a pretty JSON-LD specific construct AFAIK so I was hoping we could have a deeper discussion on whether it should be called \"claimset\" or something. If we are to move away from \"type\" claim name.\n\non dct and vct, as I explained, I prefer something that is not associated to W3C VCDM and digital credentials seems to be pretty well understood.\n\n\n",
          "createdAt": "2023-10-22T22:38:16Z",
          "updatedAt": "2023-10-22T22:38:16Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "If the color of the bikeshed is still open for debate, how about just `ct` for credential type? ",
          "createdAt": "2023-10-23T01:10:10Z",
          "updatedAt": "2023-10-23T01:10:10Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "> If the color of the bikeshed is still open for debate, how about just `ct` for credential type?\r\n\r\nI like 3-letter-names more than 2-letter-names for some reason. Also, `vct` is more accurate since the spec is about SD-JWT VCs => Verifiable Credentials. I'd be still in favor of `vct` for that reason.",
          "createdAt": "2023-10-23T08:57:02Z",
          "updatedAt": "2023-10-23T08:57:02Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "`vct` is fine for me. Updated the PR accordingly.",
          "createdAt": "2023-10-23T14:44:43Z",
          "updatedAt": "2023-10-23T14:44:43Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "`vct` is fine for me too. `ct` was just an off-hand idea ",
          "createdAt": "2023-10-23T14:55:09Z",
          "updatedAt": "2023-10-23T14:55:09Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Merging this PR since a lot of approvals. We will have a larger conversation on what is inferred by the `vct` value in a separate issue.",
          "createdAt": "2023-10-23T16:28:09Z",
          "updatedAt": "2023-10-23T16:28:09Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5k0ZDU",
          "commit": {
            "abbreviatedOid": "fe58f05"
          },
          "author": "selfissued",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "This is an improvement.",
          "createdAt": "2023-10-22T15:55:09Z",
          "updatedAt": "2023-10-22T15:55:09Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5k0ZH9",
          "commit": {
            "abbreviatedOid": "fe58f05"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-22T15:57:53Z",
          "updatedAt": "2023-10-22T15:57:53Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5k0ZIG",
          "commit": {
            "abbreviatedOid": "fe58f05"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "We had a good discussion on that already and discussed several options. `vct` would be my favorite option.",
          "createdAt": "2023-10-22T15:57:57Z",
          "updatedAt": "2023-10-22T22:34:30Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5k0Zwc",
          "commit": {
            "abbreviatedOid": "fe58f05"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "I suggest to use 'vct'.",
          "createdAt": "2023-10-22T16:18:16Z",
          "updatedAt": "2023-10-22T16:18:16Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5k0cil",
          "commit": {
            "abbreviatedOid": "fe58f05"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "I'm actually also in favor of `vct`.",
          "createdAt": "2023-10-22T17:50:41Z",
          "updatedAt": "2023-10-22T17:50:41Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5k5lWd",
          "commit": {
            "abbreviatedOid": "43561b9"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM. We should address @Sakurann concern in a separate issue.",
          "createdAt": "2023-10-23T15:03:47Z",
          "updatedAt": "2023-10-23T15:03:47Z",
          "comments": []
        }
      ]
    },
    {
      "number": 175,
      "id": "PR_kwDOJbVClc5deRN2",
      "title": "Add normative text to verification and processing section to verify public key",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/175",
      "state": "MERGED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This PR does the following:\r\n- make verification that the public key of the Issuer-signed JWT belongs to the Issuer mandatory\r\n- introduce methods to perform this verification based on JWT Issuer Metadata, X.509 Certificates and DIDs\r\n\r\nPotentially fixes #168, #143. Partially #134 \r\n\r\nOut-of-scope:\r\n- Renaming and moving JWT Issuer Metadata Section",
      "createdAt": "2023-10-22T22:15:39Z",
      "updatedAt": "2023-10-23T16:38:23Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "c7049b708feddff122186b58b85dab57503da631",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "awoie/fix-168",
      "headRefOid": "7efd8b0af2c190280618fe0c6ecfa9612933e40c",
      "closedAt": "2023-10-23T16:38:22Z",
      "mergedAt": "2023-10-23T16:38:22Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "d4ab777c20dbab20857bb61e7c082d18b8240f90"
      },
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Addressed all suggestions, please review again @danielfett ",
          "createdAt": "2023-10-23T15:02:36Z",
          "updatedAt": "2023-10-23T15:02:36Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "> Addressed all suggestions, please review again @danielfett\r\n\r\nI had to rename the section. I think now it is more precise.",
          "createdAt": "2023-10-23T15:52:46Z",
          "updatedAt": "2023-10-23T15:52:46Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5k2pPO",
          "commit": {
            "abbreviatedOid": "e83cc52"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-23T09:02:22Z",
          "updatedAt": "2023-10-23T09:02:23Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\nFurthermore, the recipient of the SD-JWT VC MUST verify that the public key used for\r\nverification of the Issuer-signed JWT belongs to the Issuer of the Issuer-signed JWT.\r\n```",
              "createdAt": "2023-10-23T09:02:23Z",
              "updatedAt": "2023-10-23T09:02:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5k2tO9",
          "commit": {
            "abbreviatedOid": "e83cc52"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-23T09:11:03Z",
          "updatedAt": "2023-10-23T09:11:03Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "```suggestion\r\nout of scope of this specification.\r\n```",
              "createdAt": "2023-10-23T09:11:03Z",
              "updatedAt": "2023-10-23T09:11:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5k2uFy",
          "commit": {
            "abbreviatedOid": "e83cc52"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-23T09:12:56Z",
          "updatedAt": "2023-10-23T09:12:56Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "```suggestion\r\n    - a DNS name that matches a `dNSName` Subject Alternative Name (SAN) [@RFC5280] entry of\r\n```",
              "createdAt": "2023-10-23T09:12:56Z",
              "updatedAt": "2023-10-23T09:12:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5k2uVW",
          "commit": {
            "abbreviatedOid": "e83cc52"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-23T09:13:26Z",
          "updatedAt": "2023-10-23T09:13:27Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "```suggestion\r\nthe leaf certificate, or\r\n    - a URN that matches a `unifiedResourceName` SAN entry of the leaf certificate.\r\n```",
              "createdAt": "2023-10-23T09:13:26Z",
              "updatedAt": "2023-10-23T09:13:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5k22v4",
          "commit": {
            "abbreviatedOid": "e83cc52"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-23T09:31:03Z",
          "updatedAt": "2023-10-23T09:31:04Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "Please add a reference to {#verifying-public-key-for-issuer-signed-jwts}",
              "createdAt": "2023-10-23T09:31:04Z",
              "updatedAt": "2023-10-23T09:31:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5k30oS",
          "commit": {
            "abbreviatedOid": "e83cc52"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-23T11:59:33Z",
          "updatedAt": "2023-10-23T11:59:33Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "will add that reference",
              "createdAt": "2023-10-23T11:59:33Z",
              "updatedAt": "2023-10-23T11:59:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5k49jR",
          "commit": {
            "abbreviatedOid": "a246437"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-23T14:00:43Z",
          "updatedAt": "2023-10-23T14:00:43Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "```suggestion\r\n- JWT Issuer Metadata: If the `iss` value contains an HTTPS URI, the recipient MUST\r\nobtain the public key using JWT Issuer Metadata as defined in (#jwt-issuer-metadata).\r\n```",
              "createdAt": "2023-10-23T14:00:43Z",
              "updatedAt": "2023-10-23T14:00:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5k5DOn",
          "commit": {
            "abbreviatedOid": "0037484"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "found a typo",
          "createdAt": "2023-10-23T14:09:28Z",
          "updatedAt": "2023-10-23T14:10:08Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "```suggestion\r\n    - If the `iss` value contains a DNS name encoded as a URI using the DNS URI scheme [@RFC4501]. The DNS name MUST match a `dNSName` Subject Alternative Name (SAN) [@RFC5280] entry of the leaf certificate.\r\n```",
              "createdAt": "2023-10-23T14:09:28Z",
              "updatedAt": "2023-10-23T14:09:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5k4-wp",
          "commit": {
            "abbreviatedOid": "a246437"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2023-10-23T14:02:49Z",
          "updatedAt": "2023-10-23T14:14:15Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "```suggestion\r\n    - If the `iss` value contains a DNS name encoded as a URI using the DNS URI scheme [@RFC4501]. In this case, the DNS name MUST match a `dNSName` Subject Alternative Name (SAN) [@RFC5280] entry of the leaf certificate.\r\n```",
              "createdAt": "2023-10-23T14:02:49Z",
              "updatedAt": "2023-10-23T14:14:15Z"
            },
            {
              "originalPosition": 32,
              "body": "```suggestion\r\n    - If the `iss` value contains a URN using the URN URI scheme [@RFC2141]. In this case, the URN MUST match a `unifiedResourceName` SAN entry of the leaf certificate.\r\n```",
              "createdAt": "2023-10-23T14:03:27Z",
              "updatedAt": "2023-10-23T14:14:15Z"
            },
            {
              "originalPosition": 21,
              "body": "```suggestion\r\nA recipient of the SD-JWT VC MUST use the first applying strategy of the following list to verify the\r\nIssuer-signed JWT corresponds to the Issuer:\r\n```",
              "createdAt": "2023-10-23T14:05:23Z",
              "updatedAt": "2023-10-23T14:14:15Z"
            },
            {
              "originalPosition": 35,
              "body": "```suggestion\r\nSeparate specifications or ecosystem regulations MAY define rules substituting or complementing the rules defined above, but such rules are\r\nout of scope of this specification. See (#ecosystem-verification-rules) for security considerations.\r\n```",
              "createdAt": "2023-10-23T14:09:20Z",
              "updatedAt": "2023-10-23T14:14:15Z"
            },
            {
              "originalPosition": 44,
              "body": "```suggestion\r\n## Ecosystem-specific Public Key Verification Methods {#ecosystem-verification-rules}\r\n```",
              "createdAt": "2023-10-23T14:09:44Z",
              "updatedAt": "2023-10-23T14:14:15Z"
            },
            {
              "originalPosition": 53,
              "body": "```suggestion\r\nIt MUST be ensured that for any given `iss` value, an attacker cannot influence what\r\nkind of verification process is used. Otherwise, an attacker could attempt to\r\nhave the verifier use a verification process that was not intended by the Issuer\r\nand where the attacker may have the opportunity to influcence the verification result\r\nto his advantage.\r\n```",
              "createdAt": "2023-10-23T14:14:06Z",
              "updatedAt": "2023-10-23T14:14:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5k5H_s",
          "commit": {
            "abbreviatedOid": "79bc8b8"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "we will have to improve rule for x509 certs",
          "createdAt": "2023-10-23T14:17:55Z",
          "updatedAt": "2023-10-23T14:18:46Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "```suggestion\r\n- X.509 Certificates: If the `x5c`, `x5c`, or `x5t` JWT header parameters are present, the recipient MUST obtain the public key from the leaf X.509 certificate defined by of the Issuer-signed JWT and validate the X.509 certificate chain in the following cases:\r\n```",
              "createdAt": "2023-10-23T14:17:55Z",
              "updatedAt": "2023-10-23T14:18:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5k5LY5",
          "commit": {
            "abbreviatedOid": "a246437"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-23T14:23:59Z",
          "updatedAt": "2023-10-23T14:24:00Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "Why is first applying needed. the options are mutually exclusive, aren't they?",
              "createdAt": "2023-10-23T14:23:59Z",
              "updatedAt": "2023-10-23T14:24:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5k5MjR",
          "commit": {
            "abbreviatedOid": "0e10d7f"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-23T14:25:37Z",
          "updatedAt": "2023-10-23T14:25:38Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "Correct, I retract my proposal :-)",
              "createdAt": "2023-10-23T14:25:37Z",
              "updatedAt": "2023-10-23T14:25:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5k5Yp-",
          "commit": {
            "abbreviatedOid": "a246437"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-23T14:44:33Z",
          "updatedAt": "2023-10-23T14:44:33Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "I would disagree with this. I don't think that ecosystems should introduce breaking changes. They MAY add rules on top of what was defined. Additionally, it is always a verifier decision whether or not a public key verification method is acceptable. This is a policy decision. Therefore I would keep the language. Does this make sense?",
              "createdAt": "2023-10-23T14:44:33Z",
              "updatedAt": "2023-10-23T14:44:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5k5ZD_",
          "commit": {
            "abbreviatedOid": "a246437"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-23T14:45:18Z",
          "updatedAt": "2023-10-23T14:45:18Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "The current text does not mean that verifiers have to blindly accept SD-JWT VCs with specific verification methods if it is against their policy.",
              "createdAt": "2023-10-23T14:45:18Z",
              "updatedAt": "2023-10-23T14:45:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5k5ajq",
          "commit": {
            "abbreviatedOid": "a246437"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-23T14:47:48Z",
          "updatedAt": "2023-10-23T14:47:49Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "Adjusted language accordingly.",
              "createdAt": "2023-10-23T14:47:48Z",
              "updatedAt": "2023-10-23T14:47:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5k5a4P",
          "commit": {
            "abbreviatedOid": "d1d5d35"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-23T14:48:18Z",
          "updatedAt": "2023-10-23T14:48:18Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "I'm fine with removing the \"substituting or\" part. I don't think we should keep the \"MAY be used\" part in the original text as it opens to door quite a bit too wide.",
              "createdAt": "2023-10-23T14:48:18Z",
              "updatedAt": "2023-10-23T14:48:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5k5fsF",
          "commit": {
            "abbreviatedOid": "a246437"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-23T14:54:11Z",
          "updatedAt": "2023-10-23T14:54:11Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "Accepted",
              "createdAt": "2023-10-23T14:54:11Z",
              "updatedAt": "2023-10-23T14:54:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5k5gJO",
          "commit": {
            "abbreviatedOid": "a246437"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-23T14:55:01Z",
          "updatedAt": "2023-10-23T14:55:01Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "Sounds good. I'll adjust the text.",
              "createdAt": "2023-10-23T14:55:01Z",
              "updatedAt": "2023-10-23T14:55:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5k5h-3",
          "commit": {
            "abbreviatedOid": "a246437"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-23T14:58:04Z",
          "updatedAt": "2023-10-23T14:58:04Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "I updated the PR",
              "createdAt": "2023-10-23T14:58:04Z",
              "updatedAt": "2023-10-23T14:58:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5k5jor",
          "commit": {
            "abbreviatedOid": "a246437"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-23T15:00:34Z",
          "updatedAt": "2023-10-23T15:00:35Z",
          "comments": [
            {
              "originalPosition": 53,
              "body": "How about...\r\n\r\n```\r\nIt MUST be ensured that for any given `iss` value, an attacker cannot influence the type of verification process used. Otherwise, an attacker could attempt to make the Verifier use a verification process not intended by the Issuer, allowing the attacker to potentially manipulate the verification result to their advantage.\r\n```",
              "createdAt": "2023-10-23T15:00:35Z",
              "updatedAt": "2023-10-23T15:00:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5k5kTP",
          "commit": {
            "abbreviatedOid": "a246437"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-23T15:01:48Z",
          "updatedAt": "2023-10-23T15:01:49Z",
          "comments": [
            {
              "originalPosition": 53,
              "body": "I used my suggested language in the updated PR.",
              "createdAt": "2023-10-23T15:01:49Z",
              "updatedAt": "2023-10-23T15:01:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5k6QNf",
          "commit": {
            "abbreviatedOid": "e4f2acb"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-23T16:24:02Z",
          "updatedAt": "2023-10-23T16:25:30Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\nFurthermore, the recipient of the SD-JWT VC MUST obtain the public verification key\r\nfor the Issuer-signed JWT as defined in (#public-key-discovery-for-issuer-signed-jwts).\r\n```",
              "createdAt": "2023-10-23T16:24:03Z",
              "updatedAt": "2023-10-23T16:25:30Z"
            },
            {
              "originalPosition": 20,
              "body": "```suggestion\r\nA recipient of an SD-JWT VC MUST apply the following rules to obtain the public\r\nverification key for the Issuer-signed JWT:\r\n\r\n```",
              "createdAt": "2023-10-23T16:24:21Z",
              "updatedAt": "2023-10-23T16:25:30Z"
            }
          ]
        }
      ]
    },
    {
      "number": 176,
      "id": "PR_kwDOJbVClc5deRtV",
      "title": "Editorial normative verb change for JWK in cnf",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/176",
      "state": "MERGED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This PR changes SHOULD to RECOMMENDED for JWK in `cnf`. Potentially fixes #134 ",
      "createdAt": "2023-10-22T22:23:52Z",
      "updatedAt": "2023-10-23T13:59:40Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "b63bfbef616bef1948ea3d5b114663f8a9ded201",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "awoie/fix-134",
      "headRefOid": "80f4e0363e7602676c61c99a91b528a2afa49f3b",
      "closedAt": "2023-10-23T13:59:40Z",
      "mergedAt": "2023-10-23T13:59:40Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "82000350457a32245a9f4fd2e409a09a7471c43d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5k22P1",
          "commit": {
            "abbreviatedOid": "d4f06f9"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-23T09:30:15Z",
          "updatedAt": "2023-10-23T09:30:16Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\n    * REQUIRED when Cryptographic Key Binding is to be supported. Contains the confirmation method as defined in [@!RFC7800]. It is RECOMMENDED that this contains a JWK as defined in Section 3.2 of [@!RFC7800]. For Cryptographic Key Binding, the Key Binding JWT in the Combined Format for Presentation MUST be signed by the key identified in this claim.\r\n```",
              "createdAt": "2023-10-23T09:30:16Z",
              "updatedAt": "2023-10-23T09:30:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5k48v0",
          "commit": {
            "abbreviatedOid": "80f4e03"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-23T13:59:17Z",
          "updatedAt": "2023-10-23T13:59:17Z",
          "comments": []
        }
      ]
    },
    {
      "number": 177,
      "id": "PR_kwDOJbVClc5diZ2A",
      "title": " Fix Issue #159 by removing duplicated requirements from SD-JWT ",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/177",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "This fixes Issue #159.\r\n\r\nNote that this removed the \"exp\" claim which I think we don't need to mention explicitly.",
      "createdAt": "2023-10-23T14:24:04Z",
      "updatedAt": "2023-10-23T14:41:04Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "82000350457a32245a9f4fd2e409a09a7471c43d",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "danielfett/fix-159",
      "headRefOid": "21409828f4505cef2e0c9353f6ade3baf082852d",
      "closedAt": "2023-10-23T14:41:04Z",
      "mergedAt": "2023-10-23T14:41:04Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "82a9401e65b8f115d15d0e8435940976a3b96655"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5k5WIT",
          "commit": {
            "abbreviatedOid": "2140982"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2023-10-23T14:40:16Z",
          "updatedAt": "2023-10-23T14:40:16Z",
          "comments": []
        }
      ]
    },
    {
      "number": 178,
      "id": "PR_kwDOJbVClc5djSws",
      "title": "Fix SD-JWT section references",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/178",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-10-23T16:32:35Z",
      "updatedAt": "2023-10-23T16:44:10Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "c7049b708feddff122186b58b85dab57503da631",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "danielfett/kb-jwt-section-number",
      "headRefOid": "49906c0349f0c723316d268b77504a5814e9ae29",
      "closedAt": "2023-10-23T16:44:10Z",
      "mergedAt": "2023-10-23T16:44:10Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "06416299ec911ee158af6d2e861bc9d6584e459f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5k6ZnT",
          "commit": {
            "abbreviatedOid": "49906c0"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "lgtm",
          "createdAt": "2023-10-23T16:43:57Z",
          "updatedAt": "2023-10-23T16:43:57Z",
          "comments": []
        }
      ]
    },
    {
      "number": 179,
      "id": "PR_kwDOJbVClc5djVaQ",
      "title": "Add DID reference",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/179",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-10-23T16:39:37Z",
      "updatedAt": "2023-10-23T16:49:49Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "d4ab777c20dbab20857bb61e7c082d18b8240f90",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "danielfett/add-reference-did",
      "headRefOid": "8e8d11ce68deae8ead14506e6edb3cde6f63b586",
      "closedAt": "2023-10-23T16:49:49Z",
      "mergedAt": "2023-10-23T16:49:49Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "a94ee54fb2eacbaa6ce61d66c9387eb99a7d74c2"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5k6cUq",
          "commit": {
            "abbreviatedOid": "8e8d11c"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "lgtm",
          "createdAt": "2023-10-23T16:49:15Z",
          "updatedAt": "2023-10-23T16:49:15Z",
          "comments": []
        }
      ]
    },
    {
      "number": 180,
      "id": "PR_kwDOJbVClc5drQu1",
      "title": "Fixed examples to use vct claim",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/180",
      "state": "MERGED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixed examples to use vct claim",
      "createdAt": "2023-10-24T19:20:12Z",
      "updatedAt": "2023-10-24T19:39:26Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "a94ee54fb2eacbaa6ce61d66c9387eb99a7d74c2",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "awoie/fix-editorial",
      "headRefOid": "e7abe645b7519395e6a3be03f093e7767fc8bbc8",
      "closedAt": "2023-10-24T19:39:26Z",
      "mergedAt": "2023-10-24T19:39:26Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "308ba013b885b7a98f5af0d3d1e936670a071d96"
      },
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Thanks for the PR, I must have missed this change.",
          "createdAt": "2023-10-24T19:22:51Z",
          "updatedAt": "2023-10-24T19:22:51Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5lEp-D",
          "commit": {
            "abbreviatedOid": "e7abe64"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-24T19:22:32Z",
          "updatedAt": "2023-10-24T19:22:32Z",
          "comments": []
        }
      ]
    },
    {
      "number": 183,
      "id": "PR_kwDOJbVClc5ehRQk",
      "title": "Fixed obtaining verification key rules",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/183",
      "state": "MERGED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This PR introduces the following changes:\r\n- Fixes #182\r\n- Fixes #185\r\n- Fixed `uniformResourceIdentifier` SAN Extension rule\r\n- Removed all options for X509 except `x5c`\r\n",
      "createdAt": "2023-11-03T10:28:03Z",
      "updatedAt": "2023-11-29T18:21:08Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "ad26b966c854ca90c17f2a9f91a1b1579ed10540",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "awoie/fix-182",
      "headRefOid": "1f2a56b8523a44a7649ed771184c47bb0b38bf6c",
      "closedAt": "2023-11-29T18:21:08Z",
      "mergedAt": "2023-11-29T18:21:07Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "35cdbbb960a5c47159c8250f34cc1a31f94475ef"
      },
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "@bc-pi pls review again.",
          "createdAt": "2023-11-27T04:10:54Z",
          "updatedAt": "2023-11-27T04:10:54Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed merge conflicts and reconciled with PR #190 . Nothing new should have been introduced than what has been approved already. If @bc-pi or @danielfett can approve again, then we can merge imo.",
          "createdAt": "2023-11-29T00:51:00Z",
          "updatedAt": "2023-11-29T00:51:00Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5mHUE9",
          "commit": {
            "abbreviatedOid": "83f9bcb"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-03T17:19:20Z",
          "updatedAt": "2023-11-03T17:19:21Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": " AFAIK there's no unifiedResourceIdentifier in RFC5280 - it's uniformResourceIdentifier \r\n\r\n```suggestion\r\n    - In all other cases, the `iss` value MUST match a `uniformResourceIdentifier` SAN entry of the leaf certificate.\r\n```",
              "createdAt": "2023-11-03T17:19:21Z",
              "updatedAt": "2023-11-03T17:19:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5mlvjD",
          "commit": {
            "abbreviatedOid": "1afa51e"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2023-11-08T19:59:07Z",
          "updatedAt": "2023-11-08T20:53:37Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "`x5c` is repeated while presumably `x5u` was intended for one of them  ",
              "createdAt": "2023-11-08T19:59:07Z",
              "updatedAt": "2023-11-08T20:54:59Z"
            },
            {
              "originalPosition": 5,
              "body": "`x5t` and `x5t#S256` are just the hash of a certificate and presume the recipient has some way of finding the  certificate referenced. So it's a little bit awkward to talk about them like this as though they are basically the same as `x5u`/`x5c`.",
              "createdAt": "2023-11-08T20:17:05Z",
              "updatedAt": "2023-11-08T20:53:37Z"
            },
            {
              "originalPosition": 5,
              "body": "There are SSRF concerns with `x5u` too... ",
              "createdAt": "2023-11-08T20:19:31Z",
              "updatedAt": "2023-11-08T20:53:37Z"
            },
            {
              "originalPosition": 7,
              "body": "^ again ",
              "createdAt": "2023-11-08T20:19:59Z",
              "updatedAt": "2023-11-08T20:53:37Z"
            },
            {
              "originalPosition": 5,
              "body": "... so maybe fewer options would be better/appropriate? ",
              "createdAt": "2023-11-08T20:23:50Z",
              "updatedAt": "2023-11-08T20:53:37Z"
            },
            {
              "originalPosition": 8,
              "body": "IMHO DIDs can be accounted/allowed for via the \"Separate specifications or ecosystem regulations MAY define rules complementing the rules defined above\" criteria below and shouldn't receive 1st order treatment like this in the spec. ",
              "createdAt": "2023-11-08T20:27:23Z",
              "updatedAt": "2023-11-08T20:53:37Z"
            },
            {
              "originalPosition": 20,
              "body": "This sentence reads a bit funny - almost like a tautology or proverb, \"If you can't get it, you must not use it.\" Maybe something like one of these (some admittedly somewhat awkward):\r\n\r\n\"If the public verification key for the Issuer-signed JWT could not be obtained according to rules above, the recipient MUST reject the SD-JWT VC.\"\r\nor\r\n\"A recipient MUST only use a public verification key obtained according to rules above to verify the signature of an Issuer-signed JWT.\"\r\nor \r\n\"A public verification key that was not obtained according to rules above MUST not be used to verify the Issuer-signed JWT.\"",
              "createdAt": "2023-11-08T20:49:35Z",
              "updatedAt": "2023-11-08T20:53:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5mmE9T",
          "commit": {
            "abbreviatedOid": "1afa51e"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-08T20:55:08Z",
          "updatedAt": "2023-11-08T20:55:08Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "`uniformResourceIdentifier` got changed to `unifiedResourceIdentifier` again ",
              "createdAt": "2023-11-08T20:55:08Z",
              "updatedAt": "2023-11-08T20:55:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5mmjC7",
          "commit": {
            "abbreviatedOid": "1afa51e"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-08T22:25:34Z",
          "updatedAt": "2023-11-08T22:25:34Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "- `x5u` could indeed lead to some weird vulnerability if verifiers are not careful enough and don't validate the entire X509 certificate chain which includes trusting the root certificate or the certificate itself in case it is self-signed.\r\n- It is indeed the assumption that the verifier has to get the certificates out-of-band or side loaded somehow if `x5t` and `x5t#S256` are used.\r\n\r\nI added the other x5* because I thought we had used them in OpenID4VP as well but after double-checking it seems that got removed and only `x5c` is now being used there. I think it is reasonable to only include `x5c`. I'll update the PR accordingly.",
              "createdAt": "2023-11-08T22:25:34Z",
              "updatedAt": "2023-11-08T22:26:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5mmj3A",
          "commit": {
            "abbreviatedOid": "1afa51e"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-08T22:28:38Z",
          "updatedAt": "2023-11-08T22:28:38Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "We added DIDs to make the spec useful also for the credential market that uses DIDs. For those people it is required to demonstrate how that can be done. I'm wondering how other folks are thinking about dropping DIDs from getting 1st order treatment. You are right, one can create another draft that just explains how to use DIDs with this spec. ",
              "createdAt": "2023-11-08T22:28:38Z",
              "updatedAt": "2023-11-08T22:28:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5mmn1Q",
          "commit": {
            "abbreviatedOid": "1afa51e"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-08T22:43:34Z",
          "updatedAt": "2023-11-08T22:43:34Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "I think we should drop this requirement completely. It does not say much. We should instead do what is described in #185 and then it becomes obvious that \"verification and processing\" would fail if the rules cannot be successfully applied.",
              "createdAt": "2023-11-08T22:43:34Z",
              "updatedAt": "2023-11-08T22:43:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5mmn84",
          "commit": {
            "abbreviatedOid": "1afa51e"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-08T22:44:04Z",
          "updatedAt": "2023-11-08T22:44:04Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "Would this work for you @bc-pi ?",
              "createdAt": "2023-11-08T22:44:04Z",
              "updatedAt": "2023-11-08T22:44:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5mmqUs",
          "commit": {
            "abbreviatedOid": "1afa51e"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-08T22:53:48Z",
          "updatedAt": "2023-11-08T22:53:49Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\n    - In all other cases, the `iss` value MUST match a `uniformResourceIdentifier` SAN entry of the leaf certificate.\r\n```",
              "createdAt": "2023-11-08T22:53:49Z",
              "updatedAt": "2023-11-08T22:53:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5mvUfD",
          "commit": {
            "abbreviatedOid": "1afa51e"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-09T23:26:30Z",
          "updatedAt": "2023-11-09T23:26:30Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "I think so, yeah. ",
              "createdAt": "2023-11-09T23:26:30Z",
              "updatedAt": "2023-11-09T23:26:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5mvYg9",
          "commit": {
            "abbreviatedOid": "1afa51e"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-09T23:48:00Z",
          "updatedAt": "2023-11-09T23:48:01Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "Created #186 to keep track of this so we can close the discussion here. ",
              "createdAt": "2023-11-09T23:48:00Z",
              "updatedAt": "2023-11-09T23:48:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5nxgzA",
          "commit": {
            "abbreviatedOid": "1afa51e"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-21T03:19:31Z",
          "updatedAt": "2023-11-21T03:19:31Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "We are well aligned but let's tackle this in another PR.",
              "createdAt": "2023-11-21T03:19:31Z",
              "updatedAt": "2023-11-21T03:19:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5nxg2Y",
          "commit": {
            "abbreviatedOid": "1afa51e"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-21T03:19:50Z",
          "updatedAt": "2023-11-21T03:19:50Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "Great, I'll update the PR accordingly",
              "createdAt": "2023-11-21T03:19:50Z",
              "updatedAt": "2023-11-21T03:19:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5oSG1q",
          "commit": {
            "abbreviatedOid": "1afa51e"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-27T04:08:24Z",
          "updatedAt": "2023-11-27T04:08:25Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Updated the PR and now only x5c is normative.",
              "createdAt": "2023-11-27T04:08:25Z",
              "updatedAt": "2023-11-27T04:08:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5oSHD-",
          "commit": {
            "abbreviatedOid": "1afa51e"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-27T04:10:14Z",
          "updatedAt": "2023-11-27T04:10:14Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "Updated the PR, the line is now removed.",
              "createdAt": "2023-11-27T04:10:14Z",
              "updatedAt": "2023-11-27T04:10:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5ofaCg",
          "commit": {
            "abbreviatedOid": "d98378d"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-28T14:37:16Z",
          "updatedAt": "2023-11-28T14:37:17Z",
          "comments": [
            {
              "originalPosition": 57,
              "body": "need a line break or the list doesn't render as a list \r\n```suggestion\r\n-02\r\n\r\n* Finetuned rules for obtaining public verification key\r\n* Editorial changes\r\n```",
              "createdAt": "2023-11-28T14:37:16Z",
              "updatedAt": "2023-11-28T14:37:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5ofe7T",
          "commit": {
            "abbreviatedOid": "99031bd"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-28T14:44:43Z",
          "updatedAt": "2023-11-28T14:44:43Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nFurthermore, the recipient of the SD-JWT VC MUST validate that the public verification key\r\n```",
              "createdAt": "2023-11-28T14:44:43Z",
              "updatedAt": "2023-11-28T14:44:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5ofj9j",
          "commit": {
            "abbreviatedOid": "d6bc37b"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-28T14:52:56Z",
          "updatedAt": "2023-11-28T14:52:57Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "\"Then, and the\" isn't quite right... \r\n\r\n```suggestion\r\nIn this case, the recipient MUST validate the X.509 certificate chain and validate the `iss` value as follows:\r\n```",
              "createdAt": "2023-11-28T14:52:56Z",
              "updatedAt": "2023-11-28T14:58:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5ofpAd",
          "commit": {
            "abbreviatedOid": "4949ede"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Going to need to be careful with reconciling changes in #190 (need parts of both) but otherwise looks good.",
          "createdAt": "2023-11-28T15:00:53Z",
          "updatedAt": "2023-11-28T15:00:53Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5ofqAc",
          "commit": {
            "abbreviatedOid": "4949ede"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-11-28T15:02:34Z",
          "updatedAt": "2023-11-28T15:02:34Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5oqXie",
          "commit": {
            "abbreviatedOid": "1f2a56b"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-11-29T18:20:49Z",
          "updatedAt": "2023-11-29T18:20:49Z",
          "comments": []
        }
      ]
    },
    {
      "number": 187,
      "id": "PR_kwDOJbVClc5fKgIQ",
      "title": "add Brian Campbell as co-author",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/187",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-11-10T17:28:19Z",
      "updatedAt": "2023-11-21T07:54:02Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "308ba013b885b7a98f5af0d3d1e936670a071d96",
      "headRepository": "bc-pi/oauth-sd-jwt-vc",
      "headRefName": "patch-1",
      "headRefOid": "d5354e493c80774af5555dee6b34c96faacbba79",
      "closedAt": "2023-11-21T07:54:01Z",
      "mergedAt": "2023-11-21T07:54:01Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "0b3cf54f4bdbcb77a2553059ceedc4b34f3f38c1"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5m2MDK",
          "commit": {
            "abbreviatedOid": "d5354e4"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "looking forward to this!",
          "createdAt": "2023-11-10T19:24:40Z",
          "updatedAt": "2023-11-10T19:24:40Z",
          "comments": []
        }
      ]
    },
    {
      "number": 188,
      "id": "PR_kwDOJbVClc5fLO8w",
      "title": "Update CODEOWNERS",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/188",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-11-10T19:32:46Z",
      "updatedAt": "2023-11-21T07:53:42Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "308ba013b885b7a98f5af0d3d1e936670a071d96",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "bc-pi-codeowners",
      "headRefOid": "5cc04e8b3eeb7727db90508dcfe67eccd2fb161c",
      "closedAt": "2023-11-21T07:53:42Z",
      "mergedAt": "2023-11-21T07:53:42Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "c068665d407312ea7fbc537869803de0129c6667"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5m2l0a",
          "commit": {
            "abbreviatedOid": "e2a3b5c"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-10T20:34:41Z",
          "updatedAt": "2023-11-10T20:34:41Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "github says \"this CODEOWNERS file contains errors\" and \"Unknown owner on line 3: make sure a user with the email address mail@danielfett.de exists and has write access to the repository\"\r\n  \r\n```suggestion\r\ndraft-ietf-oauth-sd-jwt-vc.md oliver.terbu@spruceid.com fett@danielfett.de bcampbell@pingidentity.com\r\n```\r\n\r\n",
              "createdAt": "2023-11-10T20:34:41Z",
              "updatedAt": "2023-11-10T20:34:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5nxgcd",
          "commit": {
            "abbreviatedOid": "b7b0aa5"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2023-11-21T03:17:17Z",
          "updatedAt": "2023-11-21T03:17:28Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "```suggestion\r\ndraft-ietf-oauth-sd-jwt-vc.md oliver.terbu@mattr.global fett@danielfett.de bcampbell@pingidentity.com\r\n```",
              "createdAt": "2023-11-21T03:17:18Z",
              "updatedAt": "2023-11-21T03:17:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5nxght",
          "commit": {
            "abbreviatedOid": "4fd19b1"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "lgtm",
          "createdAt": "2023-11-21T03:17:48Z",
          "updatedAt": "2023-11-21T03:17:48Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5nyjyg",
          "commit": {
            "abbreviatedOid": "4fd19b1"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-21T07:51:13Z",
          "updatedAt": "2023-11-21T07:51:14Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "```suggestion\r\ndraft-ietf-oauth-sd-jwt-vc.md oliver.terbu@mattr.global mail@danielfett.de bcampbell@pingidentity.com\r\n```",
              "createdAt": "2023-11-21T07:51:14Z",
              "updatedAt": "2023-11-21T07:51:14Z"
            }
          ]
        }
      ]
    },
    {
      "number": 189,
      "id": "PR_kwDOJbVClc5gZIMf",
      "title": "Renamed JWT Issuer to JWT VC Issuer; fixes #101",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/189",
      "state": "MERGED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This PR introduces the following changes:\r\n- renamed JWT Issuer Metadata to JWT VC Issuer Metadata which fixes #101\r\n- moved JWT VC Issuer Metadata to the end of the specification for editorial reasons",
      "createdAt": "2023-11-27T03:16:35Z",
      "updatedAt": "2023-11-29T21:18:56Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "35cdbbb960a5c47159c8250f34cc1a31f94475ef",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "awoie/fix-101",
      "headRefOid": "50000a67c3638020882161e04a84ac50aa62d939",
      "closedAt": "2023-11-29T21:18:56Z",
      "mergedAt": "2023-11-29T21:18:56Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "8a735f257e144dafe866e14e231980ae95aad8c7"
      },
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "3 approvals, resolved merge conflicts, merging",
          "createdAt": "2023-11-29T21:17:39Z",
          "updatedAt": "2023-11-29T21:17:39Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5oZ4Jr",
          "commit": {
            "abbreviatedOid": "f2883c9"
          },
          "author": "peppelinux",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-11-27T23:36:56Z",
          "updatedAt": "2023-11-27T23:36:56Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5ofVqN",
          "commit": {
            "abbreviatedOid": "f2883c9"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-11-28T14:32:44Z",
          "updatedAt": "2023-11-28T14:32:44Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5ofpsp",
          "commit": {
            "abbreviatedOid": "f2883c9"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-11-28T15:02:02Z",
          "updatedAt": "2023-11-28T15:02:02Z",
          "comments": []
        }
      ]
    },
    {
      "number": 190,
      "id": "PR_kwDOJbVClc5gZSU1",
      "title": "Made DID Resolution language more relaxed",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/190",
      "state": "MERGED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This PR introduces the following changes:\r\n- fixes #186 \r\n- Made all public key validation rules conditional\r\n- Rejecting the SD-JWT VC if public key validation cannot be done",
      "createdAt": "2023-11-27T04:16:30Z",
      "updatedAt": "2023-11-28T19:33:22Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "0b3cf54f4bdbcb77a2553059ceedc4b34f3f38c1",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "awoie/fix-186",
      "headRefOid": "ef62129ab64496e840f7cac7e5dfe7c07c690c44",
      "closedAt": "2023-11-28T19:33:22Z",
      "mergedAt": "2023-11-28T19:33:21Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "ad26b966c854ca90c17f2a9f91a1b1579ed10540"
      },
      "comments": [
        {
          "author": "peacekeeper",
          "authorAssociation": "NONE",
          "body": "This harms interoperability, since some implementations will use DIDs and others will use `/.well-known/jwt-issuer`. A more interoperable approach would be to drop `/.well-known/jwt-issuer` and to always use DIDs. Those who want to use domain names and web servers can then still use `did:web`.\r\n\r\nDIDs have always been designed as an abstraction layer for different types of resolvable identifiers. To build yet another layer of optionality, where DIDs are one option out of others, does not make much sense. Now you will have to deal with different metadata formats (JWT Issuer Metadata, and DID document).\r\n\r\nSimilar arguments apply to the `did:jwk` vs `cnf` discussion.\r\n\r\nBut I already know the response.. \"Simple is a feature\", and \"DIDs have more boilerplate that is not needed\", right? :)",
          "createdAt": "2023-11-27T05:34:11Z",
          "updatedAt": "2023-11-27T05:34:11Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "> This harms interoperability, since some implementations will use DIDs and others will use `/.well-known/jwt-issuer`. A more interoperable approach would be to drop `/.well-known/jwt-issuer` and to always use DIDs. Those who want to use domain names and web servers can then still use `did:web`.\r\n> \r\n> DIDs have always been designed as an abstraction layer for different types of resolvable identifiers. To build yet another layer of optionality, where DIDs are one option out of others, does not make much sense. Now you will have to deal with different metadata formats (JWT Issuer Metadata, and DID document).\r\n> \r\n> Similar arguments apply to the `did:jwk` vs `cnf` discussion.\r\n> \r\n> But I already know the response.. \"Simple is a feature\", and \"DIDs have more boilerplate that is not needed\", right? :)\r\n\r\n@peacekeeper  Let's have the discussion in #186. As long as we haven't resolved the discussion I keep the DO NOT MERGE label on it.",
          "createdAt": "2023-11-27T07:10:56Z",
          "updatedAt": "2023-11-27T07:10:56Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "> > This harms interoperability, since some implementations will use DIDs and others will use `/.well-known/jwt-issuer`. A more interoperable approach would be to drop `/.well-known/jwt-issuer` and to always use DIDs. Those who want to use domain names and web servers can then still use `did:web`.\r\n> > DIDs have always been designed as an abstraction layer for different types of resolvable identifiers. To build yet another layer of optionality, where DIDs are one option out of others, does not make much sense. Now you will have to deal with different metadata formats (JWT Issuer Metadata, and DID document).\r\n> > Similar arguments apply to the `did:jwk` vs `cnf` discussion.\r\n> > But I already know the response.. \"Simple is a feature\", and \"DIDs have more boilerplate that is not needed\", right? :)\r\n> \r\n> @peacekeeper Let's have the discussion in #186. As long as we haven't resolved the discussion I keep the DO NOT MERGE label on it.\r\n\r\nLet me try to update the PR.",
          "createdAt": "2023-11-27T07:35:30Z",
          "updatedAt": "2023-11-27T07:35:30Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "> > > This harms interoperability, since some implementations will use DIDs and others will use `/.well-known/jwt-issuer`. A more interoperable approach would be to drop `/.well-known/jwt-issuer` and to always use DIDs. Those who want to use domain names and web servers can then still use `did:web`.\r\n> > > DIDs have always been designed as an abstraction layer for different types of resolvable identifiers. To build yet another layer of optionality, where DIDs are one option out of others, does not make much sense. Now you will have to deal with different metadata formats (JWT Issuer Metadata, and DID document).\r\n> > > Similar arguments apply to the `did:jwk` vs `cnf` discussion.\r\n> > > But I already know the response.. \"Simple is a feature\", and \"DIDs have more boilerplate that is not needed\", right? :)\r\n> > \r\n> > \r\n> > @peacekeeper Let's have the discussion in #186. As long as we haven't resolved the discussion I keep the DO NOT MERGE label on it.\r\n> \r\n> Let me try to update the PR.\r\n\r\n@peacekeeper I made all rules now conditional from a verifier perspective. In this way a verifier is compliant if they don't support all rules but the SD-JWT VC would fail validation. Note, it is impossible for a verifier to support all rules that may be defined by ecosystems anyways. Are you ok with the updated language?",
          "createdAt": "2023-11-27T07:50:52Z",
          "updatedAt": "2023-11-27T07:50:52Z"
        },
        {
          "author": "peacekeeper",
          "authorAssociation": "NONE",
          "body": "> Are you ok with the updated language?\r\n\r\nAs a DID maximalist, I would personally prefer DIDs to be the only mechanism that is used whenever public keys are needed, instead of allowing more static public key mechanisms like \"jwt-issuer\" or \"cnf\".\r\n\r\nUnlike \"jwt-issuer\", DIDs support identifiers that are persistent, decentralized, and cryptographically verifiable.\r\n\r\nUnlike \"cnf\", DIDs support key rotation and other updates.\r\n\r\nAnd as I said above, with DIDs there would be only one syntax and one resolution mechanism and one metadata format, instead of multiple different ones that individual implementations may or may not support.\r\n\r\nBut I also understand that for some communities, \"keeping it simple\" is more important than the above properties, so yes I'm fine with the language, thanks for the effort to update it!",
          "createdAt": "2023-11-27T08:10:49Z",
          "updatedAt": "2023-11-27T08:10:49Z"
        },
        {
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "body": "While I understand your points, I think some of them are not true.\n\nDIDs may be decentralized, may support key rotations and may have other features. There are enough examples of DID methods that do not have those properties. \n\nMaking DIDs mandatory would limit optionality. But also with DIDs the optionality in my view shifts just shifts a layer further down as there are many DID methods. Indeed allowing DIDs expands optionality by 200+ did methods, so this could indeed be a counterargument.\n\n\"Cnf\" isn't actually far away from DIDs, as the content can vary, there is a registry at IANA for supported methods, with different properties. In my view the cleanest approach for the keybinding would be to register a new cnf type \"did\" in this registry. But that's off topic in this PR.\n\nI'm fine to keep some optionality in the specification at the beginning and then see what is actually being used",
          "createdAt": "2023-11-27T17:44:31Z",
          "updatedAt": "2023-11-27T17:44:31Z"
        },
        {
          "author": "peacekeeper",
          "authorAssociation": "NONE",
          "body": "> There are enough examples of DID methods that do not have those properties.\r\n\r\nTrue. :) But with \"JWT Issuer Metadata\" discovered from domain names you will never have the kind of decentralization, persistence, and cryptographic verifiability that DIDs can offer.\r\n\r\n> \"Cnf\" isn't actually far away from DIDs, [...] register a new cnf type \"did\" in this registry\r\n\r\nSounds interesting! But I agree off-topic.\r\n\r\n> But also with DIDs the optionality in my view shifts just shifts a layer further down\r\n\r\nYou can still restrict the DID methods you want to use in a specific application such as eIDAS2.\r\n\r\nFor example, if you want to support 1. domain names, 2. plain public keys, and 3. EBSI, then:\r\n\r\nWith the current approach in this specification:\r\n- For 1. you need to support JWT Issuer Metadata (= a new format introduced by this spec).\r\n- For 2. you need to support \"cnf\" and JWK (= a format that has been around for a long time).\r\n- For 3. you need to support DID documents (= a format that has been around for a few years).\r\n\r\nCompare that to a DID-only approach:\r\n- For 1. you need to support did:web (= DID document format)\r\n- For 2. you need to support did:jwk (= DID document format)\r\n- For 3. you need to support did:ebsi (= DID document format)\r\n\r\nYou see what I mean?\r\n\r\nYes with a DID-only approach you would still have a layer of optionality with regard to DID methods, but you'd only have that ONE layer of optionality instead of TWO layers of optionality, and you'd have a harmonized identifiers syntax and harmonized metadata format.\r\n\r\nBut I understand there are communities that simply don't want to use DIDs, so I think this current PR is a good middle ground.",
          "createdAt": "2023-11-27T18:10:26Z",
          "updatedAt": "2023-11-27T18:10:26Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5oZ3uH",
          "commit": {
            "abbreviatedOid": "bb5e7bc"
          },
          "author": "peppelinux",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-11-27T23:34:42Z",
          "updatedAt": "2023-11-27T23:34:42Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5oZ30X",
          "commit": {
            "abbreviatedOid": "bb5e7bc"
          },
          "author": "peppelinux",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-27T23:35:14Z",
          "updatedAt": "2023-11-27T23:35:15Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "```suggestion\r\n- JWT Issuer Metadata: If a recipient supports JWT Issuer Metadata and if the `iss` value contains an HTTPS URI, the recipient MUST\r\n```",
              "createdAt": "2023-11-27T23:35:15Z",
              "updatedAt": "2023-11-27T23:35:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5ofTfE",
          "commit": {
            "abbreviatedOid": "74dafea"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "There are some things in this area that still need fixing which are done in #183 and is gonna have conflicts.  But assuming that can be done and resolved, I'm okay with the changes here. ",
          "createdAt": "2023-11-28T14:29:12Z",
          "updatedAt": "2023-11-28T14:29:12Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5ofbUE",
          "commit": {
            "abbreviatedOid": "74dafea"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-28T14:38:41Z",
          "updatedAt": "2023-11-28T14:38:41Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "```suggestion\r\n-02\r\n\r\n* Made specific rules for public verification key validation conditional\r\n```",
              "createdAt": "2023-11-28T14:38:41Z",
              "updatedAt": "2023-11-28T14:38:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5ofpZt",
          "commit": {
            "abbreviatedOid": "ef62129"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-11-28T15:01:33Z",
          "updatedAt": "2023-11-28T15:01:33Z",
          "comments": []
        }
      ]
    },
    {
      "number": 195,
      "id": "PR_kwDOJbVClc5iRaoO",
      "title": "feat: changed affiliation",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/195",
      "state": "MERGED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-12-18T14:42:36Z",
      "updatedAt": "2023-12-18T17:53:33Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "8a735f257e144dafe866e14e231980ae95aad8c7",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "awoie/change-affiliation",
      "headRefOid": "cde372924c9ba3e1b61bae93a533b9bee0315946",
      "closedAt": "2023-12-18T17:53:32Z",
      "mergedAt": "2023-12-18T17:53:32Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "cd7004f6aa90c052d371fc65a709f419414afb88"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5qibSJ",
          "commit": {
            "abbreviatedOid": "cde3729"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-12-18T17:35:47Z",
          "updatedAt": "2023-12-18T17:35:47Z",
          "comments": []
        }
      ]
    },
    {
      "number": 198,
      "id": "PR_kwDOJbVClc5iVXQl",
      "title": "add a .note.xml",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/198",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "see it in action @ https://drafts.oauth.net/oauth-sd-jwt-vc/bc-pi-note-in-xml/draft-ietf-oauth-sd-jwt-vc.html#name-discussion-venues ",
      "createdAt": "2023-12-19T06:03:55Z",
      "updatedAt": "2024-01-09T17:43:59Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "cd7004f6aa90c052d371fc65a709f419414afb88",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "bc-pi-note-in-xml",
      "headRefOid": "bc4d3aa9ecb1f81b48dfacb55224137645a25d3c",
      "closedAt": "2024-01-09T17:43:59Z",
      "mergedAt": "2024-01-09T17:43:58Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "8db131b232fb4018ad37d955612ab3af65e948bf"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> Nice, I didn't know this exists!\r\n\r\nI stumbled across it in another project you might be familiar with https://github.com/oauth-wg/oauth-selective-disclosure-jwt/blob/master/.note.xml :)  Aaron must have added it when he set up the repo. ",
          "createdAt": "2024-01-08T17:09:14Z",
          "updatedAt": "2024-01-08T17:09:14Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5r3FUo",
          "commit": {
            "abbreviatedOid": "bc4d3aa"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "Nice, I didn't know this exists!",
          "createdAt": "2024-01-08T16:50:37Z",
          "updatedAt": "2024-01-08T16:50:37Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5r3Kiw",
          "commit": {
            "abbreviatedOid": "bc4d3aa"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-01-08T17:02:20Z",
          "updatedAt": "2024-01-08T17:02:20Z",
          "comments": []
        }
      ]
    },
    {
      "number": 201,
      "id": "PR_kwDOJbVClc5jvJgO",
      "title": "Remove/fix outdated SD-JWT terminology ",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/201",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "also fix a typo or two \r\nfor Issue #197",
      "createdAt": "2024-01-10T22:42:29Z",
      "updatedAt": "2024-01-18T17:08:28Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "8db131b232fb4018ad37d955612ab3af65e948bf",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "bc/fix-197",
      "headRefOid": "64bd831817d0cefe1ad62935ce3eb62760d99461",
      "closedAt": "2024-01-18T17:08:28Z",
      "mergedAt": "2024-01-18T17:08:28Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "7ab0f523d339724e1498572e55362c55eb8e83ec"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5sMR1V",
          "commit": {
            "abbreviatedOid": "64bd831"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-01-11T10:07:54Z",
          "updatedAt": "2024-01-11T10:07:54Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5s93QO",
          "commit": {
            "abbreviatedOid": "64bd831"
          },
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-01-17T20:45:48Z",
          "updatedAt": "2024-01-17T20:45:48Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5tFm55",
          "commit": {
            "abbreviatedOid": "64bd831"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-01-18T17:08:02Z",
          "updatedAt": "2024-01-18T17:08:02Z",
          "comments": []
        }
      ]
    },
    {
      "number": 202,
      "id": "PR_kwDOJbVClc5kWC4E",
      "title": "make iat optional and allowed to be selectively disclosable",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/202",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "for #199 and #200",
      "createdAt": "2024-01-17T18:49:33Z",
      "updatedAt": "2024-01-18T17:07:33Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "8db131b232fb4018ad37d955612ab3af65e948bf",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "iat-not-required",
      "headRefOid": "f497b2a8af49b39f1e8e241ead20a1a4bbd3cfa3",
      "closedAt": "2024-01-18T17:07:33Z",
      "mergedAt": "2024-01-18T17:07:33Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "25a41f124d81cd275e950bfecff0136160551519"
      },
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "NONE",
          "body": "Amen!",
          "createdAt": "2024-01-17T23:06:44Z",
          "updatedAt": "2024-01-17T23:06:44Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5s93hR",
          "commit": {
            "abbreviatedOid": "f497b2a"
          },
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "As `iat` may be correlatable identifier, I'm in favor of making it optional",
          "createdAt": "2024-01-17T20:46:39Z",
          "updatedAt": "2024-01-17T20:46:39Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5s-r-U",
          "commit": {
            "abbreviatedOid": "f497b2a"
          },
          "author": "peppelinux",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-01-17T23:06:56Z",
          "updatedAt": "2024-01-17T23:06:56Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5tAaEW",
          "commit": {
            "abbreviatedOid": "f497b2a"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "lgtm",
          "createdAt": "2024-01-18T05:03:41Z",
          "updatedAt": "2024-01-18T05:03:41Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5tFmIr",
          "commit": {
            "abbreviatedOid": "f497b2a"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-01-18T17:06:20Z",
          "updatedAt": "2024-01-18T17:06:20Z",
          "comments": []
        }
      ]
    },
    {
      "number": 204,
      "id": "PR_kwDOJbVClc5loOF-",
      "title": "Fix inconstancy in the well-known path construction",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/204",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "also add associated IANA registration request and fix up formatting etc in other IANA bits  \r\n\r\nsee it live https://drafts.oauth.net/oauth-sd-jwt-vc/bc/fix-well-known/draft-ietf-oauth-sd-jwt-vc.html ",
      "createdAt": "2024-01-31T23:36:45Z",
      "updatedAt": "2024-02-13T14:34:14Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "7ab0f523d339724e1498572e55362c55eb8e83ec",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "bc/fix-well-known",
      "headRefOid": "7883e101b6625de58c01aa546b54bc3fa6df0efa",
      "closedAt": "2024-02-13T14:34:14Z",
      "mergedAt": "2024-02-13T14:34:14Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "b41130f7adfda332ae9261591644801c977e6b20"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5usRLs",
          "commit": {
            "abbreviatedOid": "3a616d4"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "thanks, just one tiny suggestion",
          "createdAt": "2024-02-01T17:26:42Z",
          "updatedAt": "2024-02-01T17:27:10Z",
          "comments": [
            {
              "originalPosition": 121,
              "body": "```suggestion\r\n* Specification document: (#jwt-vc-issuer-metadata) of [[ this of this specification ]]\r\n```",
              "createdAt": "2024-02-01T17:26:42Z",
              "updatedAt": "2024-02-01T17:27:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5usSEv",
          "commit": {
            "abbreviatedOid": "3a616d4"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-01T17:28:23Z",
          "updatedAt": "2024-02-01T17:28:23Z",
          "comments": [
            {
              "originalPosition": 121,
              "body": "in SD-JWT the section is also included like this, not sure if there was a really good reason for that. In case it was an oversight, we would need to do the following:\r\n\r\n```suggestion\r\n* Specification document: [[ (#jwt-vc-issuer-metadata) of this of this specification ]]\r\n```",
              "createdAt": "2024-02-01T17:28:23Z",
              "updatedAt": "2024-02-01T18:50:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5utLoK",
          "commit": {
            "abbreviatedOid": "3a616d4"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-01T18:57:17Z",
          "updatedAt": "2024-02-01T18:57:17Z",
          "comments": [
            {
              "originalPosition": 121,
              "body": "I don't think there was really a reason for that but we can do the same here anyway. ",
              "createdAt": "2024-02-01T18:57:17Z",
              "updatedAt": "2024-02-01T18:57:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5utMOC",
          "commit": {
            "abbreviatedOid": "63d9375"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-01T18:58:36Z",
          "updatedAt": "2024-02-01T18:58:37Z",
          "comments": [
            {
              "originalPosition": 60,
              "body": "make em all consistent while we're here \r\n\r\n```suggestion\r\n- Specification Document(s): [[ (#type-claim)  of this of this specification ]]\r\n```",
              "createdAt": "2024-02-01T18:58:36Z",
              "updatedAt": "2024-02-01T19:00:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5uuCqY",
          "commit": {
            "abbreviatedOid": "7883e10"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "lgtm",
          "createdAt": "2024-02-01T20:31:21Z",
          "updatedAt": "2024-02-01T20:31:21Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5v8cLe",
          "commit": {
            "abbreviatedOid": "7883e10"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-13T14:34:09Z",
          "updatedAt": "2024-02-13T14:34:09Z",
          "comments": []
        }
      ]
    },
    {
      "number": 207,
      "id": "PR_kwDOJbVClc5mSEn6",
      "title": "Switch back to the main sd-jwt-python library branch",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/207",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Switch back to the main branch of the sd-jwt-python library for example generation.\r\n\r\nTo fix #206 where `sd_hash` was missing from the Key Binding JWT in the example. \r\n\r\nhttps://drafts.oauth.net/oauth-sd-jwt-vc/206_sd_hash/draft-ietf-oauth-sd-jwt-vc.html#section-4.2-2 has the PR preview of the fix ",
      "createdAt": "2024-02-07T16:24:00Z",
      "updatedAt": "2024-02-13T14:33:10Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "7ab0f523d339724e1498572e55362c55eb8e83ec",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "206_sd_hash",
      "headRefOid": "87b680e811a74380f69673422a17588460d7a278",
      "closedAt": "2024-02-13T14:33:09Z",
      "mergedAt": "2024-02-13T14:33:09Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "6df9cb0e9f83d793d787d552fdd839e9b42b6254"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5vW3JO",
          "commit": {
            "abbreviatedOid": "87b680e"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I am not familiar with that specific python library but if you tested it, then it should be fine.",
          "createdAt": "2024-02-07T16:28:21Z",
          "updatedAt": "2024-02-07T16:28:21Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5v8bNp",
          "commit": {
            "abbreviatedOid": "87b680e"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-13T14:33:03Z",
          "updatedAt": "2024-02-13T14:33:03Z",
          "comments": []
        }
      ]
    },
    {
      "number": 209,
      "id": "PR_kwDOJbVClc5mxcF-",
      "title": "Added \"added Brian Campbell as co-author\" to doc history and removed from Acknowledgements",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/209",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "forgotten tasks from PR #187 ",
      "createdAt": "2024-02-13T16:20:03Z",
      "updatedAt": "2024-02-13T19:39:34Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "b41130f7adfda332ae9261591644801c977e6b20",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "bc-bc-bc-etc",
      "headRefOid": "872be1b47754e0732b7ba10dd929c73fa67aa37c",
      "closedAt": "2024-02-13T17:39:24Z",
      "mergedAt": "2024-02-13T17:39:24Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "49c4d3d913f7c56cb23ffc97f572dc116d8cb08c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5v-HAH",
          "commit": {
            "abbreviatedOid": "872be1b"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-13T17:23:53Z",
          "updatedAt": "2024-02-13T17:23:53Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5v-OCS",
          "commit": {
            "abbreviatedOid": "872be1b"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-13T17:39:17Z",
          "updatedAt": "2024-02-13T17:39:17Z",
          "comments": []
        }
      ]
    },
    {
      "number": 210,
      "id": "PR_kwDOJbVClc5mx1uP",
      "title": "feat: add relationships to other docs section",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/210",
      "state": "MERGED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This PR:\r\n- adds relationship to other docs section\r\n- fixes #128 \r\n- preview here: https://drafts.oauth.net/oauth-sd-jwt-vc/awoie.fix-128/draft-ietf-oauth-sd-jwt-vc.html",
      "createdAt": "2024-02-13T17:25:35Z",
      "updatedAt": "2024-02-21T18:23:49Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "b41130f7adfda332ae9261591644801c977e6b20",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "awoie.fix-128",
      "headRefOid": "3881b6875247bebacd1415693a0dd790d62d41bc",
      "closedAt": "2024-02-21T18:23:49Z",
      "mergedAt": "2024-02-21T18:23:49Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "f2643039f9780cf740da5b4279183e48e805db73"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "One little nit on the text but otherwise looks okay (after the couple iterations by @awoie and @danielfett, thanks for those). ",
          "createdAt": "2024-02-13T21:14:46Z",
          "updatedAt": "2024-02-13T21:14:46Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "@Sakurann pls approve if you are happy with the latest language, then we will merge the PR.",
          "createdAt": "2024-02-21T12:26:45Z",
          "updatedAt": "2024-02-21T12:26:45Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5v-ui4",
          "commit": {
            "abbreviatedOid": "c0727e4"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-13T18:57:48Z",
          "updatedAt": "2024-02-13T18:59:41Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "'similar scope' sounds as if those other documents also use JSON-only payloads with SD-JWT. I think they can be compared in that they all define credential formats.",
              "createdAt": "2024-02-13T18:57:48Z",
              "updatedAt": "2024-02-13T18:59:41Z"
            },
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nThis specification defines validation and processing rules for verifiable credentials using JSON-only\r\n```",
              "createdAt": "2024-02-13T18:57:55Z",
              "updatedAt": "2024-02-13T18:59:41Z"
            },
            {
              "originalPosition": 10,
              "body": "As discussed on our call, I'm not sure how this helps the reader. Theoretically I can map between all tree structures. But what could be the purpose of that excercise and why do we need to mention it here?",
              "createdAt": "2024-02-13T18:59:30Z",
              "updatedAt": "2024-02-13T18:59:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5v-zds",
          "commit": {
            "abbreviatedOid": "c0727e4"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-13T19:11:19Z",
          "updatedAt": "2024-02-13T19:11:19Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "I updated the text.",
              "createdAt": "2024-02-13T19:11:19Z",
              "updatedAt": "2024-02-13T19:11:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5v-zhC",
          "commit": {
            "abbreviatedOid": "c0727e4"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-13T19:11:29Z",
          "updatedAt": "2024-02-13T19:11:29Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "I updated the text.",
              "createdAt": "2024-02-13T19:11:29Z",
              "updatedAt": "2024-02-13T19:11:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5v_i1j",
          "commit": {
            "abbreviatedOid": "619862a"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-13T21:12:34Z",
          "updatedAt": "2024-02-13T21:12:35Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\nCredential Data Model (VCDM) 2.0 [@W3C.VCDM] defines a data model for verifiable credentials encoded as JSON-LD, and\r\nISO/IEC 18013-5:2021 [@ISO.18013-5] defines a representation of verifiable credentials in the mobile document (mdoc)\r\n```",
              "createdAt": "2024-02-13T21:12:35Z",
              "updatedAt": "2024-02-13T21:15:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5wG4bW",
          "commit": {
            "abbreviatedOid": "478fca1"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-14T17:18:11Z",
          "updatedAt": "2024-02-14T17:18:11Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5wbqww",
          "commit": {
            "abbreviatedOid": "478fca1"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-17T01:40:52Z",
          "updatedAt": "2024-02-17T01:40:59Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "`using JSON-only` stood out here for me. `using only JSON payload` or just `using JSON payloads` should be fine? (sure, some can say JSON-LD is also JSON, but JSON-only does not really make that point clearer IMO)",
              "createdAt": "2024-02-17T01:40:52Z",
              "updatedAt": "2024-02-17T01:40:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5wmxN5",
          "commit": {
            "abbreviatedOid": "478fca1"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-19T21:52:49Z",
          "updatedAt": "2024-02-19T21:52:49Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "We could also add something like:\r\n> Compared to other credential formats, SD-JWT VC was created to be focused on developers who use JSON-based data models and who are familiar with the JOSE stack.",
              "createdAt": "2024-02-19T21:52:49Z",
              "updatedAt": "2024-02-19T21:52:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5wt_-Y",
          "commit": {
            "abbreviatedOid": "478fca1"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-20T17:54:21Z",
          "updatedAt": "2024-02-20T17:54:21Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "@Sakurann's suggestion of just `using JSON payloads` seems good \r\n```suggestion\r\nThis specification defines validation and processing rules for verifiable credentials using JSON\r\n```",
              "createdAt": "2024-02-20T17:54:21Z",
              "updatedAt": "2024-02-20T17:54:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5wuwuG",
          "commit": {
            "abbreviatedOid": "9aca89b"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-20T19:03:35Z",
          "updatedAt": "2024-02-20T19:03:35Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\nthat define their own verifiable credential formats; for example, W3C Verifiable\r\n```",
              "createdAt": "2024-02-20T19:03:35Z",
              "updatedAt": "2024-02-20T19:03:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5wuxOC",
          "commit": {
            "abbreviatedOid": "9aca89b"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "Approved with a minor proposed improvment.",
          "createdAt": "2024-02-20T19:04:13Z",
          "updatedAt": "2024-02-20T19:04:13Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5w48pT",
          "commit": {
            "abbreviatedOid": "3881b68"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-21T17:33:31Z",
          "updatedAt": "2024-02-21T17:33:31Z",
          "comments": []
        }
      ]
    },
    {
      "number": 213,
      "id": "PR_kwDOJbVClc5ncoiB",
      "title": "Clarify the optionality of the cnf claim",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/213",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Clarify the optionality of the cnf claim (to fix #196)",
      "createdAt": "2024-02-20T21:49:01Z",
      "updatedAt": "2024-02-27T19:05:13Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "f2643039f9780cf740da5b4279183e48e805db73",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "clarify-cnf-optionality",
      "headRefOid": "c6b138036e035e6df2a2f983aa4cf8b183d39fc2",
      "closedAt": "2024-02-27T19:05:13Z",
      "mergedAt": "2024-02-27T19:05:13Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "e4e3b6996780e390912a4f04ff80816fd4ee6458"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> Hang on. Even if there might be a difference in how a key inside cnf claim is represented (jwk, kid, etc) it should still be cnf claim for the interop purposes, no? What are you trying to account for by making cnf optional?\r\n\r\nplease see issue #196 and note that the text in this PR has \"This [cnf] claim MUST be present when cryptographic Key Binding is to be supported.\" \r\n\r\nAlso note this PR isn't for issue #205 and it was probably a mistake on my part to have suggested text there that touches two issues. But they were both on cnf so I did what I did [no pun intended]. This PR *only* attempts to clarify the optionality of the cnf claim for issue #196. There doesn't yet seem to be consensus on #205.  ",
          "createdAt": "2024-02-20T21:56:04Z",
          "updatedAt": "2024-02-20T22:30:22Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "https://drafts.oauth.net/oauth-sd-jwt-vc/clarify-cnf-optionality/draft-ietf-oauth-sd-jwt-vc.html#section-3.2.2.2-3.4.1 ",
          "createdAt": "2024-02-20T22:45:41Z",
          "updatedAt": "2024-02-20T22:45:41Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "@bc-pi you probably made the comment while I was updating my original comment based on re-reading the PR. I still think it should remain \"required when cryptographic binding is used\"",
          "createdAt": "2024-02-21T06:39:02Z",
          "updatedAt": "2024-02-21T06:39:02Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "> CNF is more optional to me\r\n\r\nwhat does this mean? you believe sd-jwt-vc should have more than one way to do cryptographic holder binding? or that many of the credentials will not use cryptographic holder binding?",
          "createdAt": "2024-02-21T17:34:34Z",
          "updatedAt": "2024-02-21T17:34:43Z"
        },
        {
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "body": "No, I just mean SD-JWT VCs can be key bound, but they don't need to be. Therefore it is an optional feature.",
          "createdAt": "2024-02-21T17:42:13Z",
          "updatedAt": "2024-02-21T17:42:13Z"
        },
        {
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "body": "I see, the difference here is that if key binding shall be used, then cnf must be used while the other formulation leaves more space?",
          "createdAt": "2024-02-21T17:45:54Z",
          "updatedAt": "2024-02-21T17:45:54Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "If that's the intent, `required when cryptographic binding is used` sounds more appropriate to me. just saying `optional` would lead to confusion that it is optional even when cryptographic binding is used.",
          "createdAt": "2024-02-21T17:51:15Z",
          "updatedAt": "2024-02-21T17:51:15Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "I also like the proposed version more. The proposed language addresses #196 which is based on developer feedback that were confused by the current language that uses REQUIRED if ... . \r\n\r\nSo I think that OPTIONAL seems to solve that issue. IMO, it is also appropriate since we have the additional requirement in the paragraph that says MUST be present if cryptographic binding is required.",
          "createdAt": "2024-02-21T19:33:38Z",
          "updatedAt": "2024-02-21T19:33:38Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "> if key binding shall be used, then cnf must be used while the other formulation leaves more space?\n\nSorry, I don't understand why more space is needed here? The less optionality in key binding, more interop. with the current PR, it would be ok to use a top level sub claim and put a DID there (instead of using cnf.kid). I think it is harmful for the interop, that SD-JWT VC is hoped to bring",
          "createdAt": "2024-02-23T12:45:02Z",
          "updatedAt": "2024-02-23T12:45:02Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "> > if key binding shall be used, then cnf must be used while the other formulation leaves more space?\r\n> \r\n> Sorry, I don't understand why more space is needed here? The less optionality in key binding, more interop. with the current PR, it would be ok to use a top level sub claim and put a DID there (instead of using cnf.kid). I think it is harmful for the interop, that SD-JWT VC is hoped to bring\r\n\r\nI don't see that this optionality is allowed by the following?\r\n>  This claim MUST be present when cryptographic Key Binding is to be supported.",
          "createdAt": "2024-02-23T13:33:16Z",
          "updatedAt": "2024-02-23T13:33:16Z"
        },
        {
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "body": "> > if key binding shall be used, then cnf must be used while the other formulation leaves more space?\n> \n> Sorry, I don't understand why more space is needed here? The less optionality in key binding, more interop. with the current PR, it would be ok to use a top level sub claim and put a DID there (instead of using cnf.kid). I think it is harmful for the interop, that SD-JWT VC is hoped to bring\n\nI see your point. The proposed text opens a door for key binding without using the cnf claim. However, the new text is more initiative and we could add this constraint as an additional sentence or in the section on key binding",
          "createdAt": "2024-02-23T16:52:27Z",
          "updatedAt": "2024-02-23T16:52:27Z"
        },
        {
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "body": "Okay, it is already present. Sorry I didn't recheck the changes. Lgtm then",
          "createdAt": "2024-02-23T18:10:17Z",
          "updatedAt": "2024-02-23T18:10:17Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm struggling to understand the disagreement/argument here. But I'm trying...\r\n\r\nThe text for cnf in the PR has:\r\n\r\n>  OPTIONAL. Contains the confirmation method identifying the proof of possession key as defined in [@!RFC7800]. This claim MUST be present when cryptographic Key Binding is to be supported. It is RECOMMENDED that this contains a JWK as defined in Section 3.2 of [@!RFC7800]. For proof of cryptographic Key Binding, the Key Binding JWT in the presentation of the SD-JWT MUST be signed by the key identified in this claim.\r\n\r\nwhich seems to me to clearly says that cnf is the required way to do key binding, if doing key binding. Especially the \"This claim MUST be present when cryptographic Key Binding is to be supported\" sentence. \r\n\r\nWould changing that sentence to \"This claim is REQUIRED when cryptographic Key Binding is to be supported\" help? Maybe I'm missing the point of contention but that and the current PR text and the current text in the draft all say the same thing - that cnf is the one and only way to do key binding in SD-JWT VC but b/c key binding isn't itself required, the claim also isn't required. \r\n\r\n\r\n\r\n\r\n\r\n",
          "createdAt": "2024-02-23T18:52:01Z",
          "updatedAt": "2024-02-23T18:52:01Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> Would changing that sentence to \"This claim is REQUIRED when cryptographic Key Binding is to be supported\" help?\r\n\r\nI thought that was better phrasing anyway so made the change w/ 9edae9d4aa1dc2b647c77029b7d415d384cded49 \r\n\r\n",
          "createdAt": "2024-02-26T17:58:23Z",
          "updatedAt": "2024-02-26T17:58:23Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "> > Would changing that sentence to \"This claim is REQUIRED when cryptographic Key Binding is to be supported\" help?\r\n> \r\n> I thought that was better phrasing anyway so made the change w/ [9edae9d](https://github.com/oauth-wg/oauth-sd-jwt-vc/commit/9edae9d4aa1dc2b647c77029b7d415d384cded49)\r\n\r\nSeems great to me.",
          "createdAt": "2024-02-26T19:22:13Z",
          "updatedAt": "2024-02-26T19:22:13Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> I'm generally fine with the change, but I think I want to be pedantic here and resolve the contradiction.\r\n\r\nYou're suggested pedantic wording is indeed better than what I'd had. Thanks. I've accepted it w/ c6b138036e035e6df2a2f983aa4cf8b183d39fc2",
          "createdAt": "2024-02-27T16:27:12Z",
          "updatedAt": "2024-02-27T16:27:12Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5wwG0b",
          "commit": {
            "abbreviatedOid": "ab32c85"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-20T21:51:48Z",
          "updatedAt": "2024-02-20T21:51:48Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5wwH8t",
          "commit": {
            "abbreviatedOid": "ab32c85"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Even if there might be a difference in how a key inside cnf claim is represented (jwk, kid, etc) it should still be cnf claim for the interop purposes, no? What are you trying to account for by making cnf optional?\n\nI think it should remain \"required when cryptographic binding is used\"",
          "createdAt": "2024-02-20T21:55:09Z",
          "updatedAt": "2024-02-20T22:10:41Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5wycOX",
          "commit": {
            "abbreviatedOid": "ab32c85"
          },
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I like this version. CNF is more optional to me and having required as the first keyword seems less right",
          "createdAt": "2024-02-21T07:26:05Z",
          "updatedAt": "2024-02-21T07:26:05Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5w6ALE",
          "commit": {
            "abbreviatedOid": "ab32c85"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "lgtm, see my comment in the discussion.",
          "createdAt": "2024-02-21T19:34:58Z",
          "updatedAt": "2024-02-21T19:34:58Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5xWIOU",
          "commit": {
            "abbreviatedOid": "3d43b7b"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-26T17:52:44Z",
          "updatedAt": "2024-02-26T17:52:45Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "changing that one sentence to \"This claim is REQUIRED when cryptographic Key Binding is to be supported\"\r\n\r\n```suggestion\r\n    * OPTIONAL. Contains the confirmation method identifying the proof of possession key as defined in [@!RFC7800]. This claim is REQUIRED when cryptographic Key Binding is to be supported. It is RECOMMENDED that this contains a JWK as defined in Section 3.2 of [@!RFC7800]. For proof of cryptographic Key Binding, the Key Binding JWT in the presentation of the SD-JWT MUST be signed by the key identified in this claim.\r\n```",
              "createdAt": "2024-02-26T17:52:45Z",
              "updatedAt": "2024-02-26T17:52:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5xfQKF",
          "commit": {
            "abbreviatedOid": "9edae9d"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-27T16:12:12Z",
          "updatedAt": "2024-02-27T16:12:13Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "_Technically,_ the REQUIRED contradicts the OPTIONAL. So in order to not trigger any RFC2119 nerds, we could use: \r\n```suggestion\r\n    * OPTIONAL unless cryptographic Key Binding is to be supported, in which case it is REQUIRED. Contains the confirmation method identifying the proof of possession key as defined in [@!RFC7800]. It is RECOMMENDED that this contains a JWK as defined in Section 3.2 of [@!RFC7800]. For proof of cryptographic Key Binding, the Key Binding JWT in the presentation of the SD-JWT MUST be signed by the key identified in this claim.\r\n```",
              "createdAt": "2024-02-27T16:12:12Z",
              "updatedAt": "2024-02-27T16:12:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5xfRfj",
          "commit": {
            "abbreviatedOid": "9edae9d"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "I'm generally fine with the change, but I think I want to be pedantic here and resolve the contradiction.",
          "createdAt": "2024-02-27T16:14:08Z",
          "updatedAt": "2024-02-27T16:14:08Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5xg8fh",
          "commit": {
            "abbreviatedOid": "c6b1380"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "thank you!",
          "createdAt": "2024-02-27T18:22:20Z",
          "updatedAt": "2024-02-27T18:22:20Z",
          "comments": []
        }
      ]
    },
    {
      "number": 214,
      "id": "PR_kwDOJbVClc5oFX0l",
      "title": "Add PID example",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/214",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "PID example in line with our current thinking about PID design.",
      "createdAt": "2024-02-27T18:08:21Z",
      "updatedAt": "2024-02-27T19:24:44Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "f2643039f9780cf740da5b4279183e48e805db73",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "danielfett/pid-example",
      "headRefOid": "3a527d16929416ddd16341d9449850aaf0a0ae56",
      "closedAt": "2024-02-27T19:24:44Z",
      "mergedAt": "2024-02-27T19:24:44Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "5b93e96c6da0b926b7e52501e3f36352233bca5d"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "https://drafts.oauth.net/oauth-sd-jwt-vc/danielfett/pid-example/draft-ietf-oauth-sd-jwt-vc.html#appendix-B for folks playing along at home ",
          "createdAt": "2024-02-27T18:33:32Z",
          "updatedAt": "2024-02-27T18:33:32Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "can haz document history entry? ",
          "createdAt": "2024-02-27T18:43:57Z",
          "updatedAt": "2024-02-27T18:43:57Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5xhIM2",
          "commit": {
            "abbreviatedOid": "2a87163"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-27T18:36:22Z",
          "updatedAt": "2024-02-27T18:36:22Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "```suggestion\r\nillustrative purposes only. In particular, neither the structure of the claims\r\n```",
              "createdAt": "2024-02-27T18:36:22Z",
              "updatedAt": "2024-02-27T18:36:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5xhNEV",
          "commit": {
            "abbreviatedOid": "2a87163"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-27T18:42:39Z",
          "updatedAt": "2024-02-27T18:42:39Z",
          "comments": [
            {
              "originalPosition": 51,
              "body": "\"could look like\" has never sounded right to me\r\n\r\n```suggestion\r\nThe following is how a presentation of the SD-JWT with a Key Binding JWT that discloses only nationality and the fact that the person is over 18 years old might look:\r\n```",
              "createdAt": "2024-02-27T18:42:39Z",
              "updatedAt": "2024-02-27T18:42:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5xheLO",
          "commit": {
            "abbreviatedOid": "b2b04fa"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-27T19:14:06Z",
          "updatedAt": "2024-02-27T19:14:06Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5xhlhE",
          "commit": {
            "abbreviatedOid": "3a527d1"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-27T19:24:29Z",
          "updatedAt": "2024-02-27T19:24:29Z",
          "comments": []
        }
      ]
    },
    {
      "number": 216,
      "id": "PR_kwDOJbVClc5oU7w-",
      "title": "Include disclosure of age_equal_or_over/18 in the PID example",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/216",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Related to https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/411 disclosure of age_equal_or_over/18 in the example wasn't working quite right and so was pulled out right before publication of -02 in #214. This PR puts disclosure of age_equal_or_over/18 back in the example. \r\n\r\nSee it starting here:\r\nhttps://drafts.oauth.net/oauth-sd-jwt-vc/pid_example_disclose_age_over_18/draft-ietf-oauth-sd-jwt-vc.html#appendix-B.1-52 \r\n",
      "createdAt": "2024-02-29T18:38:03Z",
      "updatedAt": "2024-03-04T16:36:48Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "5b93e96c6da0b926b7e52501e3f36352233bca5d",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "pid_example_disclose_age_over_18",
      "headRefOid": "6a54f5016008dd77e58e71e75258d5b56c0a8204",
      "closedAt": "2024-03-04T16:36:48Z",
      "mergedAt": "2024-03-04T16:36:48Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "e9e02bf9bf0088de42a85da3c8491c6a1a7456d9"
      },
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "@bc-pi Two approvals, I believe we can merge this.",
          "createdAt": "2024-03-04T16:32:43Z",
          "updatedAt": "2024-03-04T16:32:43Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5yIOHs",
          "commit": {
            "abbreviatedOid": "6a54f50"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-04T16:24:43Z",
          "updatedAt": "2024-03-04T16:24:43Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5yISxf",
          "commit": {
            "abbreviatedOid": "6a54f50"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "lgtm",
          "createdAt": "2024-03-04T16:32:15Z",
          "updatedAt": "2024-03-04T16:32:15Z",
          "comments": []
        }
      ]
    },
    {
      "number": 217,
      "id": "PR_kwDOJbVClc5ooNBH",
      "title": "Just add -04 to the Document History to help future PRs remember",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/217",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-03-04T19:09:39Z",
      "updatedAt": "2024-03-04T19:14:58Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "e9e02bf9bf0088de42a85da3c8491c6a1a7456d9",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "starting-04",
      "headRefOid": "33ef041ecf19a45a3686241caaf942f77b902b8f",
      "closedAt": "2024-03-04T19:14:57Z",
      "mergedAt": "2024-03-04T19:14:57Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "f3e8ceb7637f351112dc02d9a9ea274f8a7cf040"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5yJr3t",
          "commit": {
            "abbreviatedOid": "33ef041"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-04T19:14:30Z",
          "updatedAt": "2024-03-04T19:14:30Z",
          "comments": []
        }
      ]
    },
    {
      "number": 219,
      "id": "PR_kwDOJbVClc5pK6vC",
      "title": "doc: improve description for a example of Key Binding JWT",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/219",
      "state": "MERGED",
      "author": "lukasjhan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Hi. I modified the example explanation to make it better understandable.\r\nSince the example of SD-JWT is long, I think separate explanations may not be easy to see at once.\r\nSo I combined the separate explanations into one.\r\nYou can check the discussion in #218\r\n\r\nThis is my first contribution here. If there is anything that needs to be corrected, \r\nplease feel free to let me know. :)\r\n\r\nThank you",
      "createdAt": "2024-03-10T14:41:02Z",
      "updatedAt": "2024-03-12T20:22:47Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "f3e8ceb7637f351112dc02d9a9ea274f8a7cf040",
      "headRepository": "lukasjhan/oauth-sd-jwt-vc",
      "headRefName": "doc/improve-description-kbjwt",
      "headRefOid": "3a6589c229790a62c6ef4acdda82836d1e0f0421",
      "closedAt": "2024-03-12T20:22:47Z",
      "mergedAt": "2024-03-12T20:22:47Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "4e9c49e2578ae8041de81205e2b32dc06a63a201"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "You should add yourself to the acknowledgements too",
          "createdAt": "2024-03-11T04:53:10Z",
          "updatedAt": "2024-03-11T04:53:10Z"
        },
        {
          "author": "lukasjhan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> You should add yourself to the acknowledgements too\r\n\r\nThank you :) I added.",
          "createdAt": "2024-03-11T05:25:50Z",
          "updatedAt": "2024-03-11T05:25:50Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc5y1Ur_",
          "commit": {
            "abbreviatedOid": "087d1e4"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-10T16:27:07Z",
          "updatedAt": "2024-03-10T16:27:07Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "Thanks Lukas! \r\nThe suggestion below has a few editorial updates and changes the way the section 3.3 reference works. \r\n\r\n```suggestion\r\nThe following is a non-normative example of a presentation of the SD-JWT shown in (#example) including a Key Binding JWT.\r\nIn this presentation, the Holder provides only the Disclosure for the  `address` claim. \r\nOther claims are not disclosed to the Verifier.\r\n```",
              "createdAt": "2024-03-10T16:27:07Z",
              "updatedAt": "2024-03-11T01:21:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5y2CYs",
          "commit": {
            "abbreviatedOid": "087d1e4"
          },
          "author": "lukasjhan",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-11T01:00:41Z",
          "updatedAt": "2024-03-11T01:00:41Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "@bc-pi I updated with the link to reference section 3.3 :)",
              "createdAt": "2024-03-11T01:00:41Z",
              "updatedAt": "2024-03-11T01:00:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5y2J7f",
          "commit": {
            "abbreviatedOid": "5ce3408"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-11T01:55:46Z",
          "updatedAt": "2024-03-11T01:55:46Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc5zHQAx",
          "commit": {
            "abbreviatedOid": "3a6589c"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-12T14:43:42Z",
          "updatedAt": "2024-03-12T14:43:42Z",
          "comments": []
        }
      ]
    },
    {
      "number": 220,
      "id": "PR_kwDOJbVClc5pjGPv",
      "title": "feat: add SD-JWT VC Type Metadata",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/220",
      "state": "MERGED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Add general SD-JWT VC Type Metadata framework based on @danielfett work: https://vcstuff.github.io/sd-jwt-vc-types/draft-fett-oauth-sd-jwt-vc-types.html\r\n\r\nSee preview here:\r\nhttps://drafts.oauth.net/oauth-sd-jwt-vc/awoie/feat-metadata/draft-ietf-oauth-sd-jwt-vc.html\r\n\r\nFixes #181, #171 ",
      "createdAt": "2024-03-13T20:03:41Z",
      "updatedAt": "2024-04-17T18:33:38Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "4e9c49e2578ae8041de81205e2b32dc06a63a201",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "awoie/feat-metadata",
      "headRefOid": "26cad108bca16e7a526f14789d88f59ef6095b26",
      "closedAt": "2024-04-17T18:33:38Z",
      "mergedAt": "2024-04-17T18:33:38Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "10bf0acab8094347d3826b4ab4138994454683dc"
      },
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "> For all these \"human readable strings\", please make sure to have an i18n story, and ideally reference PRECIS, or DisplayStrings, etc .\r\n\r\nYep, good point. I18N is definitely needed although I'm not too sure about name/description since those are intended for developers only, not for end-users. I'll create a ticket to consider I18N, and also discuss whether this is needed for dev-only fields. I18N is definitely something we should add to metadata but needed some PR to start with first.",
          "createdAt": "2024-04-02T09:49:53Z",
          "updatedAt": "2024-04-02T09:49:53Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "We have 3 approvals and no new comments coming in after 2 weeks. I propose to merge this PR @bc-pi @danielfett . PR was created 1 month ago.",
          "createdAt": "2024-04-17T18:17:22Z",
          "updatedAt": "2024-04-17T18:17:51Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc501SzB",
          "commit": {
            "abbreviatedOid": "06c75f4"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-26T11:50:50Z",
          "updatedAt": "2024-03-26T11:50:50Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "```suggestion\r\nA type is associated with metadata defining, for example, information about the type, a schema defining which claims may or must appear in the SD-JWT VC, and how they can be displayed.\r\n```",
              "createdAt": "2024-03-26T11:50:50Z",
              "updatedAt": "2024-03-26T11:50:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc501TRW",
          "commit": {
            "abbreviatedOid": "06c75f4"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-26T11:51:53Z",
          "updatedAt": "2024-03-26T11:51:53Z",
          "comments": [
            {
              "originalPosition": 47,
              "body": "We might also just call them \"consumers\".",
              "createdAt": "2024-03-26T11:51:53Z",
              "updatedAt": "2024-03-26T11:51:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc501UJ6",
          "commit": {
            "abbreviatedOid": "06c75f4"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-26T11:52:59Z",
          "updatedAt": "2024-03-26T11:52:59Z",
          "comments": [
            {
              "originalPosition": 120,
              "body": "```suggestion\r\n### From a Registry {#retrieval-from-registry}\r\n```",
              "createdAt": "2024-03-26T11:52:59Z",
              "updatedAt": "2024-03-26T11:52:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc501j7u",
          "commit": {
            "abbreviatedOid": "06c75f4"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-26T12:19:34Z",
          "updatedAt": "2024-03-26T12:19:34Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc51WhtG",
          "commit": {
            "abbreviatedOid": "06c75f4"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-29T15:47:15Z",
          "updatedAt": "2024-03-29T15:47:16Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "```suggestion\r\nA type is associated with metadata defining, for example, information about the type, a schema defining which claims MAY or MUST appear in the SD-JWT VC, and how they can be displayed.\r\n```",
              "createdAt": "2024-03-29T15:47:16Z",
              "updatedAt": "2024-03-29T15:47:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc51Wiyj",
          "commit": {
            "abbreviatedOid": "2a5439a"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-29T15:48:52Z",
          "updatedAt": "2024-03-29T15:48:52Z",
          "comments": [
            {
              "originalPosition": 47,
              "body": "I like that better.",
              "createdAt": "2024-03-29T15:48:52Z",
              "updatedAt": "2024-03-29T15:48:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc51bFv_",
          "commit": {
            "abbreviatedOid": "ac974c4"
          },
          "author": "OR13",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "For all these \"human readable strings\", please make sure to have an i18n story, and ideally reference PRECIS, or DisplayStrings, etc .",
          "createdAt": "2024-03-30T18:11:02Z",
          "updatedAt": "2024-03-30T18:11:02Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc51sNMT",
          "commit": {
            "abbreviatedOid": "ac974c4"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-02T17:45:39Z",
          "updatedAt": "2024-04-02T17:45:40Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "This is qualified with \"for example\" but the type metadata in the PR currently doesn't define this stuff. I'm still unsure about leaving portions of sd-jwt-vc-types like claims and display out of this PR. But should we at least track that in an issue? ",
              "createdAt": "2024-04-02T17:45:39Z",
              "updatedAt": "2024-04-02T17:45:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc51sNbx",
          "commit": {
            "abbreviatedOid": "ac974c4"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-02T17:46:13Z",
          "updatedAt": "2024-04-02T17:46:13Z",
          "comments": [
            {
              "originalPosition": 42,
              "body": "similar comment as https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/220/files#r1548311395 here ",
              "createdAt": "2024-04-02T17:46:13Z",
              "updatedAt": "2024-04-02T17:46:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc51sN6N",
          "commit": {
            "abbreviatedOid": "ac974c4"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-02T17:47:08Z",
          "updatedAt": "2024-04-02T17:47:09Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "```suggestion\r\nThis section defines Type Metadata that can be associated with a type of a SD-JWT VC as well as a method for retrieving the Type Metadata and processing rules. This Type Metadata is intended to be used, among other things, for the following purposes:\r\n```",
              "createdAt": "2024-04-02T17:47:09Z",
              "updatedAt": "2024-04-02T17:47:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc51sOM6",
          "commit": {
            "abbreviatedOid": "ac974c4"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-02T17:47:48Z",
          "updatedAt": "2024-04-02T17:47:48Z",
          "comments": [
            {
              "originalPosition": 47,
              "body": "```suggestion\r\nApplications using Type Metadata defined in this specification are called \"Consumers\" in the following. This typically includes Issuers, Verifiers, and Wallets.\r\n```",
              "createdAt": "2024-04-02T17:47:48Z",
              "updatedAt": "2024-04-02T17:47:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc51sQn6",
          "commit": {
            "abbreviatedOid": "ac974c4"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-02T17:52:28Z",
          "updatedAt": "2024-04-02T17:52:29Z",
          "comments": [
            {
              "originalPosition": 165,
              "body": "This should maybe be a subsection of Type Metadata so... ?\r\n```suggestion\r\n## Document Integrity {#document-integrity}\r\n```",
              "createdAt": "2024-04-02T17:52:29Z",
              "updatedAt": "2024-04-02T17:52:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc51sU-K",
          "commit": {
            "abbreviatedOid": "ac974c4"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-02T18:00:58Z",
          "updatedAt": "2024-04-02T18:00:59Z",
          "comments": [
            {
              "originalPosition": 165,
              "body": "It is meant as a mechanism that can be used for multiple claims defined in the spec. If we only need it for the Type Metadata claims, this should be a subsection. Otherwise, a top-level section.",
              "createdAt": "2024-04-02T18:00:58Z",
              "updatedAt": "2024-04-02T18:00:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc51sZKN",
          "commit": {
            "abbreviatedOid": "ac974c4"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-02T18:07:26Z",
          "updatedAt": "2024-04-02T18:07:26Z",
          "comments": [
            {
              "originalPosition": 165,
              "body": "It should be a top-level section imo since it is a general mechanism.",
              "createdAt": "2024-04-02T18:07:26Z",
              "updatedAt": "2024-04-02T18:07:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc51sbJJ",
          "commit": {
            "abbreviatedOid": "20690db"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-02T18:10:33Z",
          "updatedAt": "2024-04-02T18:10:33Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "created #224 ",
              "createdAt": "2024-04-02T18:10:33Z",
              "updatedAt": "2024-04-02T18:10:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc51scSG",
          "commit": {
            "abbreviatedOid": "ac974c4"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-02T18:13:10Z",
          "updatedAt": "2024-04-02T18:13:10Z",
          "comments": [
            {
              "originalPosition": 165,
              "body": "agreed on the april 2nd call that it should stay a top-level claim.",
              "createdAt": "2024-04-02T18:13:10Z",
              "updatedAt": "2024-04-02T18:13:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc51sfD-",
          "commit": {
            "abbreviatedOid": "26cad10"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-04-02T18:17:22Z",
          "updatedAt": "2024-04-17T18:29:58Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc52Lrxh",
          "commit": {
            "abbreviatedOid": "20690db"
          },
          "author": "c2bo",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-05T10:56:54Z",
          "updatedAt": "2024-04-05T10:56:54Z",
          "comments": [
            {
              "originalPosition": 103,
              "body": "I do believe we need a bit more text here on how exactly extending works:\r\n- Can we only introduce new claims and re-use the parts we are extending (which is what I would assume so far?)\r\n- Can we also override existing information?",
              "createdAt": "2024-04-05T10:56:54Z",
              "updatedAt": "2024-04-05T10:56:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc52L6PF",
          "commit": {
            "abbreviatedOid": "20690db"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-05T11:13:32Z",
          "updatedAt": "2024-04-05T11:13:32Z",
          "comments": [
            {
              "originalPosition": 103,
              "body": "Indeed, but that should be defined in the context (and the PR) of the particular property, e.g., the display property or the schema.",
              "createdAt": "2024-04-05T11:13:32Z",
              "updatedAt": "2024-04-05T11:13:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc52NGiU",
          "commit": {
            "abbreviatedOid": "26cad10"
          },
          "author": "c2bo",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-04-05T13:13:20Z",
          "updatedAt": "2024-04-17T18:29:58Z",
          "comments": []
        }
      ]
    },
    {
      "number": 228,
      "id": "PR_kwDOJbVClc5up17Z",
      "title": "Update Reference to IETF OAuth Token Status List",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/228",
      "state": "MERGED",
      "author": "paulbastian",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-05-06T15:48:54Z",
      "updatedAt": "2024-05-07T08:47:31Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "10bf0acab8094347d3826b4ab4138994454683dc",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "227-add-reference-to-new-status-list-ietf",
      "headRefOid": "b7b55397644591b5e4c0b10ac27940bf9c1b7224",
      "closedAt": "2024-05-07T08:47:31Z",
      "mergedAt": "2024-05-07T08:47:30Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "fd8288b5c8c5142a6ef21546eb042bca34c743ee"
      },
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Two approvals and this is a minor update. Will merge now.",
          "createdAt": "2024-05-07T08:47:28Z",
          "updatedAt": "2024-05-07T08:47:28Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc55q3aS",
          "commit": {
            "abbreviatedOid": "b7b5539"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-05-06T17:12:30Z",
          "updatedAt": "2024-05-06T17:12:30Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc55q4wq",
          "commit": {
            "abbreviatedOid": "b7b5539"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-05-06T17:15:55Z",
          "updatedAt": "2024-05-06T17:15:55Z",
          "comments": []
        }
      ]
    },
    {
      "number": 230,
      "id": "PR_kwDOJbVClc5uvHQg",
      "title": "Clarify that MAC is supported for VCs and presentations",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/230",
      "state": "MERGED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "- Updated terminology and other sections to clarify VCs and presentations can be repudiable or non-repudiable\r\n- Minor typo fixed\r\n\r\nSee preview here:\r\nhttps://drafts.oauth.net/oauth-sd-jwt-vc/awoie/fix-191-mac-language/draft-ietf-oauth-sd-jwt-vc.html\r\n\r\nFixes #191 ",
      "createdAt": "2024-05-07T09:36:03Z",
      "updatedAt": "2024-05-09T15:48:33Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "fd8288b5c8c5142a6ef21546eb042bca34c743ee",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "awoie/fix-191-mac-language",
      "headRefOid": "2bf19ed8a641373923ca63d0c585245b000d57e7",
      "closedAt": "2024-05-09T15:48:33Z",
      "mergedAt": "2024-05-09T15:48:33Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "baa28104c0cc62b202a52505819054510b7c4618"
      },
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "3 approvals, merging",
          "createdAt": "2024-05-09T15:47:07Z",
          "updatedAt": "2024-05-09T15:47:07Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc55xoFS",
          "commit": {
            "abbreviatedOid": "7626bf4"
          },
          "author": "paulbastian",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-05-07T12:30:47Z",
          "updatedAt": "2024-05-07T12:30:47Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc550hh9",
          "commit": {
            "abbreviatedOid": "7626bf4"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-07T17:43:15Z",
          "updatedAt": "2024-05-07T17:43:15Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I'm not sure if we can just drop those words here and expect people to understand what this means.",
              "createdAt": "2024-05-07T17:43:15Z",
              "updatedAt": "2024-05-07T17:43:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc550iA2",
          "commit": {
            "abbreviatedOid": "7626bf4"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-07T17:44:25Z",
          "updatedAt": "2024-05-07T17:44:25Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "As above, I'm not sure the first sentence works without further explanation.",
              "createdAt": "2024-05-07T17:44:25Z",
              "updatedAt": "2024-05-07T17:44:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc550yFc",
          "commit": {
            "abbreviatedOid": "7626bf4"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-07T18:22:38Z",
          "updatedAt": "2024-05-07T18:22:39Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "```suggestion\r\n:  An assertion with claims about a Subject that is cryptographically secured by an Issuer (usually by a digital signature).\r\n```",
              "createdAt": "2024-05-07T18:22:38Z",
              "updatedAt": "2024-05-07T18:22:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc550yLZ",
          "commit": {
            "abbreviatedOid": "7626bf4"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-07T18:22:53Z",
          "updatedAt": "2024-05-07T18:22:53Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nCredentials are cryptographically secured statements about a Subject, typically the Holder.\r\n```",
              "createdAt": "2024-05-07T18:22:53Z",
              "updatedAt": "2024-05-07T18:22:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc550ykP",
          "commit": {
            "abbreviatedOid": "7626bf4"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-07T18:23:47Z",
          "updatedAt": "2024-05-07T18:23:48Z",
          "comments": [
            {
              "originalPosition": 50,
              "body": "```suggestion\r\n* Updated terminology to clarify digital signatures are one way to secure VCs and presentations\r\n```",
              "createdAt": "2024-05-07T18:23:47Z",
              "updatedAt": "2024-05-07T18:23:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc5500Aw",
          "commit": {
            "abbreviatedOid": "2bf19ed"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-05-07T18:27:14Z",
          "updatedAt": "2024-05-07T18:27:14Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc559PnO",
          "commit": {
            "abbreviatedOid": "2bf19ed"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-05-08T16:13:45Z",
          "updatedAt": "2024-05-08T16:13:45Z",
          "comments": []
        }
      ]
    },
    {
      "number": 231,
      "id": "PR_kwDOJbVClc5vavvO",
      "title": "Add schema type metadata",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/231",
      "state": "MERGED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This PR includes the following:\r\n\r\n- [x] Add schema type metadata\r\n- [x] Add full schema type metadata examples\r\n- [x] Describe base document for schema validation\r\n- [x] Minor editorial fixes\r\n- [x] Moved type metadata retrieval section for readability purposes \r\n- [x] ~IANA considerations for `schema`, `schema_uri` and `schema_uri#integrity`~\r\n\r\nSee preview here:\r\nhttps://drafts.oauth.net/oauth-sd-jwt-vc/awoie/fix-229-schema/draft-ietf-oauth-sd-jwt-vc.html\r\n\r\nFixes https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/229",
      "createdAt": "2024-05-14T15:19:12Z",
      "updatedAt": "2024-07-08T15:50:09Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "a8eedd93e2e6f02fe0c7f308658d07d854ebf9dc",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "awoie/fix-229-schema",
      "headRefOid": "b44d32cd0ad1315b1b5f740fb7141847fef202f2",
      "closedAt": "2024-07-08T15:50:09Z",
      "mergedAt": "2024-07-08T15:50:09Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "ec6d9b97d301c95b7daf2c9ed425998cd01580ae"
      },
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "@danielfett @bc-pi Do you think it makes sense to describe the base document for schema type metadata validation? For example, a verifier receiving an SD-JWT VC with Disclosures won't be able to validate the JSON schema against it before transforming the entire SD-JWT VC with Disclosures to expanded JSON document first.",
          "createdAt": "2024-05-14T15:22:53Z",
          "updatedAt": "2024-05-14T15:22:53Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "@danielfett @bc-pi Should we restrict schema to specific JSON schema versions?",
          "createdAt": "2024-05-14T15:23:25Z",
          "updatedAt": "2024-05-14T15:23:25Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> @danielfett @bc-pi Should we restrict schema to specific JSON schema versions?\r\n\r\nI'm honestly not familiar with the intricacies of JSON schema. Is/are there a stable standard version(s) that can be referenced from a prospective RFC? The current content of the PR seems to have some normative statements but no reference. I'd think that's kind of a prerequisite to discussing version restrictions/requirements.   \r\n\r\nA few minutes of looking around and I found this https://json-schema.org/specification-links which at least suggests it's a bit messy. \r\n\r\nAny idea if/how other actual standards documents utilize JSON schema?",
          "createdAt": "2024-05-19T13:10:49Z",
          "updatedAt": "2024-05-19T13:10:49Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> @danielfett @bc-pi Do you think it makes sense to describe the base document for schema type metadata validation? For example, a verifier receiving an SD-JWT VC with Disclosures won't be able to validate the JSON schema against it before transforming the entire SD-JWT VC with Disclosures to expanded JSON document first.\r\n\r\nWell, statements like \"MUST validate the Verifiable Credential against the provided JSON Schema document.\" probably need some more clarity about what part of the VC and at what stage of transformation/processing. ",
          "createdAt": "2024-05-19T14:16:53Z",
          "updatedAt": "2024-05-19T14:16:53Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "> A few minutes of looking around and I found this https://json-schema.org/specification-links which at least suggests it's a bit messy.\r\n> \r\n> Any idea if/how other actual standards documents utilize JSON schema?\r\n\r\nI suggest that we proceed with merging this PR nonetheless and have a separate discussion on JSON Schema versions in an issue.\r\n",
          "createdAt": "2024-06-05T07:47:29Z",
          "updatedAt": "2024-06-05T07:47:29Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Update: We don't need IANA registration for schema, schema_uri and schema_uri#integrity since type metadata is not a JWT.",
          "createdAt": "2024-06-11T15:55:54Z",
          "updatedAt": "2024-06-11T15:55:54Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "@bc-pi @danielfett Can you please check the examples I added. ",
          "createdAt": "2024-07-01T15:20:12Z",
          "updatedAt": "2024-07-01T15:20:12Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "> @bc-pi @danielfett Can you please check the examples I added.\r\n\r\nI believe we will need to distinguish between presentation and issuance schemas -> see #237 ",
          "createdAt": "2024-07-01T15:21:19Z",
          "updatedAt": "2024-07-01T15:21:19Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> \\@bc-pi \\@danielfett Can you please check the examples I added.\r\n\r\nI don't really speak JSON schema but it looks ok ",
          "createdAt": "2024-07-01T17:15:20Z",
          "updatedAt": "2024-07-01T17:15:20Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "> left a couple of editorial remarks, but generally this looks good to me, thank you!\r\n\r\nThanks a lot. I updated the PR. Will merge later on the editor's call.",
          "createdAt": "2024-07-08T06:51:13Z",
          "updatedAt": "2024-07-08T06:51:13Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Merging this since all comments were addressed.",
          "createdAt": "2024-07-08T15:34:08Z",
          "updatedAt": "2024-07-08T15:34:08Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc56qeqY",
          "commit": {
            "abbreviatedOid": "c386f8f"
          },
          "author": "oed",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-15T13:05:00Z",
          "updatedAt": "2024-05-15T13:05:00Z",
          "comments": [
            {
              "originalPosition": 46,
              "body": "Is the `vct` field required in a metadata JSON object? This would break compatibility with content addressable storage systems. For example, if I want to use `ipfs://<hash>` as a `vct` uri. It would be easy to use the ipfs-uri in the JWT, but it's impossible to put it inside of the metadata JSON object, since it would require knowing the hash of that object before calculating it.\r\n\r\nSeems like `vct` needs to be optional here.",
              "createdAt": "2024-05-15T13:05:00Z",
              "updatedAt": "2024-05-15T13:05:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc56qpDa",
          "commit": {
            "abbreviatedOid": "c386f8f"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-15T13:19:17Z",
          "updatedAt": "2024-05-15T13:19:17Z",
          "comments": [
            {
              "originalPosition": 46,
              "body": "Yes, I agree that this would not work with content addressable storage systems the way it is defined now. It is a chicken and egg problem. IMO, we should support content addressable hash URIs for `vct` and make `vct` optional in the type metadata.\r\n\r\n@danielfett @bc-pi is there a security-related reason to make `vct` in type metadata mandatory?",
              "createdAt": "2024-05-15T13:19:17Z",
              "updatedAt": "2024-05-15T13:19:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc56rcg2",
          "commit": {
            "abbreviatedOid": "c386f8f"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-15T14:31:00Z",
          "updatedAt": "2024-05-15T14:31:00Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\n: Applications using the Type Metadata specified in (#type-metadata) are called Consumer. This typically includes Issuers, Verifiers, and Wallets.\r\n```",
              "createdAt": "2024-05-15T14:31:00Z",
              "updatedAt": "2024-05-15T14:32:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc56rc_x",
          "commit": {
            "abbreviatedOid": "c386f8f"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2024-05-15T14:31:45Z",
          "updatedAt": "2024-05-15T14:34:30Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "```suggestion\r\nAn SD-JWT VC type, i.e., a `vct` value, is associated with Type Metadata defining, for example, information about the type or a schema defining which claims MAY or MUST appear in the SD-JWT VC.\r\n```",
              "createdAt": "2024-05-15T14:31:45Z",
              "updatedAt": "2024-05-15T14:34:31Z"
            },
            {
              "originalPosition": 46,
              "body": "As it is designed at the moment, vct is at least required for usage in glue documents. We need to figure out how to address this.",
              "createdAt": "2024-05-15T14:33:40Z",
              "updatedAt": "2024-05-15T14:34:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc56r8vY",
          "commit": {
            "abbreviatedOid": "c386f8f"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-15T15:19:12Z",
          "updatedAt": "2024-05-15T15:19:12Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Thanks, I wanted to change this as well :)",
              "createdAt": "2024-05-15T15:19:12Z",
              "updatedAt": "2024-05-15T15:19:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc57FmZn",
          "commit": {
            "abbreviatedOid": "c386f8f"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-19T12:19:04Z",
          "updatedAt": "2024-05-19T12:19:04Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Thank you, yes, this needed the additional context. ",
              "createdAt": "2024-05-19T12:19:04Z",
              "updatedAt": "2024-05-19T12:19:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc57FpHj",
          "commit": {
            "abbreviatedOid": "7f3493a"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-19T13:12:53Z",
          "updatedAt": "2024-05-19T13:12:53Z",
          "comments": [
            {
              "originalPosition": 80,
              "body": "are both really needed?",
              "createdAt": "2024-05-19T13:12:53Z",
              "updatedAt": "2024-05-19T13:12:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc57Fpfz",
          "commit": {
            "abbreviatedOid": "7f3493a"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-19T13:21:47Z",
          "updatedAt": "2024-05-19T13:21:47Z",
          "comments": [
            {
              "originalPosition": 46,
              "body": "I'm not sure that storage and retrieval of Type Metadata from content addressable storage systems is or should a goal. ",
              "createdAt": "2024-05-19T13:21:47Z",
              "updatedAt": "2024-05-19T13:21:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc57F6gn",
          "commit": {
            "abbreviatedOid": "c386f8f"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-19T21:42:28Z",
          "updatedAt": "2024-05-19T21:42:28Z",
          "comments": [
            {
              "originalPosition": 46,
              "body": "IMO, there is a community that uses this and SD-JWT VC and if possible we should help them to support this.",
              "createdAt": "2024-05-19T21:42:28Z",
              "updatedAt": "2024-05-19T21:42:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc57HPMz",
          "commit": {
            "abbreviatedOid": "c386f8f"
          },
          "author": "oed",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-20T06:57:55Z",
          "updatedAt": "2024-05-20T06:57:55Z",
          "comments": [
            {
              "originalPosition": 46,
              "body": "> I'm not sure that storage and retrieval of Type Metadata from content addressable storage systems is or should a goal.\r\n\r\nThis makes me sad. If sd-jwt vc actively is trying to disallow usage by CAS systems we won't be able to adopt it. \r\nThere are a few reasons why I think using CAS (over something like http) is nice:\r\n1. Less trust assumptions, if the url is the hash, I know what I get is correct no matter who gives it to me\r\n2. Less technical assumptions, hashes are generally technically simpler than https signatures\r\n3. Content can't be arbitrarily changed, with https the DNS controller ultimately decides what content is served",
              "createdAt": "2024-05-20T06:57:55Z",
              "updatedAt": "2024-05-20T06:57:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc57HSFu",
          "commit": {
            "abbreviatedOid": "c386f8f"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-20T07:05:21Z",
          "updatedAt": "2024-05-20T07:05:21Z",
          "comments": [
            {
              "originalPosition": 46,
              "body": "The goal should be to not prohibit it, we don't need to add normative language around that.",
              "createdAt": "2024-05-20T07:05:21Z",
              "updatedAt": "2024-05-20T07:05:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc58xPXm",
          "commit": {
            "abbreviatedOid": "7f3493a"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-03T09:18:20Z",
          "updatedAt": "2024-06-03T09:18:20Z",
          "comments": [
            {
              "originalPosition": 46,
              "body": "I would be fine with adding a mechanism to allow that. We should not omit vct, but set it to a defined value in such cases, e.g., empty string, a URN, or null.",
              "createdAt": "2024-06-03T09:18:20Z",
              "updatedAt": "2024-06-03T09:18:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc58xPpG",
          "commit": {
            "abbreviatedOid": "7f3493a"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-03T09:18:52Z",
          "updatedAt": "2024-06-03T09:18:52Z",
          "comments": [
            {
              "originalPosition": 80,
              "body": "I think so, yes. Some schemas already exist, they can be referenced here. In other cases, embedding is useful.",
              "createdAt": "2024-06-03T09:18:52Z",
              "updatedAt": "2024-06-03T09:18:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc58-qD8",
          "commit": {
            "abbreviatedOid": "c386f8f"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-04T15:45:58Z",
          "updatedAt": "2024-06-04T15:45:58Z",
          "comments": [
            {
              "originalPosition": 46,
              "body": "As this question is not directly related to the PR, please continue the discussion in this issue: https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/211",
              "createdAt": "2024-06-04T15:45:58Z",
              "updatedAt": "2024-06-04T15:45:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc59o5cR",
          "commit": {
            "abbreviatedOid": "c386f8f"
          },
          "author": "oed",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-10T13:52:00Z",
          "updatedAt": "2024-06-10T13:52:00Z",
          "comments": [
            {
              "originalPosition": 46,
              "body": "@danielfett I would say it's actually directly related ro the PR since the issue only exist in the context of the `vct` field inside of the type metadata object.",
              "createdAt": "2024-06-10T13:52:00Z",
              "updatedAt": "2024-06-10T13:52:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6AQfhJ",
          "commit": {
            "abbreviatedOid": "22b9e67"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-01T16:35:54Z",
          "updatedAt": "2024-07-01T16:35:55Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "This change effectively removes the definition of \"Consumer\" but the term is used a few times later on. ",
              "createdAt": "2024-07-01T16:35:54Z",
              "updatedAt": "2024-07-01T16:35:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6AQgLY",
          "commit": {
            "abbreviatedOid": "22b9e67"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-01T16:37:43Z",
          "updatedAt": "2024-07-01T16:37:43Z",
          "comments": [
            {
              "originalPosition": 42,
              "body": "is this not true? or moved?",
              "createdAt": "2024-07-01T16:37:43Z",
              "updatedAt": "2024-07-01T16:37:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6AQgQl",
          "commit": {
            "abbreviatedOid": "22b9e67"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-01T16:37:57Z",
          "updatedAt": "2024-07-01T16:37:57Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "nevermind, I see it moved ",
              "createdAt": "2024-07-01T16:37:57Z",
              "updatedAt": "2024-07-01T16:37:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6AQlKu",
          "commit": {
            "abbreviatedOid": "22b9e67"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-01T16:50:48Z",
          "updatedAt": "2024-07-01T16:50:48Z",
          "comments": [
            {
              "originalPosition": 142,
              "body": "must not change their type either or anything else that might affect their syntactic validity or semantic intent ",
              "createdAt": "2024-07-01T16:50:48Z",
              "updatedAt": "2024-07-01T16:50:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6ARfoO",
          "commit": {
            "abbreviatedOid": "22b9e67"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-01T18:55:58Z",
          "updatedAt": "2024-07-01T18:55:58Z",
          "comments": [
            {
              "originalPosition": 42,
              "body": "Not yet :) because the display feature is still pending",
              "createdAt": "2024-07-01T18:55:58Z",
              "updatedAt": "2024-07-01T18:55:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6ARgie",
          "commit": {
            "abbreviatedOid": "22b9e67"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-01T18:58:17Z",
          "updatedAt": "2024-07-01T18:58:18Z",
          "comments": [
            {
              "originalPosition": 142,
              "body": "Can a JSON schema change the type of a credential? on the other hand, it is a good point that technically, it is possible to assert a specific `vct` value in the JSON schema which would be weird as it would prevent other types to extend that type, right?",
              "createdAt": "2024-07-01T18:58:18Z",
              "updatedAt": "2024-07-01T18:58:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6ARotl",
          "commit": {
            "abbreviatedOid": "22b9e67"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-01T19:21:17Z",
          "updatedAt": "2024-07-01T19:21:17Z",
          "comments": [
            {
              "originalPosition": 42,
              "body": "sigh... I really dislike how we've elected to do this. Is that bullet thereby included in the PR for that feature? ",
              "createdAt": "2024-07-01T19:21:17Z",
              "updatedAt": "2024-07-01T19:21:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6ARpSk",
          "commit": {
            "abbreviatedOid": "22b9e67"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-01T19:23:09Z",
          "updatedAt": "2024-07-01T19:23:09Z",
          "comments": [
            {
              "originalPosition": 142,
              "body": "I meant the data type where the \"their\" seemed to refer to any particular property. But what you said too. ",
              "createdAt": "2024-07-01T19:23:09Z",
              "updatedAt": "2024-07-01T19:23:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6AR2Im",
          "commit": {
            "abbreviatedOid": "2338d38"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-07-01T20:03:55Z",
          "updatedAt": "2024-07-01T20:03:55Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc6A1yi_",
          "commit": {
            "abbreviatedOid": "2338d38"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-06T19:31:19Z",
          "updatedAt": "2024-07-06T19:31:19Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "\"Schema\" should only be uppercased when used in \"JSON Schema\", otherwise I'd use lowercase (unless we define the term).",
              "createdAt": "2024-07-06T19:31:19Z",
              "updatedAt": "2024-07-06T19:31:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6A1yjh",
          "commit": {
            "abbreviatedOid": "2338d38"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-06T19:31:41Z",
          "updatedAt": "2024-07-06T19:31:41Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "\"Schema\" as above",
              "createdAt": "2024-07-06T19:31:41Z",
              "updatedAt": "2024-07-06T19:31:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6A1ylO",
          "commit": {
            "abbreviatedOid": "2338d38"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "left a couple of editorial remarks, but generally this looks good to me, thank you!",
          "createdAt": "2024-07-06T19:32:44Z",
          "updatedAt": "2024-07-06T19:37:36Z",
          "comments": [
            {
              "originalPosition": 126,
              "body": "```suggestion\r\nAn SD-JWT VC type can extend another type. The extended type is identified by the URI in\r\n```",
              "createdAt": "2024-07-06T19:32:44Z",
              "updatedAt": "2024-07-06T19:37:36Z"
            },
            {
              "originalPosition": 140,
              "body": "```suggestion\r\nA Schema MUST be represented by a JSON Schema document according to draft version 2020-12 [@JSON.SCHEMA.2020-12] or above.\r\n```",
              "createdAt": "2024-07-06T19:34:45Z",
              "updatedAt": "2024-07-06T19:37:36Z"
            },
            {
              "originalPosition": 219,
              "body": "```suggestion\r\nNote that `iss` and `vct` are always required by this specification.\r\n```",
              "createdAt": "2024-07-06T19:35:23Z",
              "updatedAt": "2024-07-06T19:37:36Z"
            },
            {
              "originalPosition": 224,
              "body": "```suggestion\r\n(as defined in Section 8 of [@!I-D.ietf-oauth-selective-disclosure-jwt]) against the JSON Schema document provided by the `schema` or `schema_uri` property.\r\n```",
              "createdAt": "2024-07-06T19:36:04Z",
              "updatedAt": "2024-07-06T19:37:36Z"
            }
          ]
        }
      ]
    },
    {
      "number": 235,
      "id": "PR_kwDOJbVClc5xhQ4Q",
      "title": "Fix #234 (Improve Example)",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/235",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Fixes #234",
      "createdAt": "2024-06-05T08:36:52Z",
      "updatedAt": "2024-07-01T19:32:58Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "baa28104c0cc62b202a52505819054510b7c4618",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "danielfett/fix-234",
      "headRefOid": "1e73ea0b0bf682ec24570082fc3c9c4e1a9990f7",
      "closedAt": "2024-07-01T19:32:58Z",
      "mergedAt": "2024-07-01T19:32:58Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "a8eedd93e2e6f02fe0c7f308658d07d854ebf9dc"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc59J-lL",
          "commit": {
            "abbreviatedOid": "c9333ef"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-05T16:59:37Z",
          "updatedAt": "2024-06-05T16:59:37Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc59sfm3",
          "commit": {
            "abbreviatedOid": "c9333ef"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-10T21:49:05Z",
          "updatedAt": "2024-06-10T21:49:05Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "wait... `oTxxE//FNomPebw6yH9aNuEPUjbiYqaxBj1ZgMMBsxHmjTOBDhRiVCUD2bhVlzYg` decodes to 48 bytes, which doesn't track too well with `sha256` while `WRL5ca_xGgX3c1VLmXfh-9cLlJNXN-TsMk-PmKjZ5t0` is the 32 bytes one would expect. Why'd you change this value?  ",
              "createdAt": "2024-06-10T21:49:05Z",
              "updatedAt": "2024-06-10T21:49:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc59sfsY",
          "commit": {
            "abbreviatedOid": "c9333ef"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-10T21:49:20Z",
          "updatedAt": "2024-06-10T21:49:20Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "see also https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/235/files#r1633871626 ",
              "createdAt": "2024-06-10T21:49:20Z",
              "updatedAt": "2024-06-10T21:49:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc59sgOQ",
          "commit": {
            "abbreviatedOid": "c9333ef"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "how many bytes would a vct#integrity byte if a vct#integrity could byte integrity? ",
          "createdAt": "2024-06-10T21:50:44Z",
          "updatedAt": "2024-06-10T21:50:44Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc6AQIvc",
          "commit": {
            "abbreviatedOid": "c9333ef"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "looks good to me but @bc-pi comment has to be fixed",
          "createdAt": "2024-07-01T15:43:27Z",
          "updatedAt": "2024-07-01T15:43:27Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc6AQpes",
          "commit": {
            "abbreviatedOid": "c9333ef"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-01T17:00:58Z",
          "updatedAt": "2024-07-01T17:00:58Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "```suggestion\r\n  \"vct#integrity\": \"sha256-WRL5ca_xGgX3c1VLmXfh-9cLlJNXN-TsMk-PmKjZ5t0\",\r\n```",
              "createdAt": "2024-07-01T17:00:58Z",
              "updatedAt": "2024-07-01T17:00:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6AQpoG",
          "commit": {
            "abbreviatedOid": "c9333ef"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-01T17:01:22Z",
          "updatedAt": "2024-07-01T17:01:22Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "```suggestion\r\n`WRL5ca_xGgX3c1VLmXfh-9cLlJNXN-TsMk-PmKjZ5t0`.\r\n```",
              "createdAt": "2024-07-01T17:01:22Z",
              "updatedAt": "2024-07-01T17:01:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6AQrJ7",
          "commit": {
            "abbreviatedOid": "1e73ea0"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-07-01T17:05:24Z",
          "updatedAt": "2024-07-01T17:05:24Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc6ARfQ1",
          "commit": {
            "abbreviatedOid": "1e73ea0"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-07-01T18:55:08Z",
          "updatedAt": "2024-07-01T18:55:08Z",
          "comments": []
        }
      ]
    },
    {
      "number": 236,
      "id": "PR_kwDOJbVClc5xiR58",
      "title": "Add display and claim metadata",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/236",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "This PR adds the display and claim metadata as defined in the Type Metadata draft (with minor changes).\r\n\r\nNote that this includes the \"claim verification metadata\" and \"claim selective disclosure metadata\", where there were some discussions around the requirements and mechanisms to use. I left them in here to foster a discussion, but we can also split them out into separate PRs.\r\n\r\nRendered version: https://drafts.oauth.net/oauth-sd-jwt-vc/danielfett/fix-224-add-display-metadata/draft-ietf-oauth-sd-jwt-vc.html",
      "createdAt": "2024-06-05T10:42:42Z",
      "updatedAt": "2024-09-17T18:20:00Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "1a3dd92e53b8a757601df845190b59918872bfb8",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "danielfett/fix-224-add-display-metadata",
      "headRefOid": "ee6c131d87dfc11de8d444682ea331c697041e6a",
      "closedAt": "2024-09-17T18:20:00Z",
      "mergedAt": "2024-09-17T18:20:00Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "7f525e7c6cfa11905b578a5079f8ce74da6eda8a"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> We had to remove the display feature language in the schema PR for consistency reasons and because we didn't want to suggest features are included that are in fact not there yet. So, this PR should re-introduce the language in the type metadata intro:\r\n> \r\n> > , and how they can be displayed.\r\n\r\nhttps://github.com/oauth-wg/oauth-sd-jwt-vc/pull/231/files#r1661453204 and https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/231/files#diff-e750c0958ca10e395b4d3b77bb5aafccc668b4a1a50675dda79a8d90b39a2468L494 are where that happened or will happen ",
          "createdAt": "2024-07-01T20:11:29Z",
          "updatedAt": "2024-07-01T20:11:29Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc59sTwq",
          "commit": {
            "abbreviatedOid": "9aac8d4"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-10T21:16:20Z",
          "updatedAt": "2024-06-10T21:16:20Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "I don't love the property name as a language tag value approach. And I know it's been discussed in other forums too. We can discuss during a call a day later than usual and maybe an hour or two earlier but I'm wondering about an array of objects with the language tag as a property of each alongside name, description, etc.  ",
              "createdAt": "2024-06-10T21:16:20Z",
              "updatedAt": "2024-06-10T21:16:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc59sV__",
          "commit": {
            "abbreviatedOid": "9aac8d4"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-10T21:23:17Z",
          "updatedAt": "2024-06-10T21:23:17Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "same thought for #claim-display-metadata ",
              "createdAt": "2024-06-10T21:23:17Z",
              "updatedAt": "2024-06-10T21:23:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc59sYlt",
          "commit": {
            "abbreviatedOid": "9aac8d4"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-10T21:32:08Z",
          "updatedAt": "2024-06-10T21:32:08Z",
          "comments": [
            {
              "originalPosition": 110,
              "body": "to me, the phrasing \"how the claim is verified\" kinda suggests that it's something the verifier needs to be doing when verifying/validating the credential. I think \"\"how the claim was verified\" better conveys what I think you're intent is.\r\n\r\n```suggestion\r\n- `verification`: A string indicating how the claim was verified, as described in\r\n```",
              "createdAt": "2024-06-10T21:32:08Z",
              "updatedAt": "2024-06-10T21:32:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc59sYuT",
          "commit": {
            "abbreviatedOid": "9aac8d4"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-10T21:32:39Z",
          "updatedAt": "2024-06-10T21:32:39Z",
          "comments": [
            {
              "originalPosition": 204,
              "body": "same as https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/236/files#r1633851709 \r\n```suggestion\r\nThe `verification` property is a string indicating how the claim was verified.\r\n```",
              "createdAt": "2024-06-10T21:32:39Z",
              "updatedAt": "2024-06-10T21:32:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc59scEM",
          "commit": {
            "abbreviatedOid": "9aac8d4"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-10T21:39:29Z",
          "updatedAt": "2024-06-10T21:39:29Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "at some point (not necessarily this PR tho) an example type metadata document showing some/many of these options would be very helpful ",
              "createdAt": "2024-06-10T21:39:29Z",
              "updatedAt": "2024-06-10T21:39:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc59sdMb",
          "commit": {
            "abbreviatedOid": "9aac8d4"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-10T21:40:53Z",
          "updatedAt": "2024-06-10T21:40:53Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "i know there's something over in https://github.com/vcstuff/sd-jwt-vc-types ",
              "createdAt": "2024-06-10T21:40:53Z",
              "updatedAt": "2024-06-10T21:40:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc59seOQ",
          "commit": {
            "abbreviatedOid": "9aac8d4"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-10T21:44:06Z",
          "updatedAt": "2024-06-10T21:44:07Z",
          "comments": [
            {
              "originalPosition": 229,
              "body": "are we keeping track of any of this type meta stuff in the document history? ",
              "createdAt": "2024-06-10T21:44:06Z",
              "updatedAt": "2024-06-10T21:44:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6ARwXy",
          "commit": {
            "abbreviatedOid": "9aac8d4"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "We had to remove the display feature language in the schema PR for consistency reasons and because we didn't want to suggest features are included that are in fact not there yet. So, this PR should re-introduce the language in the type metadata intro:\r\n> , and how they can be displayed.",
          "createdAt": "2024-07-01T19:45:50Z",
          "updatedAt": "2024-07-01T19:45:50Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc6A9mm6",
          "commit": {
            "abbreviatedOid": "9abc5d4"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-08T15:08:53Z",
          "updatedAt": "2024-07-08T15:08:54Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "duly noted by me ",
              "createdAt": "2024-07-08T15:08:53Z",
              "updatedAt": "2024-07-08T15:08:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6A9rBd",
          "commit": {
            "abbreviatedOid": "0a26a60"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-08T15:14:40Z",
          "updatedAt": "2024-07-08T15:14:40Z",
          "comments": [
            {
              "originalPosition": 229,
              "body": "0a26a60bd8ae80776df4d2efc424d0815b6de385 kinda sorta ",
              "createdAt": "2024-07-08T15:14:40Z",
              "updatedAt": "2024-07-08T15:14:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6BAaa0",
          "commit": {
            "abbreviatedOid": "0a26a60"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-08T20:43:00Z",
          "updatedAt": "2024-07-08T20:43:00Z",
          "comments": [
            {
              "originalPosition": 237,
              "body": "-04 has been released to the wild so this needs to move into a -05  ",
              "createdAt": "2024-07-08T20:43:00Z",
              "updatedAt": "2024-07-08T20:43:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6BJndB",
          "commit": {
            "abbreviatedOid": "9aac8d4"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-09T15:59:50Z",
          "updatedAt": "2024-07-09T15:59:50Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "which is also fwiw more similar to how oid4vi approached it https://openid.net/specs/openid-4-verifiable-credential-issuance-1_0-13.html#name-credential-issuer-metadata-6 ",
              "createdAt": "2024-07-09T15:59:50Z",
              "updatedAt": "2024-07-09T15:59:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6FSq1q",
          "commit": {
            "abbreviatedOid": "0a26a60"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "please update the language tag approach to reflect the rough consensus achieved briefly in the room (where you were not present) at IETF 120 ",
          "createdAt": "2024-08-13T18:19:25Z",
          "updatedAt": "2024-08-13T18:19:25Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc6FgnL6",
          "commit": {
            "abbreviatedOid": "9e3c3e5"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-15T08:07:30Z",
          "updatedAt": "2024-08-15T08:07:31Z",
          "comments": [
            {
              "originalPosition": 237,
              "body": "Thanks, fixed!",
              "createdAt": "2024-08-15T08:07:30Z",
              "updatedAt": "2024-08-15T08:07:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6Fgn9W",
          "commit": {
            "abbreviatedOid": "9aac8d4"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-15T08:09:52Z",
          "updatedAt": "2024-08-15T08:09:52Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "Thanks, I changed this, but used `lang` instead of `locale`. I think this might a more fitting name as this is about translations, less about the other aspects of localization.",
              "createdAt": "2024-08-15T08:09:52Z",
              "updatedAt": "2024-08-15T08:09:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6GCD9Z",
          "commit": {
            "abbreviatedOid": "acbba6e"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-20T18:01:10Z",
          "updatedAt": "2024-08-20T18:01:10Z",
          "comments": [
            {
              "originalPosition": 280,
              "body": "I know there's a certain appeal to this kind of file include in the abstract but IMHO hard won experience with the technique has shown that it makes maintenance, contributions, and general progress on the whole document project much more difficult and error prone. Unless there's compelling reason to have a separate file (e.g., automated generation or preprocessing or similar), I will *highly* suggest we just inline these things.",
              "createdAt": "2024-08-20T18:01:10Z",
              "updatedAt": "2024-08-20T18:08:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6GCKnN",
          "commit": {
            "abbreviatedOid": "acbba6e"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-20T18:15:13Z",
          "updatedAt": "2024-08-20T18:15:14Z",
          "comments": [
            {
              "originalPosition": 280,
              "body": "Fixed!",
              "createdAt": "2024-08-20T18:15:13Z",
              "updatedAt": "2024-08-20T18:15:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6GMx9j",
          "commit": {
            "abbreviatedOid": "be04290"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "`Request changes` sorry... but the issuer isn't always the owner of the type metadata \r\n\r\n",
          "createdAt": "2024-08-21T17:39:05Z",
          "updatedAt": "2024-08-21T17:45:46Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "but `Type Metadata` is not necessarily or even typically produced or hosted by an issuer... ",
              "createdAt": "2024-08-21T17:39:05Z",
              "updatedAt": "2024-08-21T17:45:46Z"
            },
            {
              "originalPosition": 267,
              "body": "This entire section seems to assume that the Issuer is the same entity that produces/owns/controls/etc the type metadata. Which isn't always or even often the case. ",
              "createdAt": "2024-08-21T17:44:09Z",
              "updatedAt": "2024-08-21T17:45:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6GaoWH",
          "commit": {
            "abbreviatedOid": "be04290"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-22T16:30:21Z",
          "updatedAt": "2024-08-22T16:30:22Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "```suggestion\r\n   consistent with the intent of the provider of the Type Metadata.\r\n```",
              "createdAt": "2024-08-22T16:30:21Z",
              "updatedAt": "2024-08-22T16:30:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6Gaqm7",
          "commit": {
            "abbreviatedOid": "be04290"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-22T16:34:43Z",
          "updatedAt": "2024-08-22T16:34:43Z",
          "comments": [
            {
              "originalPosition": 267,
              "body": "As agreed on the call, I'll remove that feature for now",
              "createdAt": "2024-08-22T16:34:43Z",
              "updatedAt": "2024-08-22T16:34:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6GdsR-",
          "commit": {
            "abbreviatedOid": "daf13d2"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-22T22:49:18Z",
          "updatedAt": "2024-08-22T22:49:19Z",
          "comments": [
            {
              "originalPosition": 267,
              "body": "As said on the call, thanks. Perhaps put an issue in, if you want to keep track of it? Unless you feel #145 or other is enough.",
              "createdAt": "2024-08-22T22:49:19Z",
              "updatedAt": "2024-08-22T22:49:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6GjD9z",
          "commit": {
            "abbreviatedOid": "daf13d2"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-23T14:03:10Z",
          "updatedAt": "2024-08-23T14:07:10Z",
          "comments": [
            {
              "originalPosition": 54,
              "body": "Why is this part of this PR?",
              "createdAt": "2024-08-23T14:03:10Z",
              "updatedAt": "2024-08-23T14:07:10Z"
            },
            {
              "originalPosition": 81,
              "body": "Why is this optional?",
              "createdAt": "2024-08-23T14:03:31Z",
              "updatedAt": "2024-08-23T14:07:10Z"
            },
            {
              "originalPosition": 88,
              "body": "Should this require at least one rendering method to be present?",
              "createdAt": "2024-08-23T14:03:46Z",
              "updatedAt": "2024-08-23T14:07:10Z"
            },
            {
              "originalPosition": 103,
              "body": "CSS color reference is missing.",
              "createdAt": "2024-08-23T14:05:36Z",
              "updatedAt": "2024-08-23T14:07:10Z"
            },
            {
              "originalPosition": 232,
              "body": "IMO, this shouldn't be a note if it contains normative MUST.\r\n```suggestion\r\nThe `path` property MUST point to the respective claim as if all\r\n```",
              "createdAt": "2024-08-23T14:06:13Z",
              "updatedAt": "2024-08-23T14:07:10Z"
            },
            {
              "originalPosition": 247,
              "body": "Why is this optional?",
              "createdAt": "2024-08-23T14:06:38Z",
              "updatedAt": "2024-08-23T14:07:10Z"
            },
            {
              "originalPosition": 252,
              "body": "Can you explain how this applies to NIST 800-63 IAL assurance levels.",
              "createdAt": "2024-08-23T14:07:03Z",
              "updatedAt": "2024-08-23T14:07:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6GjknJ",
          "commit": {
            "abbreviatedOid": "daf13d2"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-23T15:04:10Z",
          "updatedAt": "2024-08-23T15:04:10Z",
          "comments": [
            {
              "originalPosition": 54,
              "body": "> Why is this part of this PR?\r\n\r\ngood catch and excellent question \r\n\r\nif I have my links right, this is already at \r\nhttps://github.com/oauth-wg/oauth-sd-jwt-vc/pull/236/files#diff-e750c0958ca10e395b4d3b77bb5aafccc668b4a1a50675dda79a8d90b39a2468R642",
              "createdAt": "2024-08-23T15:04:10Z",
              "updatedAt": "2024-08-23T15:04:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6HHGVf",
          "commit": {
            "abbreviatedOid": "88467bf"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-28T16:41:13Z",
          "updatedAt": "2024-08-28T16:41:14Z",
          "comments": [
            {
              "originalPosition": 248,
              "body": "```suggestion\r\n  property is REQUIRED.\r\n```",
              "createdAt": "2024-08-28T16:41:13Z",
              "updatedAt": "2024-08-28T16:41:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6HHGkE",
          "commit": {
            "abbreviatedOid": "88467bf"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-28T16:41:42Z",
          "updatedAt": "2024-08-28T16:41:42Z",
          "comments": [
            {
              "originalPosition": 267,
              "body": "```suggestion\r\n```",
              "createdAt": "2024-08-28T16:41:42Z",
              "updatedAt": "2024-08-28T16:41:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6HHG45",
          "commit": {
            "abbreviatedOid": "88467bf"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-28T16:42:23Z",
          "updatedAt": "2024-08-28T16:42:23Z",
          "comments": [
            {
              "originalPosition": 82,
              "body": "```suggestion\r\n  property is REQUIRED.\r\n```",
              "createdAt": "2024-08-28T16:42:23Z",
              "updatedAt": "2024-08-28T16:42:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6HHIty",
          "commit": {
            "abbreviatedOid": "17b29d8"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-28T16:45:47Z",
          "updatedAt": "2024-08-28T16:45:47Z",
          "comments": [
            {
              "originalPosition": 54,
              "body": "```suggestion\r\n```",
              "createdAt": "2024-08-28T16:45:47Z",
              "updatedAt": "2024-08-28T16:45:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6H4APM",
          "commit": {
            "abbreviatedOid": "982f49f"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-09-04T10:07:38Z",
          "updatedAt": "2024-09-04T10:07:38Z",
          "comments": [
            {
              "originalPosition": 113,
              "body": "Todo: Add details about the template itself.\r\n",
              "createdAt": "2024-09-04T10:07:38Z",
              "updatedAt": "2024-09-04T10:07:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6JJaII",
          "commit": {
            "abbreviatedOid": "b448cc9"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-09-12T17:12:04Z",
          "updatedAt": "2024-09-12T17:12:04Z",
          "comments": [
            {
              "originalPosition": 169,
              "body": "```suggestion\r\n  <text x=\"10\" y=\"20\">Street address: {{address_street_address}}</text>\r\n```",
              "createdAt": "2024-09-12T17:12:04Z",
              "updatedAt": "2024-09-12T17:12:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6JJdrR",
          "commit": {
            "abbreviatedOid": "b448cc9"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-09-12T17:20:12Z",
          "updatedAt": "2024-09-12T17:20:12Z",
          "comments": [
            {
              "originalPosition": 161,
              "body": "```suggestion\r\nMUST be replaced with an empty string or a string appropriate to indicate that\r\nthe value is empty.\r\n```\r\n... or something like this.",
              "createdAt": "2024-09-12T17:20:12Z",
              "updatedAt": "2024-09-12T17:20:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6JJlmo",
          "commit": {
            "abbreviatedOid": "b448cc9"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-09-12T17:36:15Z",
          "updatedAt": "2024-09-12T17:36:16Z",
          "comments": [
            {
              "originalPosition": 161,
              "body": "```suggestion\r\nMUST be replaced with an empty string or a string appropriate to indicate that\r\nthe value is absent.\r\n```\r\n... or something like that ? ",
              "createdAt": "2024-09-12T17:36:15Z",
              "updatedAt": "2024-09-12T17:36:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6JTs5V",
          "commit": {
            "abbreviatedOid": "b448cc9"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-09-13T17:07:53Z",
          "updatedAt": "2024-09-13T17:07:53Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc6JVCMU",
          "commit": {
            "abbreviatedOid": "b448cc9"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "some nit picky suggestions but overall lgtm ",
          "createdAt": "2024-09-13T19:54:52Z",
          "updatedAt": "2024-09-13T20:14:40Z",
          "comments": [
            {
              "originalPosition": 67,
              "body": "To me, the \"MUST have the following\" followed by a list of things where each thing is itself REQUIRED or OPTIONAL is an awkward construction. \r\n\r\n```suggestion\r\nThe objects in the array have the following properties:\r\n```",
              "createdAt": "2024-09-13T19:54:52Z",
              "updatedAt": "2024-09-13T20:14:40Z"
            },
            {
              "originalPosition": 88,
              "body": "To me, the \"MUST have the following\" followed by a list of things where each thing is itself OPTIONAL is an awkward construction.\r\n```suggestion\r\nsupport SVG rendering. The object contains the following properties:\r\n```",
              "createdAt": "2024-09-13T19:58:59Z",
              "updatedAt": "2024-09-13T20:14:40Z"
            },
            {
              "originalPosition": 277,
              "body": "```suggestion\r\nThe objects in the array have the following properties:\r\n```",
              "createdAt": "2024-09-13T20:06:48Z",
              "updatedAt": "2024-09-13T20:14:40Z"
            },
            {
              "originalPosition": 418,
              "body": "I know it's not consistent with the other JSON formatting in this example but I think showing `path` this way conveys the idea much more intuitively.  \r\n```suggestion\r\n      \"path\": [\"address\"],\r\n```",
              "createdAt": "2024-09-13T20:12:22Z",
              "updatedAt": "2024-09-13T20:14:40Z"
            },
            {
              "originalPosition": 437,
              "body": "I know it's not consistent with the other JSON formatting in this example but I think showing `path` this way conveys the idea much more intuitively.  \r\n\r\n```suggestion\r\n      \"path\": [\"address\", \"street_address\"],\r\n```",
              "createdAt": "2024-09-13T20:13:02Z",
              "updatedAt": "2024-09-13T20:14:40Z"
            },
            {
              "originalPosition": 455,
              "body": "```suggestion\r\n      \"path\": [\"degrees\", null],\r\n```",
              "createdAt": "2024-09-13T20:13:34Z",
              "updatedAt": "2024-09-13T20:14:40Z"
            },
            {
              "originalPosition": 400,
              "body": "I know it's not consistent with the other JSON formatting in this example but I think showing path this way conveys the idea much more intuitively.\r\n```suggestion\r\n      \"path\": [\"name\"],\r\n```",
              "createdAt": "2024-09-13T20:14:00Z",
              "updatedAt": "2024-09-13T20:14:40Z"
            }
          ]
        }
      ]
    },
    {
      "number": 239,
      "id": "PR_kwDOJbVClc50GizN",
      "title": "Rework key resolution/validation for x5c (tryin' to fix #232)",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/239",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-07-01T17:55:45Z",
      "updatedAt": "2024-07-08T15:54:35Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "ec6d9b97d301c95b7daf2c9ed425998cd01580ae",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "bc-iss-not-dns-uri-scheme-wtf-x5t-kid-url-ffs-https-etc-etc",
      "headRefOid": "12ac5d263808109a4862b5f05839d625894a1262",
      "closedAt": "2024-07-08T15:54:35Z",
      "mergedAt": "2024-07-08T15:54:35Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "c9cfe8cf33a61c3d889e3112d5bac299b0708a0e"
      },
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Two approvals, merging now.",
          "createdAt": "2024-07-08T15:54:18Z",
          "updatedAt": "2024-07-08T15:54:18Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc6ARe8C",
          "commit": {
            "abbreviatedOid": "4baf016"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "lgtm",
          "createdAt": "2024-07-01T18:54:21Z",
          "updatedAt": "2024-07-01T18:54:21Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc6AWrBN",
          "commit": {
            "abbreviatedOid": "4baf016"
          },
          "author": "babisRoutis",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-02T10:39:53Z",
          "updatedAt": "2024-07-02T10:39:53Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "I find the following part confusing\r\n\r\n> or that the domain name in the `iss` value\r\n\r\nI believe it would be more clear something like:\r\n\r\nIt MUST also ensure that the `iss` value matches a `uniformResourceIdentifier` or a `dNSName` SAN entry of the end-entity certificate.\r\n\r\n",
              "createdAt": "2024-07-02T10:39:53Z",
              "updatedAt": "2024-07-02T10:39:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6AWs-v",
          "commit": {
            "abbreviatedOid": "4baf016"
          },
          "author": "babisRoutis",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-02T10:44:01Z",
          "updatedAt": "2024-07-02T10:44:02Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "PS: After this PR, my understanding is that the following options would be available\r\n\r\n- `iss` is HTTPS URL, `x5c` is not provided, `kid` maybe used (recommended) => Resolve pub key via metadata\r\n- `iss` is DID, `x5c is not provided, `kid` is DID-URL => Resolve pub key via DID resolution\r\n- `iss` is a HTTPS URL, `x5c` is provided  => Pub Key is the leaf certificate, `iss` must be a SAN `uniformResourceIdentifier` entry\r\n- `iss` is a string, `x5c` is provided => Pub key is the leaf certificate, `iss` must be a SAN `dNSName`  entry",
              "createdAt": "2024-07-02T10:44:01Z",
              "updatedAt": "2024-07-02T10:44:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6AbpdB",
          "commit": {
            "abbreviatedOid": "4baf016"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-02T19:52:21Z",
          "updatedAt": "2024-07-02T19:52:21Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "Sigh, yeah. I was just going to say something about iss always having to be an HTTPS URL. And then I realized I was confused about what layer what restriction is coming from due to being careless and having carelessly internalized some of the discussion in https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/232 and https://github.com/openid/oid4vc-haip-sd-jwt-vc/issues/103. ",
              "createdAt": "2024-07-02T19:52:21Z",
              "updatedAt": "2024-07-02T19:52:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6Ab9eL",
          "commit": {
            "abbreviatedOid": "4baf016"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-02T20:27:02Z",
          "updatedAt": "2024-07-02T20:27:02Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "could be cleaner but hopefully this clarifies somewhat  \r\n```suggestion\r\n- X.509 Certificates: If the recipient supports X.509 Certificates and the `iss` value contains an HTTPS URI, the recipient MUST obtain the public key from the end-entity certificate of the certificates from the `x5c` header parameter of the Issuer-signed JWT and validate X.509 certificate chain accordingly. It MUST also ensure that the `iss` value matches a `uniformResourceIdentifier` SAN entry of the end-entity certificate or that the domain name in the `iss` value matches the `dNSName` SAN entry of the end-entity certificate.\r\n```",
              "createdAt": "2024-07-02T20:27:02Z",
              "updatedAt": "2024-07-02T20:33:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6Aex17",
          "commit": {
            "abbreviatedOid": "4baf016"
          },
          "author": "babisRoutis",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-03T06:22:10Z",
          "updatedAt": "2024-07-03T06:22:11Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "Dear @bc-pi \r\nThanks for the clarification. I think it is clear now. ",
              "createdAt": "2024-07-03T06:22:10Z",
              "updatedAt": "2024-07-03T06:22:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6AeyCf",
          "commit": {
            "abbreviatedOid": "2e6e35e"
          },
          "author": "babisRoutis",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-07-03T06:22:45Z",
          "updatedAt": "2024-07-03T06:22:45Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc6AgwAg",
          "commit": {
            "abbreviatedOid": "4baf016"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-03T10:26:58Z",
          "updatedAt": "2024-07-03T10:26:58Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "Thanks for catching the mistake ",
              "createdAt": "2024-07-03T10:26:58Z",
              "updatedAt": "2024-07-03T10:26:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6AhPNI",
          "commit": {
            "abbreviatedOid": "2e6e35e"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-03T11:29:25Z",
          "updatedAt": "2024-07-03T11:29:25Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\n- X.509 Certificates: If the recipient supports X.509 Certificates and the `iss` value contains an HTTPS URI, the recipient MUST obtain the public key from the end-entity certificate of the certificates from the `x5c` header parameter of the Issuer-signed JWT and validate the X.509 certificate chain accordingly. It MUST also ensure that the `iss` value matches a `uniformResourceIdentifier` SAN entry of the end-entity certificate or that the domain name in the `iss` value matches the `dNSName` SAN entry of the end-entity certificate.\r\n```",
              "createdAt": "2024-07-03T11:29:25Z",
              "updatedAt": "2024-07-03T11:29:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6A10BU",
          "commit": {
            "abbreviatedOid": "e413816"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-06T19:43:41Z",
          "updatedAt": "2024-07-06T19:43:42Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "To avoid any ambiguity around the \"it\" in the second sentence and make it more clear that both steps are important:\r\n\r\n```suggestion\r\n- X.509 Certificates: If the recipient supports X.509 Certificates and the `iss` value contains an HTTPS URI, the recipient MUST\r\n     1. obtain the public key from the end-entity certificate of the certificates from the `x5c` header parameter of the Issuer-signed JWT and validate the X.509 certificate chain accordingly, and\r\n     2. ensure that the `iss` value matches a `uniformResourceIdentifier` SAN entry of the end-entity certificate or that the domain name in the `iss` value matches the `dNSName` SAN entry of the end-entity certificate.\r\n```\r\n\r\n(Not sure if the indentation works.)",
              "createdAt": "2024-07-06T19:43:42Z",
              "updatedAt": "2024-07-06T19:43:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6A10HT",
          "commit": {
            "abbreviatedOid": "e413816"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-06T19:44:16Z",
          "updatedAt": "2024-07-06T19:44:16Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "Is it necessary to say what happens if no `x5c` header is present?",
              "createdAt": "2024-07-06T19:44:16Z",
              "updatedAt": "2024-07-06T19:44:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6A6ya2",
          "commit": {
            "abbreviatedOid": "e413816"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-08T10:21:57Z",
          "updatedAt": "2024-07-08T10:21:57Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "> (Not sure if the indentation works.)\r\n\r\nIt seems to have worked okay:\r\nhttps://drafts.oauth.net/oauth-sd-jwt-vc/bc-iss-not-dns-uri-scheme-wtf-x5t-kid-url-ffs-https-etc-etc/draft-ietf-oauth-sd-jwt-vc.html#name-issuer-signed-jwt-verificat",
              "createdAt": "2024-07-08T10:21:57Z",
              "updatedAt": "2024-07-08T10:21:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6A616G",
          "commit": {
            "abbreviatedOid": "e413816"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-08T10:29:31Z",
          "updatedAt": "2024-07-08T10:29:32Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "I don't think so - none of this applies then (\"If the recipient supports X.509 Certificates and the `iss` value contains an HTTPS URI\" = false) and _processing_ falls through to the end of that section,\r\n\r\nhttps://drafts.oauth.net/oauth-sd-jwt-vc/bc-iss-not-dns-uri-scheme-wtf-x5t-kid-url-ffs-https-etc-etc/draft-ietf-oauth-sd-jwt-vc.html#section-3.5-4\r\n\r\n> If a recipient cannot validate that the public verification key corresponds to the iss value of the Issuer-signed JWT, the SD-JWT VC MUST be rejected.",
              "createdAt": "2024-07-08T10:29:31Z",
              "updatedAt": "2024-07-08T10:29:32Z"
            }
          ]
        }
      ]
    },
    {
      "number": 244,
      "id": "PR_kwDOJbVClc51m52f",
      "title": "Fixed a small typo",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/244",
      "state": "MERGED",
      "author": "bit-jniestroj",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fixed a small typo i saw while reading the documentation",
      "createdAt": "2024-07-17T08:16:48Z",
      "updatedAt": "2024-07-17T12:14:26Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "c9cfe8cf33a61c3d889e3112d5bac299b0708a0e",
      "headRepository": "bit-jniestroj/oauth-sd-jwt-vc",
      "headRefName": "main",
      "headRefOid": "0865ef637034a5b9cd6a01e955cff05a397fbf00",
      "closedAt": "2024-07-17T12:14:26Z",
      "mergedAt": "2024-07-17T12:14:26Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "d85fe46786a3c5af4496ddfbb9468fc8b796a9ea"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc6CGZXF",
          "commit": {
            "abbreviatedOid": "0865ef6"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks!",
          "createdAt": "2024-07-17T11:57:37Z",
          "updatedAt": "2024-07-17T11:57:37Z",
          "comments": []
        }
      ]
    },
    {
      "number": 251,
      "id": "PR_kwDOJbVClc544qFl",
      "title": "Tightened exposition of Issuer-signed JWT Verification Key Validation section (Drop all references to DIDs and DID resolution while leaving the exensiblity point for those who want to define a profile of SD-JWT VC using DIDs)",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/251",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-08-20T17:18:34Z",
      "updatedAt": "2024-12-03T18:50:28Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "94c571b6c746b48c16a0594df5529e69fd68c826",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "tighten-key-validation-section",
      "headRefOid": "5fbb1f411217758aaa5e954bc1aa6df4707b7620",
      "closedAt": "2024-11-13T12:32:48Z",
      "mergedAt": "2024-11-13T12:32:48Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "d85b362d7f1cbfd89105fe01aabbccc7f9ddbe85"
      },
      "comments": [
        {
          "author": "peacekeeper",
          "authorAssociation": "NONE",
          "body": "I suggest the title of this PR be changed to \"Remove support for DIDs\", in order to:\r\n- clearly communicate the author's intent here\r\n- ensure that followers of this repo do not miss the opportunity to discuss this proposed breaking change\r\n",
          "createdAt": "2024-09-20T14:51:17Z",
          "updatedAt": "2024-09-20T14:51:17Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "A breaking change has been merged without even trying to resolve the issue with parties that are impacted?",
          "createdAt": "2024-11-13T12:36:04Z",
          "updatedAt": "2024-11-13T12:36:04Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "it's not a breaking change, Alen ",
          "createdAt": "2024-11-13T12:39:11Z",
          "updatedAt": "2024-11-13T12:39:11Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "Fantastic! \r\n\r\nBy having a reference that allowed project to consistently implement key resolution using decentralised identifiers, this removal (without even trying to reach a consensus or even accept help from several people who offered it), you removed the option from the specs.\r\n\r\nWhat's the consensus mechanism in IETF specs writing? This decision is damaging both IETF, authors of this specs, and the community that would otherwise benefit from resolving the problem. Seems like requirements of your potential clients are unimportant.",
          "createdAt": "2024-11-13T12:53:33Z",
          "updatedAt": "2024-11-13T12:53:33Z"
        },
        {
          "author": "andorsk",
          "authorAssociation": "NONE",
          "body": "I am generally not very active in the IETF community, so apologies if I am misunderstanding something, but as a matter of process: There was no description provided on the PR and no issue linked as a reference for why this decision was made. \r\n\r\nThe breadcrumbs I've found have been left by the comments on the PR, not the authors, and I would like to understand both positions better.\r\n\r\nFurthermore, as someone following trails here, making a normative change on a highly used spec without contextualizing it does not feel appropriate relative to the IETF policies on [Pull Requests (4.2)](https://datatracker.ietf.org/doc/html/rfc8874#section-4.2). \r\n\r\nGiven the impact to the pro-DID community along with the adoption level of SD-JWT, it's possible this should have been classified as a [substantive change](https://datatracker.ietf.org/doc/html/rfc8874#mature-documents) and discussed using the policies generally prescribed by the IETF and discussed on the mailing list. \r\n\r\nIt would be immensely appreciated to add a description or link to the discussion that contextualizes this PR written by the authors of this PR. ",
          "createdAt": "2024-11-13T17:56:01Z",
          "updatedAt": "2024-11-13T17:58:12Z"
        },
        {
          "author": "ThierryThevenet",
          "authorAssociation": "NONE",
          "body": "Strange we are already several implementers using sd-jwt with DIDs!",
          "createdAt": "2024-11-15T15:18:48Z",
          "updatedAt": "2024-11-15T16:21:07Z"
        },
        {
          "author": "ottomorac",
          "authorAssociation": "NONE",
          "body": "DIDs are a long standing W3C recommended standard. Removing this from the spec is not a good idea.",
          "createdAt": "2024-11-27T18:45:09Z",
          "updatedAt": "2024-11-27T18:45:09Z"
        },
        {
          "author": "ssanchocanela",
          "authorAssociation": "NONE",
          "body": "In the recently approved eIDAS 2 Implementing Acts, the W3C Verifiable Credentials Data Model v1.1 is accepted as the format for PIDs. In many implementations, including the EBSI VC Profile, DIDs are used. Let\u2019s stop fighting over the different visions of Verifiable Credentials and join forces to create interoperable and open specifications that cater to various use cases.",
          "createdAt": "2024-11-28T05:33:29Z",
          "updatedAt": "2024-11-28T05:33:29Z"
        },
        {
          "author": "rohanmahy",
          "authorAssociation": "NONE",
          "body": "SD-JWT is a general purpose mechanism. I don't believe the DID-specific text belongs in this spec. There is no other language specific to URI scheme in the rest of the document, so why should it be here.\r\n\r\nFeel free to write a profile document that defines how to use DIDs with SD-JWT, but there is nothing which requires this in the base document.\r\n\r\nLikewise, this language (and the entire section) are about validating the issue for JWTs. This could apply to non-SD JWTs as well. As there is nothing specific about this section to selective disclosure JWTs I don't see why it should be in this document.",
          "createdAt": "2024-12-03T18:27:52Z",
          "updatedAt": "2024-12-03T18:34:01Z"
        },
        {
          "author": "ThierryThevenet",
          "authorAssociation": "NONE",
          "body": "It looks like the topic here is the resolution mode not the URI scheme and it is quite true that the DID resolution is very different from X509 and issuer metadata retrieval. So it is great to get it here no ?",
          "createdAt": "2024-12-03T18:50:26Z",
          "updatedAt": "2024-12-03T18:50:26Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc6GCT4A",
          "commit": {
            "abbreviatedOid": "2883693"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-08-20T18:30:58Z",
          "updatedAt": "2024-08-20T18:30:58Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc6KIRk6",
          "commit": {
            "abbreviatedOid": "40ec097"
          },
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-09-20T06:56:50Z",
          "updatedAt": "2024-09-20T06:56:51Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "This will limit the usability of the data model in some projects. @danielfett ?\r\n\r\nMay I propose an alternative text:\r\n\r\nWhen `iss` is a DID, `jwk` JWT header MUST be present. The JWK MUST contain the required key members for a JWK of that key type and MUST contain the `kid` member and MAY contain other JWK members. The `kid` must have the value of the key identifier in the DID Document. The DID method MUST support key resolution in JWK(S) format following the scheme: {DID registry URL}/{iss}{kid}?format=jwk",
              "createdAt": "2024-09-20T06:56:51Z",
              "updatedAt": "2024-09-20T06:56:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6KMZ4f",
          "commit": {
            "abbreviatedOid": "40ec097"
          },
          "author": "peacekeeper",
          "authorAssociation": "NONE",
          "state": "CHANGES_REQUESTED",
          "body": "This is not a good idea, for reasons explained here: https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/250",
          "createdAt": "2024-09-20T14:45:27Z",
          "updatedAt": "2024-09-20T14:45:27Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc6KMisX",
          "commit": {
            "abbreviatedOid": "40ec097"
          },
          "author": "selfissued",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-09-20T15:00:27Z",
          "updatedAt": "2024-09-20T15:00:27Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc6KPQRk",
          "commit": {
            "abbreviatedOid": "40ec097"
          },
          "author": "decentralgabe",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "I disagree with removing references to the DID specification.\r\n\r\nI believe the language should be improved as I have [outlined here](https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/250#issuecomment-2307611855) to maintain interoperability with DIDs for providing key material.",
          "createdAt": "2024-09-20T20:12:59Z",
          "updatedAt": "2024-09-20T20:12:59Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc6Qu9hz",
          "commit": {
            "abbreviatedOid": "40ec097"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-11T21:48:58Z",
          "updatedAt": "2024-11-11T21:48:58Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "It does not limit anything. ",
              "createdAt": "2024-11-11T21:48:58Z",
              "updatedAt": "2024-11-11T21:48:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6QwfGJ",
          "commit": {
            "abbreviatedOid": "40ec097"
          },
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-12T05:52:45Z",
          "updatedAt": "2024-11-12T05:52:45Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Then let's remove x509 :) It does not limit anything.",
              "createdAt": "2024-11-12T05:52:45Z",
              "updatedAt": "2024-11-12T05:52:45Z"
            }
          ]
        }
      ]
    },
    {
      "number": 252,
      "id": "PR_kwDOJbVClc55fd4S",
      "title": "clarify, add context, or otherwise improve examples",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/252",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "for #246 and hopefully/maybe #194 too \r\n\r\nhttps://drafts.oauth.net/oauth-sd-jwt-vc/clarify-examples-more/draft-ietf-oauth-sd-jwt-vc.html#name-example\r\n\r\nhttps://drafts.oauth.net/oauth-sd-jwt-vc/clarify-examples-more/draft-ietf-oauth-sd-jwt-vc.html#name-examples\r\n\r\nhttps://drafts.oauth.net/oauth-sd-jwt-vc/clarify-examples-more/draft-ietf-oauth-sd-jwt-vc.html#name-example-1-person-identifica",
      "createdAt": "2024-08-26T21:27:07Z",
      "updatedAt": "2024-09-12T21:04:35Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "d85fe46786a3c5af4496ddfbb9468fc8b796a9ea",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "clarify-examples-more",
      "headRefOid": "0ee3dac0764dfc5dfa0913aa18515c00a91b6836",
      "closedAt": "2024-09-12T21:04:35Z",
      "mergedAt": "2024-09-12T21:04:35Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "1a3dd92e53b8a757601df845190b59918872bfb8"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "@tlodderstedt this work and https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/457 were largely undertaken as a result of your questions/feedback",
          "createdAt": "2024-08-28T16:50:17Z",
          "updatedAt": "2024-08-28T16:50:17Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc6HHEgu",
          "commit": {
            "abbreviatedOid": "9825577"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-08-28T16:37:24Z",
          "updatedAt": "2024-08-28T16:37:24Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc6HkbzA",
          "commit": {
            "abbreviatedOid": "9825577"
          },
          "author": "c2bo",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-09-01T19:33:08Z",
          "updatedAt": "2024-09-01T19:36:21Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "```suggestion\r\nIn this presentation, the Holder provides only the Disclosures for the `address` and `is_over_65` claims.\r\n```",
              "createdAt": "2024-09-01T19:33:08Z",
              "updatedAt": "2024-09-01T19:36:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6ISWif",
          "commit": {
            "abbreviatedOid": "9825577"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-09-06T15:06:42Z",
          "updatedAt": "2024-09-06T15:06:42Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "Pretty sure extra spaces are overcome somewhere in the document building process but fixing it early can't hurt ",
              "createdAt": "2024-09-06T15:06:42Z",
              "updatedAt": "2024-09-06T15:06:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6JKt1L",
          "commit": {
            "abbreviatedOid": "0ee3dac"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-09-12T19:55:11Z",
          "updatedAt": "2024-09-12T19:55:11Z",
          "comments": []
        }
      ]
    },
    {
      "number": 254,
      "id": "PR_kwDOJbVClc578Fze",
      "title": "hope is a waking dream",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/254",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-09-18T18:44:39Z",
      "updatedAt": "2024-09-18T19:44:49Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "7f525e7c6cfa11905b578a5079f8ce74da6eda8a",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "sadness",
      "headRefOid": "67502aebd54a0017d545082389a0a9290b9419b6",
      "closedAt": "2024-09-18T18:53:34Z",
      "mergedAt": "2024-09-18T18:53:34Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "3c98dddf12baf6ea59cab70b0abee9d27cb39781"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "this forced my email into a commit or tag or PR or something, which \"fixed\" the email scrobbling for the -05\r\n\r\nhopefully #255 will help with proper scrobbling going forward \r\n\r\n",
          "createdAt": "2024-09-18T19:44:47Z",
          "updatedAt": "2024-09-18T19:44:47Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 255,
      "id": "PR_kwDOJbVClc578Q4y",
      "title": "Set upload email in makefile",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/255",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "attempt to avoid future failures uploading to the IETF datatracker due to scrobbling the wrong email \r\n\r\nsee:\r\nhttps://github.com/martinthomson/i-d-template/commit/638eeb4a9d39ed632176c3b0645b3e0ee59962b0#diff-008e429a10bb721eeba15490213909aebf09cda078e9942e524df5bd5837fc54R81-R86\r\n\r\n\r\nwas seeing:\r\n```\r\nRun martinthomson/i-d-template@v1\r\n/usr/bin/docker run --name ghcriomartinthomsonidtemplateactionlatest_49ecb8 --label f5dd11 --workdir /github/workspace --rm -e \"INPUT_MAKE\" -e \"INPUT_TOKEN\" -e \"GITHUB_TOKEN\" -e \"HOME\" -e \"GITHUB_JOB\" -e \"GITHUB_REF\" -e \"GITHUB_SHA\" -e \"GITHUB_REPOSITORY\" -e \"GITHUB_REPOSITORY_OWNER\" -e \"GITHUB_REPOSITORY_OWNER_ID\" -e \"GITHUB_RUN_ID\" -e \"GITHUB_RUN_NUMBER\" -e \"GITHUB_RETENTION_DAYS\" -e \"GITHUB_RUN_ATTEMPT\" -e \"GITHUB_REPOSITORY_ID\" -e \"GITHUB_ACTOR_ID\" -e \"GITHUB_ACTOR\" -e \"GITHUB_TRIGGERING_ACTOR\" -e \"GITHUB_WORKFLOW\" -e \"GITHUB_HEAD_REF\" -e \"GITHUB_BASE_REF\" -e \"GITHUB_EVENT_NAME\" -e \"GITHUB_SERVER_URL\" -e \"GITHUB_API_URL\" -e \"GITHUB_GRAPHQL_URL\" -e \"GITHUB_REF_NAME\" -e \"GITHUB_REF_PROTECTED\" -e \"GITHUB_REF_TYPE\" -e \"GITHUB_WORKFLOW_REF\" -e \"GITHUB_WORKFLOW_SHA\" -e \"GITHUB_WORKSPACE\" -e \"GITHUB_ACTION\" -e \"GITHUB_EVENT_PATH\" -e \"GITHUB_ACTION_REPOSITORY\" -e \"GITHUB_ACTION_REF\" -e \"GITHUB_PATH\" -e \"GITHUB_ENV\" -e \"GITHUB_STEP_SUMMARY\" -e \"GITHUB_STATE\" -e \"GITHUB_OUTPUT\" -e \"RUNNER_OS\" -e \"RUNNER_ARCH\" -e \"RUNNER_NAME\" -e \"RUNNER_ENVIRONMENT\" -e \"RUNNER_TOOL_CACHE\" -e \"RUNNER_TEMP\" -e \"RUNNER_WORKSPACE\" -e \"ACTIONS_RUNTIME_URL\" -e \"ACTIONS_RUNTIME_TOKEN\" -e \"ACTIONS_CACHE_URL\" -e \"ACTIONS_RESULTS_URL\" -e GITHUB_ACTIONS=true -e CI=true -v \"/var/run/docker.sock\":\"/var/run/docker.sock\" -v \"/home/runner/work/_temp/_github_home\":\"/github/home\" -v \"/home/runner/work/_temp/_github_workflow\":\"/github/workflow\" -v \"/home/runner/work/_temp/_runner_file_commands\":\"/github/file_commands\" -v \"/home/runner/work/oauth-sd-jwt-vc/oauth-sd-jwt-vc\":\"/github/workspace\" ghcr.io/martinthomson/i-d-template-action:latest  \"upload\"\r\nwarning: lib/default-branch.py: correcting the default branch locally:\r\nwarning: lib/default-branch.py:     git symbolic-ref refs/remotes/origin/HEAD refs/remotes/origin/main\r\nmake: '.targets.mk' is up to date.\r\nwarning: lib/default-branch.py: correcting the default branch locally:\r\nwarning: lib/default-branch.py:     git symbolic-ref refs/remotes/origin/HEAD refs/remotes/origin/main\r\ngit show \"draft-ietf-oauth-sd-jwt-vc-05:draft-ietf-oauth-sd-jwt-vc.md\" | sed -e 's/draft-ietf-oauth-sd-jwt-vc-latest/draft-ietf-oauth-sd-jwt-vc-05/g' >versioned/draft-ietf-oauth-sd-jwt-vc-05.md\r\ncat versioned/draft-ietf-oauth-sd-jwt-vc-05.md  | mmark | lib/trace.sh versioned/draft-ietf-oauth-sd-jwt-vc-05.xml -s venue python3 lib/add-note.py | lib/trace.sh versioned/draft-ietf-oauth-sd-jwt-vc-05.xml -s v2v3 xml2rfc -q --rfc-base-url https://www.rfc-editor.org/rfc/ --id-base-url https://datatracker.ietf.org/doc/html/ --cache=/github/workspace/.refcache --v2v3 /dev/stdin -o /dev/stdout >versioned/draft-ietf-oauth-sd-jwt-vc-05.xml\r\nrm versioned/draft-ietf-oauth-sd-jwt-vc-05.md\r\nset -ex; tag=\"draft-ietf-oauth-sd-jwt-vc-05\"; \\\r\nemail=\"$(lib/get-email.sh \"$tag\" \"versioned/draft-ietf-oauth-sd-jwt-vc-05.xml\")\"; \\\r\n[ -z \"$email\" ] && exit 1; \\\r\nreplaces() { \\\r\n  [ \"${1##*-}\" = \"00\" ] || return; \\\r\n  file=\"$(git ls-files \"${1%-[0-9][0-9]}.*\")\"; \\\r\n  for last in $(git log --follow --name-only --format=format: -- \"${file%-[0-9][0-9]}\" | sed -e '/^$/d' | grep -v draft-todo-yourname-protocol | cut -f 2 | uniq | tail +2); do \\\r\n    if [ -n \"$(git tag -l \"${last%.*}\")\" ]; then \\\r\n      echo -F; echo \"replaces=${last%.*}\"; break; \\\r\n    fi; \\\r\n  done; \\\r\n}; \\\r\nlib/trace.sh versioned/draft-ietf-oauth-sd-jwt-vc-05.xml -s upload-request curl -sS -D \"versioned/.draft-ietf-oauth-sd-jwt-vc-05.upload\" \\\r\n    -F \"user=$email\" -F \"xml=@versioned/draft-ietf-oauth-sd-jwt-vc-05.xml\" $(replaces \"$tag\") \\\r\n    \"https://datatracker.ietf.org/api/submission\" && echo && \\\r\n  (head -1 \"versioned/.draft-ietf-oauth-sd-jwt-vc-05.upload\" | grep -q '^HTTP/\\S\\S* 20[01]\\b' || lib/trace.sh versioned/draft-ietf-oauth-sd-jwt-vc-05.xml -s upload-result ! cat \"versioned/.draft-ietf-oauth-sd-jwt-vc-05.upload\" 1>&2)\r\n+ tag=draft-ietf-oauth-sd-jwt-vc-05\r\n++ lib/get-email.sh draft-ietf-oauth-sd-jwt-vc-05 versioned/draft-ietf-oauth-sd-jwt-vc-05.xml\r\n+ email=fett@danielfett.de\r\n+ '[' -z fett@danielfett.de ']'\r\n++ replaces draft-ietf-oauth-sd-jwt-vc-05\r\n++ '[' 05 = 00 ']'\r\n++ return\r\n+ lib/trace.sh versioned/draft-ietf-oauth-sd-jwt-vc-05.xml -s upload-request curl -sS -D versioned/.draft-ietf-oauth-sd-jwt-vc-05.upload -F user=fett@danielfett.de -F xml=@versioned/draft-ietf-oauth-sd-jwt-vc-05.xml https://datatracker.ietf.org/api/submission\r\n+ echo\r\n{\"error\": \"No person with username fett@danielfett.de\"}\r\n+ head -1 versioned/.draft-ietf-oauth-sd-jwt-vc-05.upload\r\n+ grep -q '^HTTP/\\S\\S* 20[01]\\b'\r\n+ lib/trace.sh versioned/draft-ietf-oauth-sd-jwt-vc-05.xml -s upload-result '!' cat versioned/.draft-ietf-oauth-sd-jwt-vc-05.upload\r\nHTTP/2 400 \r\ndate: Wed, 18 Sep 2024 18:10:56 GMT\r\ncontent-type: application/json\r\ncontent-length: 55\r\ncross-origin-opener-policy: unsafe-none\r\nreferrer-policy: strict-origin-when-cross-origin\r\nstrict-transport-security: max-age=3600; includeSubDomains\r\nvary: Cookie, origin\r\nx-content-type-options: nosniff\r\nx-frame-options: SAMEORIGIN\r\ncf-cache-status: DYNAMIC\r\nserver: cloudflare\r\ncf-ray: 8c534bad5c667ac2-SJC\r\nalt-svc: h3=\":443\"; ma=86400\r\n\r\nmake[2]: *** [lib/upload.mk:27: versioned/.draft-ietf-oauth-sd-jwt-vc-05.upload] Error 1\r\nmake[2]: *** Deleting file 'versioned/.draft-ietf-oauth-sd-jwt-vc-05.upload'\r\nmake[1]: *** [lib/upload.mk:47: versioned/.draft-ietf-oauth-sd-jwt-vc-05.upload] Error 2\r\nmake: *** [lib/upload.mk:22: upload] Error 2\r\n0s\r\n0s\r\n0s\r\n```",
      "createdAt": "2024-09-18T19:15:58Z",
      "updatedAt": "2024-09-24T19:55:41Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "3c98dddf12baf6ea59cab70b0abee9d27cb39781",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "hopefully-less-future-sadness",
      "headRefOid": "73c114ed070b6df1e5f419543ee40d55f7c62b7d",
      "closedAt": "2024-09-24T19:55:41Z",
      "mergedAt": "2024-09-24T19:55:41Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "473d8544ebd1e9d13a1d0ba95554585248d6bfa3"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "kinda related to https://github.com/martinthomson/i-d-template/issues/438 ",
          "createdAt": "2024-09-18T19:26:15Z",
          "updatedAt": "2024-09-18T19:26:15Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc6KpFGr",
          "commit": {
            "abbreviatedOid": "73c114e"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-09-24T18:11:55Z",
          "updatedAt": "2024-09-24T18:11:55Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc6KpN4Y",
          "commit": {
            "abbreviatedOid": "73c114e"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-09-24T18:29:33Z",
          "updatedAt": "2024-09-24T18:29:33Z",
          "comments": []
        }
      ]
    },
    {
      "number": 261,
      "id": "PR_kwDOJbVClc59-0uj",
      "title": "Fix #260",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/261",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Fixes issue #260 ",
      "createdAt": "2024-10-08T17:49:47Z",
      "updatedAt": "2024-10-08T18:11:08Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "473d8544ebd1e9d13a1d0ba95554585248d6bfa3",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "danielfett/fix-260",
      "headRefOid": "b1b7266cd18d18afc5e56a64617f22ac35bb84b2",
      "closedAt": "2024-10-08T18:11:08Z",
      "mergedAt": "2024-10-08T18:11:08Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "e505fe84bbe63058b327c44480e9e700fb50b3fe"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc6MYT9j",
          "commit": {
            "abbreviatedOid": "b1b7266"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-08T18:03:36Z",
          "updatedAt": "2024-10-08T18:03:36Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc6MYWB3",
          "commit": {
            "abbreviatedOid": "b1b7266"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "great PR or the greatest PR? ",
          "createdAt": "2024-10-08T18:08:03Z",
          "updatedAt": "2024-10-08T18:08:03Z",
          "comments": []
        }
      ]
    },
    {
      "number": 262,
      "id": "PR_kwDOJbVClc59-39N",
      "title": "Warn of the dangers of malicious text",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/262",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "discuss"
      ],
      "body": "Fixes #259 ",
      "createdAt": "2024-10-08T17:58:59Z",
      "updatedAt": "2025-03-11T18:31:54Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "81992e98cb4ade4026cc8ca721328aec6b1dddf5",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "danielfett/fix-259",
      "headRefOid": "62db7c533dccda5376a51adc9d79189bab1c2af7",
      "closedAt": "2025-03-11T18:31:53Z",
      "mergedAt": "2025-03-11T18:31:53Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "7aa0705344ce0dbb7dbfe70b223815c62fba2ae0"
      },
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Applies to claims as well (everything, really).\r\n\r\nJSON Schema might be malicious as well (e.g., via a regex).",
          "createdAt": "2024-10-08T18:10:48Z",
          "updatedAt": "2024-10-08T18:10:48Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "the rat hole is deep ...",
          "createdAt": "2024-10-08T18:13:37Z",
          "updatedAt": "2024-10-08T18:13:37Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> I agree with @bc-pi that the rat hole is very deep and we should probably refrain from scratching the surface only.\r\n\r\nOr be sufficently clear that we are just scratching the surface and not even trying to be comprehensive. ",
          "createdAt": "2024-12-02T18:35:18Z",
          "updatedAt": "2024-12-02T18:35:18Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "> > I agree with @bc-pi that the rat hole is very deep and we should probably refrain from scratching the surface only.\r\n> \r\n> Or be sufficently clear that we are just scratching the surface and not even trying to be comprehensive.\r\n\r\nI tried to make suggestions to this PR to make it more general. This would be another option.",
          "createdAt": "2024-12-03T06:21:22Z",
          "updatedAt": "2024-12-03T06:21:22Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc6MYUbW",
          "commit": {
            "abbreviatedOid": "40e69cc"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-08T18:04:35Z",
          "updatedAt": "2024-10-08T18:04:35Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc6NMzqO",
          "commit": {
            "abbreviatedOid": "40e69cc"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-15T11:02:06Z",
          "updatedAt": "2024-10-15T11:02:06Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc6TIWtt",
          "commit": {
            "abbreviatedOid": "40e69cc"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "I agree with @bc-pi that the rat hole is very deep and we should probably refrain from scratching the surface only.",
          "createdAt": "2024-11-28T15:22:49Z",
          "updatedAt": "2024-11-28T15:22:49Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc6TgLIr",
          "commit": {
            "abbreviatedOid": "40e69cc"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-03T06:20:50Z",
          "updatedAt": "2024-12-03T06:20:50Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "```suggestion\r\n## Risks Associated with Textual Information {#risks-textual-information}\r\n\r\nSome claims in the SD-JWT VC and properties in the Type Metadata, e.g., `display`, allows issuers and providers of metadata to\r\nspecify human-readable information. These can contain arbitrary textual information that\r\nmay be displayed to developers. As such, any consuming application MUST ensure that maliciously\r\ncrafted information cannot be used to compromise the security of the application\r\nor the privacy of the user. To this end, the following considerations apply:\r\n\r\n- The consuming application MUST ensure that the text is properly escaped before\r\n  displaying it to the user or transferring it into other contexts. For example,\r\n  if the data is displayed in an HTML document, the text MUST be properly\r\n  escaped to prevent Cross-Site Scripting (XSS) attacks.\r\n- The consuming application MUST ensure that the display of the user interface\r\n  elements cannot be distorted by overly long text or special characters.\r\n```",
              "createdAt": "2024-12-03T06:20:50Z",
              "updatedAt": "2024-12-03T06:20:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6ffEVi",
          "commit": {
            "abbreviatedOid": "62db7c5"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-11T18:29:55Z",
          "updatedAt": "2025-03-11T18:29:55Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc6ffEmG",
          "commit": {
            "abbreviatedOid": "62db7c5"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-11T18:30:11Z",
          "updatedAt": "2025-03-11T18:30:11Z",
          "comments": []
        }
      ]
    },
    {
      "number": 268,
      "id": "PR_kwDOJbVClc6BkVIw",
      "title": "change media type from `vc+sd-jwt` to `dc+sd-jwt`",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/268",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Update the anticipated media type registration request from `application/vc+sd-jwt` to `application/dc+sd-jwt` per the Dublin Accord (last slide of https://datatracker.ietf.org/meeting/121/materials/slides-121-oauth-sessb-sd-jwt-and-sd-jwt-vc-02) ",
      "createdAt": "2024-11-11T23:52:16Z",
      "updatedAt": "2024-11-13T12:28:08Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "e505fe84bbe63058b327c44480e9e700fb50b3fe",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "the-dublin-accord",
      "headRefOid": "c4ac71ab2ebe599a99d0016f1cc78fdc77baf1df",
      "closedAt": "2024-11-13T12:28:08Z",
      "mergedAt": "2024-11-13T12:28:08Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "94c571b6c746b48c16a0594df5529e69fd68c826"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc6Q35Kj",
          "commit": {
            "abbreviatedOid": "c4ac71a"
          },
          "author": "selfissued",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-11-12T19:57:38Z",
          "updatedAt": "2024-11-12T19:57:38Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc6Q357l",
          "commit": {
            "abbreviatedOid": "c4ac71a"
          },
          "author": "tplooker",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-11-12T19:59:18Z",
          "updatedAt": "2024-11-12T19:59:18Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc6Q39vV",
          "commit": {
            "abbreviatedOid": "c4ac71a"
          },
          "author": "peppelinux",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-11-12T20:06:43Z",
          "updatedAt": "2024-11-12T20:06:43Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc6Q4BDS",
          "commit": {
            "abbreviatedOid": "c4ac71a"
          },
          "author": "jogu",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-11-12T20:14:32Z",
          "updatedAt": "2024-11-12T20:14:32Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc6Q4F9z",
          "commit": {
            "abbreviatedOid": "c4ac71a"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-11-12T20:24:53Z",
          "updatedAt": "2024-11-12T20:24:53Z",
          "comments": []
        }
      ]
    },
    {
      "number": 269,
      "id": "PR_kwDOJbVClc6Bqflz",
      "title": "Add \u201cStatus\u201d field to well-known URI registration per IANA early review",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/269",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Add the \u201cStatus\u201d field for the well-known URI registration per IANA early review",
      "createdAt": "2024-11-12T17:23:20Z",
      "updatedAt": "2024-11-13T14:20:15Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "d85b362d7f1cbfd89105fe01aabbccc7f9ddbe85",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "IANA-1392244",
      "headRefOid": "04abe4795d5a2823e5594e9cb983a61ae4a454f1",
      "closedAt": "2024-11-13T14:20:14Z",
      "mergedAt": "2024-11-13T14:20:14Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "e2bed880dc34bf2b77ebb44cf9d30acfacb6d212"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc6RCmVG",
          "commit": {
            "abbreviatedOid": "04abe47"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-11-13T14:15:46Z",
          "updatedAt": "2024-11-13T14:15:46Z",
          "comments": []
        }
      ]
    },
    {
      "number": 271,
      "id": "PR_kwDOJbVClc6B169X",
      "title": "Add a placeholder -07 to Document History",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/271",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-11-13T21:37:45Z",
      "updatedAt": "2024-11-14T17:46:46Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "e2bed880dc34bf2b77ebb44cf9d30acfacb6d212",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "07",
      "headRefOid": "9044831650a9ddf8cffacef87fae2e8b579fd7f3",
      "closedAt": "2024-11-14T17:46:46Z",
      "mergedAt": "2024-11-14T17:46:46Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "da2dbec746a55f7c618c95ed752c17bd74b06a26"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc6RPWTx",
          "commit": {
            "abbreviatedOid": "9044831"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-11-14T17:07:17Z",
          "updatedAt": "2024-11-14T17:07:17Z",
          "comments": []
        }
      ]
    },
    {
      "number": 272,
      "id": "PR_kwDOJbVClc6B7pvy",
      "title": "Remove .well-known for vcts",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/272",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Remove the requirement to insert a .well-known part for vct URLs\r\n\r\nFixes #264, #233, #242, #256 ",
      "createdAt": "2024-11-14T14:45:45Z",
      "updatedAt": "2024-12-02T17:05:28Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "ecfb55cbac0ed21d8ab1b1b4a614cc84160edc6e",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "danielfett/remove-well-known-thingy",
      "headRefOid": "cebfa1638046c9beb848574e3e329e86b6c6f3d9",
      "closedAt": "2024-12-02T17:05:28Z",
      "mergedAt": "2024-12-02T17:05:28Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "3e646c566f3bea78bf92f5748af6156ac3c9041d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc6Rqdyq",
          "commit": {
            "abbreviatedOid": "24ce64f"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-18T22:05:19Z",
          "updatedAt": "2024-11-18T22:05:19Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "English is odd, isn't it? ",
              "createdAt": "2024-11-18T22:05:19Z",
              "updatedAt": "2024-11-18T22:05:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6RqhyY",
          "commit": {
            "abbreviatedOid": "24ce64f"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-18T22:16:11Z",
          "updatedAt": "2024-11-18T22:16:11Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "that doesn't read very naturally to me. maybe this ?\r\n```suggestion\r\n(#retrieving-type-metadata). For this example, the `vct` value is a URL as defined in\r\n(#retrieval-from-vct-claim) and the following Type Metadata Document is\r\nretrieved from it:\r\n```",
              "createdAt": "2024-11-18T22:16:11Z",
              "updatedAt": "2024-11-18T22:16:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6RqiMP",
          "commit": {
            "abbreviatedOid": "24ce64f"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-18T22:17:27Z",
          "updatedAt": "2024-11-18T22:17:27Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "yes ",
              "createdAt": "2024-11-18T22:17:27Z",
              "updatedAt": "2024-11-18T22:17:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6RqjOP",
          "commit": {
            "abbreviatedOid": "24ce64f"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "One editorial nit I'd like to see https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/272/files#r1847348738 incorporated or something similar. \r\n\r\nI'd kinda hoped for a more unifying something here that reduced the number of options. But am okay with this.  ",
          "createdAt": "2024-11-18T22:20:33Z",
          "updatedAt": "2024-11-18T22:20:33Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc6RuIld",
          "commit": {
            "abbreviatedOid": "f5a5be0"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-11-19T09:05:33Z",
          "updatedAt": "2024-11-19T09:05:33Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc6S_U0Z",
          "commit": {
            "abbreviatedOid": "f5a5be0"
          },
          "author": "babisRoutis",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-11-27T23:13:41Z",
          "updatedAt": "2024-11-27T23:13:41Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc6TIWFi",
          "commit": {
            "abbreviatedOid": "f5a5be0"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-11-28T15:21:27Z",
          "updatedAt": "2024-11-28T15:21:27Z",
          "comments": []
        }
      ]
    },
    {
      "number": 275,
      "id": "PR_kwDOJbVClc6CUYNv",
      "title": "fix section numbering in SD-JWT references to align with the latest -14 version",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/275",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #274 and a few others that had gotten out of sync ",
      "createdAt": "2024-11-19T00:11:47Z",
      "updatedAt": "2024-12-02T16:37:43Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "da2dbec746a55f7c618c95ed752c17bd74b06a26",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "fix-sd-jwt-sec-numbers",
      "headRefOid": "5b2589a14d3ece7f1c4b56ad46c2a24455375165",
      "closedAt": "2024-12-02T16:37:43Z",
      "mergedAt": "2024-12-02T16:37:43Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "ecfb55cbac0ed21d8ab1b1b4a614cc84160edc6e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc6RrRG1",
          "commit": {
            "abbreviatedOid": "fa54f67"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-19T00:19:18Z",
          "updatedAt": "2024-11-19T00:19:19Z",
          "comments": [
            {
              "originalPosition": 52,
              "body": "```suggestion\r\nTobias Looker, and\r\n```",
              "createdAt": "2024-11-19T00:19:18Z",
              "updatedAt": "2024-11-19T00:19:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6R0m40",
          "commit": {
            "abbreviatedOid": "5b2589a"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-11-19T19:33:22Z",
          "updatedAt": "2024-11-19T19:33:22Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc6TIXFR",
          "commit": {
            "abbreviatedOid": "5b2589a"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-11-28T15:23:38Z",
          "updatedAt": "2024-11-28T15:23:38Z",
          "comments": []
        }
      ]
    },
    {
      "number": 277,
      "id": "PR_kwDOJbVClc6DZZjp",
      "title": "Correct attribute names in Example 2",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/277",
      "state": "MERGED",
      "author": "babisRoutis",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #276 ",
      "createdAt": "2024-11-27T23:28:33Z",
      "updatedAt": "2024-12-03T10:18:07Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "da2dbec746a55f7c618c95ed752c17bd74b06a26",
      "headRepository": "babisRoutis/draft-terbu-sd-jwt-vc",
      "headRefName": "fix/276",
      "headRefOid": "9ba7c2ed1cf50c51572b33136141c52affb2357a",
      "closedAt": "2024-12-02T17:54:14Z",
      "mergedAt": "2024-12-02T17:54:14Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "2d513676f54551067f4e537c19f8faf14faa904f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc6TIXeo",
          "commit": {
            "abbreviatedOid": "9ba7c2e"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks!",
          "createdAt": "2024-11-28T15:24:29Z",
          "updatedAt": "2024-11-28T15:24:29Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc6TbWXT",
          "commit": {
            "abbreviatedOid": "9ba7c2e"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-12-02T17:30:35Z",
          "updatedAt": "2024-12-02T17:30:35Z",
          "comments": []
        }
      ]
    },
    {
      "number": 278,
      "id": "PR_kwDOJbVClc6DvqTI",
      "title": "Revert changes from PR #251",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/278",
      "state": "MERGED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This PR reverts changes introduced in PR #251",
      "createdAt": "2024-12-02T13:01:25Z",
      "updatedAt": "2024-12-02T18:59:00Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "2d513676f54551067f4e537c19f8faf14faa904f",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "awoie/revert-pr-251",
      "headRefOid": "87714e3dfabbd1899d5285f5f38f6df03e35c093",
      "closedAt": "2024-12-02T18:59:00Z",
      "mergedAt": "2024-12-02T18:59:00Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "d915ccfd2f0547939e66d57af3a429ddd6b8755b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc6TYa5a",
          "commit": {
            "abbreviatedOid": "e378335"
          },
          "author": "peacekeeper",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-12-02T13:10:04Z",
          "updatedAt": "2024-12-02T13:10:04Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc6TYgZ6",
          "commit": {
            "abbreviatedOid": "e378335"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-02T13:15:44Z",
          "updatedAt": "2024-12-02T13:15:45Z",
          "comments": [
            {
              "originalPosition": 58,
              "body": "This should make clear that it reverts a previous change.",
              "createdAt": "2024-12-02T13:15:44Z",
              "updatedAt": "2024-12-02T13:15:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6TYqql",
          "commit": {
            "abbreviatedOid": "0485c0a"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-02T13:33:56Z",
          "updatedAt": "2024-12-02T13:33:57Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "This should remain in the list.",
              "createdAt": "2024-12-02T13:33:56Z",
              "updatedAt": "2024-12-02T13:33:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6TYq_p",
          "commit": {
            "abbreviatedOid": "0485c0a"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-02T13:34:33Z",
          "updatedAt": "2024-12-02T13:34:34Z",
          "comments": [
            {
              "originalPosition": 58,
              "body": "```suggestion\r\n* Revert change from previous release that removed explicit mention of DIDs in the Issuer-signed JWT Verification Key Validation section\r\n```",
              "createdAt": "2024-12-02T13:34:33Z",
              "updatedAt": "2024-12-02T13:34:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6TYsPH",
          "commit": {
            "abbreviatedOid": "12f7436"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-02T13:36:48Z",
          "updatedAt": "2024-12-02T13:36:49Z",
          "comments": [
            {
              "originalPosition": 62,
              "body": "```suggestion\r\n* Update the anticipated media type registration request from `application/vc+sd-jwt` to `application/dc+sd-jwt`\r\n* Tightened the exposition of the Issuer-signed JWT Verification Key Validation section\r\n```",
              "createdAt": "2024-12-02T13:36:48Z",
              "updatedAt": "2024-12-02T13:36:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6Tb-fN",
          "commit": {
            "abbreviatedOid": "87714e3"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "under duress ",
          "createdAt": "2024-12-02T18:43:47Z",
          "updatedAt": "2024-12-02T18:43:47Z",
          "comments": []
        }
      ]
    },
    {
      "number": 279,
      "id": "PR_kwDOJbVClc6DzM74",
      "title": "add -08 placeholder to doc history",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/279",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-12-02T20:17:44Z",
      "updatedAt": "2024-12-02T20:25:57Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "d915ccfd2f0547939e66d57af3a429ddd6b8755b",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "draft-08",
      "headRefOid": "c668228231b4b47fc578d6364fa22abea3dd1ae5",
      "closedAt": "2024-12-02T20:25:57Z",
      "mergedAt": "2024-12-02T20:25:57Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "efc9a7c067ef3ab606198450617d1828e126bf7b"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Gonna take a risk and merge this without asking the WG ",
          "createdAt": "2024-12-02T20:24:16Z",
          "updatedAt": "2024-12-02T20:24:16Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 280,
      "id": "PR_kwDOJbVClc6D0LV6",
      "title": "Fix formatting issue introduced by the reintroduction of the DID paragraph in -07",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/280",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-12-02T22:56:39Z",
      "updatedAt": "2024-12-03T12:46:17Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "efc9a7c067ef3ab606198450617d1828e126bf7b",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "did-that-really-break",
      "headRefOid": "8917f1e180fa37c995dc507bea3c7fc5b2f191b1",
      "closedAt": "2024-12-03T12:46:17Z",
      "mergedAt": "2024-12-03T12:46:17Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "4c86e64e3e3bf95c803b56009ab961f44a26b7a4"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 292,
      "id": "PR_kwDOJbVClc6FBe_S",
      "title": "fix: adjusting terminology to latest SD-JWT spec",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/292",
      "state": "MERGED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This PR adjusts terminology to latest SD-JWT spec\r\n\r\nMay fix #243\r\n\r\nSee preview here:\r\nhttps://drafts.oauth.net/oauth-sd-jwt-vc/awoie/fix-243/draft-ietf-oauth-sd-jwt-vc.html",
      "createdAt": "2024-12-12T13:55:06Z",
      "updatedAt": "2024-12-17T21:01:03Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "4c86e64e3e3bf95c803b56009ab961f44a26b7a4",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "awoie/fix-243",
      "headRefOid": "a5e25bd16d84ebc2971eabd9756ef17a00906866",
      "closedAt": "2024-12-17T21:01:02Z",
      "mergedAt": "2024-12-17T21:01:02Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "799acde9f2e1b0621a6fd097eed4c21595bb6ae4"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc6Vluil",
          "commit": {
            "abbreviatedOid": "a5e25bd"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-12-17T18:10:17Z",
          "updatedAt": "2024-12-17T18:10:17Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc6VmYMr",
          "commit": {
            "abbreviatedOid": "a5e25bd"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-12-17T19:15:02Z",
          "updatedAt": "2024-12-17T19:15:02Z",
          "comments": []
        }
      ]
    },
    {
      "number": 294,
      "id": "PR_kwDOJbVClc6HVIwO",
      "title": "Make extension point for issuer key resolution more explicit",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/294",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This PR makes the extension point for issuer key resolution more explicit.\r\n\r\nPreview here https://drafts.oauth.net/oauth-sd-jwt-vc/awoie/extension-point/draft-ietf-oauth-sd-jwt-vc.html",
      "createdAt": "2025-01-10T13:08:01Z",
      "updatedAt": "2025-04-26T12:28:18Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "81992e98cb4ade4026cc8ca721328aec6b1dddf5",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "awoie/extension-point",
      "headRefOid": "7939afca7a1f8934e043d9e74473bf8a085e46f5",
      "closedAt": "2025-04-26T12:28:17Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "peacekeeper",
          "authorAssociation": "NONE",
          "body": "> move the mention of DIDs\r\n\r\nIt was clear in previous discussions that many WG members preferred X.509 Certificates and DID Resolution to not be removed.\r\n\r\nAny additional key resolution mechanisms in the future can use the extension point, or - even better - can define a DID method.",
          "createdAt": "2025-01-13T10:06:04Z",
          "updatedAt": "2025-01-13T10:06:04Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "> at a minimum this PR should move the mention of DIDs in to an example of a prospective profile utilizing the now more explicit extension point\r\n\r\nAs I recall, the consensus from the last interim call was to highlight how the specification can be extended to support other mechanisms, such as DIDs, by defining a profile. Therefore, this change seems reasonable.",
          "createdAt": "2025-01-13T15:21:50Z",
          "updatedAt": "2025-01-13T15:21:50Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I think it was quite clear in the interim that the outcome should be an extendable spec with profiles for DID living somewhere else (e.g., in the european context in ETSI). If I recall correctly, we even discussed that such a specification could focus on certain DID methods and specify anything that is required to make them work in an interoperable way.\r\n\r\nThis is also what I understood from side conversations following the interim.",
          "createdAt": "2025-01-14T07:46:31Z",
          "updatedAt": "2025-01-14T07:46:31Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> I think it was quite clear in the interim that the outcome should be an extendable spec with profiles for DID living somewhere else (e.g., in the european context in ETSI). If I recall correctly, we even discussed that such a specification could focus on certain DID methods and specify anything that is required to make them work in an interoperable way.\r\n> \r\n> This is also what I understood from side conversations following the interim.\r\n\r\nI was under the impression that \"european\" should be capitalized but otherwise concur with @danielfett's assessment. ",
          "createdAt": "2025-01-14T13:16:25Z",
          "updatedAt": "2025-01-14T13:16:25Z"
        },
        {
          "author": "peacekeeper",
          "authorAssociation": "NONE",
          "body": "> consensus from the last interim call\r\n\r\nAre there meeting notes or a recording of this?",
          "createdAt": "2025-01-15T18:53:33Z",
          "updatedAt": "2025-01-15T18:53:33Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Yes, see \"interim-2024-oauth-07\" here: https://datatracker.ietf.org/wg/oauth/meetings/\r\n\r\nThe minutes are not very comprehensive, but there's a recording as well.\r\n",
          "createdAt": "2025-02-18T19:24:46Z",
          "updatedAt": "2025-02-18T19:24:46Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Superseded by https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/299",
          "createdAt": "2025-03-11T19:51:03Z",
          "updatedAt": "2025-03-11T19:51:25Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> Superseded by #299\r\n\r\n^ that",
          "createdAt": "2025-04-26T12:27:55Z",
          "updatedAt": "2025-04-26T12:27:55Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> > Superseded by #299\r\n> \r\n> ^ that\r\n\r\n^ for real this time ",
          "createdAt": "2025-04-26T12:28:17Z",
          "updatedAt": "2025-04-26T12:28:17Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc6Xr0JX",
          "commit": {
            "abbreviatedOid": "143dd00"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "at a minimum this PR should move the mention of DIDs in to an example of a prospective profile utilizing the now more explicit extension point",
          "createdAt": "2025-01-11T13:19:43Z",
          "updatedAt": "2025-01-11T13:19:43Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc6XwCFA",
          "commit": {
            "abbreviatedOid": "143dd00"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-13T08:09:54Z",
          "updatedAt": "2025-01-13T08:09:54Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nTo enable additional methods for Issuer verification key resolution, separate specifications or ecosystem regulations MAY define rules complementing or extending the rules defined above; however, such rules are beyond the scope of this specification. For example, an ecosystem MAY choose to define a profile that specifies additional encoding, resolution, and validation rules. See (#ecosystem-verification-rules) for security considerations applicable to these complementary or extended rules.\r\n```",
              "createdAt": "2025-01-13T08:09:54Z",
              "updatedAt": "2025-01-13T08:09:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6Xw-S4",
          "commit": {
            "abbreviatedOid": "143dd00"
          },
          "author": "peacekeeper",
          "authorAssociation": "NONE",
          "state": "CHANGES_REQUESTED",
          "body": "This PR should advise that defining a new DID method and therefore re-using existing standards and infrastructure would be preferable to inventing completely new issuer key resolution mechanisms.\r\n\r\nIt's harmful for interoperability to invent a new extension mechanism for resolving issuer keys, when there is already an existing one (DID methods).",
          "createdAt": "2025-01-13T10:08:39Z",
          "updatedAt": "2025-01-13T10:08:39Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc6eQ9Y6",
          "commit": {
            "abbreviatedOid": "7939afc"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-03T20:43:23Z",
          "updatedAt": "2025-03-03T20:43:23Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "```suggestion\r\n* Use SD-JWT KB in place of SD-JWT with Key Binding JWT\r\n* Make extension point for issuer key resolution more explicit\r\n```",
              "createdAt": "2025-03-03T20:43:23Z",
              "updatedAt": "2025-03-03T20:43:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6eQ9lN",
          "commit": {
            "abbreviatedOid": "7939afc"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-03T20:43:51Z",
          "updatedAt": "2025-03-03T20:43:51Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "still on -09 \r\n```suggestion\r\n```",
              "createdAt": "2025-03-03T20:43:51Z",
              "updatedAt": "2025-03-03T20:43:51Z"
            }
          ]
        }
      ]
    },
    {
      "number": 295,
      "id": "PR_kwDOJbVClc6Hhvwx",
      "title": "Fix #267, explain why we are not using JSON Path or JSON Pointer",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/295",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Fix #267 ",
      "createdAt": "2025-01-13T12:55:36Z",
      "updatedAt": "2025-03-20T07:07:29Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "81992e98cb4ade4026cc8ca721328aec6b1dddf5",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "danielfett/fix-267",
      "headRefOid": "a4a1562f0101bf30dbfc9cf0c46077d96feb0c47",
      "closedAt": "2025-03-11T18:32:47Z",
      "mergedAt": "2025-03-11T18:32:47Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "fd25ece509544ae4a6718454fe49680cf6e844f7"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "This came about from a suggestion by @aaronpk so perhaps he should appear in the acknowledgements? I just noticed he isn't while working on content for IETF 122. ",
          "createdAt": "2025-03-20T07:07:27Z",
          "updatedAt": "2025-03-20T07:07:27Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc6X-eDL",
          "commit": {
            "abbreviatedOid": "fcaffaa"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-14T13:42:18Z",
          "updatedAt": "2025-01-14T13:42:18Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "more natural phrasing to a native English speaker \r\n```suggestion\r\nNote: This specification intentionally does not use JSON Pointer [@RFC6901] for\r\n```",
              "createdAt": "2025-01-14T13:42:18Z",
              "updatedAt": "2025-01-14T13:42:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6X-fFB",
          "commit": {
            "abbreviatedOid": "3f56fd2"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-01-14T13:43:49Z",
          "updatedAt": "2025-01-14T13:43:49Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc6X-gvN",
          "commit": {
            "abbreviatedOid": "3f56fd2"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-14T13:45:50Z",
          "updatedAt": "2025-01-14T13:45:50Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "let's be explicit about the \"?\"ness \r\n```suggestion\r\nNote: This specification intentionally does not use JSON Pointer [@?RFC6901] for\r\n```",
              "createdAt": "2025-01-14T13:45:50Z",
              "updatedAt": "2025-01-14T13:45:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6Ypuee",
          "commit": {
            "abbreviatedOid": "3f56fd2"
          },
          "author": "timcappalli",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-19T19:29:45Z",
          "updatedAt": "2025-01-19T19:29:46Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "editorial nit\r\n\r\n```suggestion\r\nthat introduces a considerable complexity and brings in many features which\r\nare not needed for the use case of selecting claims in a credential. There are\r\nalso security concerns with some implementations.\r\n```",
              "createdAt": "2025-01-19T19:29:46Z",
              "updatedAt": "2025-01-19T19:29:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6ccvU3",
          "commit": {
            "abbreviatedOid": "4f6bd8a"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-02-18T19:25:37Z",
          "updatedAt": "2025-02-18T20:19:03Z",
          "comments": []
        }
      ]
    },
    {
      "number": 296,
      "id": "PR_kwDOJbVClc6HkXkc",
      "title": "ed: improved clarity on registered claims paragraph",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/296",
      "state": "MERGED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This PR improves clarity of the registered claims paragraph.\r\n\r\nMay fix #257 \r\n\r\nPreview here https://drafts.oauth.net/oauth-sd-jwt-vc/awoie/fix-257/draft-ietf-oauth-sd-jwt-vc.html",
      "createdAt": "2025-01-13T17:03:43Z",
      "updatedAt": "2025-03-11T19:13:03Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "0540e1de4057ddcabfbf930ef87493be3f07b63a",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "awoie/fix-257",
      "headRefOid": "83bce0c9c5176491b29178822c019c3f3aa1eb17",
      "closedAt": "2025-03-11T19:13:03Z",
      "mergedAt": "2025-03-11T19:13:03Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "e679be4d377892ce9100f4b469e81cdaffc3d58f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc6X-fLo",
          "commit": {
            "abbreviatedOid": "52d00ab"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-01-14T13:43:55Z",
          "updatedAt": "2025-03-03T20:35:24Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc6eQ816",
          "commit": {
            "abbreviatedOid": "52d00ab"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-03T20:42:04Z",
          "updatedAt": "2025-03-03T20:42:05Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "we're not on -10 yet https://datatracker.ietf.org/doc/draft-ietf-oauth-sd-jwt-vc/08/ \r\n```suggestion\r\n-10\r\n\r\n* Editorial changes\r\n\r\n```",
              "createdAt": "2025-03-03T20:42:04Z",
              "updatedAt": "2025-03-03T20:42:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6eQ88g",
          "commit": {
            "abbreviatedOid": "52d00ab"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-03T20:42:19Z",
          "updatedAt": "2025-03-03T20:42:19Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "```suggestion\r\n* Use SD-JWT KB in place of SD-JWT with Key Binding JWT\r\n* Editorial changes\r\n```",
              "createdAt": "2025-03-03T20:42:19Z",
              "updatedAt": "2025-03-03T20:42:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6ffH7g",
          "commit": {
            "abbreviatedOid": "5048d09"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-11T18:33:45Z",
          "updatedAt": "2025-03-11T18:33:45Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "What does this change? except for the empty line?",
              "createdAt": "2025-03-11T18:33:45Z",
              "updatedAt": "2025-03-11T18:33:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6ffLDC",
          "commit": {
            "abbreviatedOid": "5048d09"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-11T18:38:05Z",
          "updatedAt": "2025-03-11T18:38:05Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "```suggestion\r\n```",
              "createdAt": "2025-03-11T18:38:05Z",
              "updatedAt": "2025-03-11T18:38:05Z"
            }
          ]
        }
      ]
    },
    {
      "number": 298,
      "id": "PR_kwDOJbVClc6NTfIY",
      "title": "denial-of-service is a compound adjective and should be hyphenated when used to modify attacks",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/298",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "\"denial-of-service\" is a compound adjective and should be hyphenated when used to modify \"attacks.\"\r\n\r\nalso I wanted a simple new PR to see if it breaks the build too ",
      "createdAt": "2025-03-04T12:36:37Z",
      "updatedAt": "2025-03-11T18:32:59Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "81992e98cb4ade4026cc8ca721328aec6b1dddf5",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "hypen-denial-of-service",
      "headRefOid": "fc9ac65325c39c3d8829da31a1e645ef6d6fcd81",
      "closedAt": "2025-03-11T18:32:59Z",
      "mergedAt": "2025-03-11T18:32:59Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "0540e1de4057ddcabfbf930ef87493be3f07b63a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc6fexFN",
          "commit": {
            "abbreviatedOid": "fc9ac65"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-11T18:08:50Z",
          "updatedAt": "2025-03-11T18:08:50Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc6fex9Z",
          "commit": {
            "abbreviatedOid": "fc9ac65"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-11T18:09:57Z",
          "updatedAt": "2025-03-11T18:09:57Z",
          "comments": []
        }
      ]
    },
    {
      "number": 299,
      "id": "PR_kwDOJbVClc6OOgtW",
      "title": "feat: describe extension mechanism based on DIDs",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/299",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This PR describes the extension point for ecosystem-specific issuer key resolution based on DIDs.\r\n\r\nPreview here https://drafts.oauth.net/oauth-sd-jwt-vc/awoie/add-extension/draft-ietf-oauth-sd-jwt-vc.html",
      "createdAt": "2025-03-11T19:50:17Z",
      "updatedAt": "2025-06-18T02:17:26Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "513c0a1032153dd66131b5e518712da6d3d66694",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "awoie/add-extension",
      "headRefOid": "1c3bedec1702c4d665c0b024fb2fdde48d737490",
      "closedAt": "2025-06-18T02:17:26Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "body": "Supersedes #294 ",
          "createdAt": "2025-03-11T19:51:40Z",
          "updatedAt": "2025-03-11T19:51:40Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc6fgfeO",
          "commit": {
            "abbreviatedOid": "a140ab9"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-11T20:52:01Z",
          "updatedAt": "2025-03-11T20:52:01Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "I think this should be removed? Basically the same two sentences appear in the new paragraph below. \r\n```suggestion\r\n```",
              "createdAt": "2025-03-11T20:52:01Z",
              "updatedAt": "2025-03-11T20:52:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6fgmt2",
          "commit": {
            "abbreviatedOid": "a140ab9"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-11T21:07:50Z",
          "updatedAt": "2025-03-11T21:07:50Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "language nits \r\n```suggestion\r\nFor example, if an ecosystem wants to support DID Document Resolution, it would specify that the `iss` value contains a DID [@?W3C.DID] and the recipient would retrieve the public key from the DID Document resolved from the DID in the `iss` value. In this case, if the `kid` JWT header parameter is present, the `kid` can be a relative or absolute DID URL of the DID in the `iss` value, identifying the public key. The ecosystem might additionally want to specify which DID methods can be used to ensure interoperability and what verification material in DID Documents can be used, e.g., JWKs.\r\n```",
              "createdAt": "2025-03-11T21:07:50Z",
              "updatedAt": "2025-03-11T21:07:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6fqVHU",
          "commit": {
            "abbreviatedOid": "9708fb7"
          },
          "author": "peacekeeper",
          "authorAssociation": "NONE",
          "state": "CHANGES_REQUESTED",
          "body": "I don't really understand the weird politics and business interests behind trying SO hard again and again to remove an OPTIONAL feature. Why is this so important to some? What kind of interests lead editors to try to sneak in changes, to avoid discussion, and to ignore consensus? What does this change accomplish?\r\n\r\nThe fact is that a lot of people have already implemented this and have expressed support for DIDs in this specification (e.g. see https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/250).\r\n\r\nI don't see the point of delegating this to \"separate specifications or ecosystem regulations\", this will only overcomplicate things and reduce interoperability.\r\n\r\nI know that the \"hopes and dreams of the DID community\" are \"tiresome\" to some people. So why not just leave things as they are now and move on to something else.",
          "createdAt": "2025-03-12T14:13:23Z",
          "updatedAt": "2025-03-12T14:13:23Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc6ftFvL",
          "commit": {
            "abbreviatedOid": "9708fb7"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-12T17:53:48Z",
          "updatedAt": "2025-03-12T17:53:48Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc6gUhOR",
          "commit": {
            "abbreviatedOid": "9708fb7"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-17T09:32:57Z",
          "updatedAt": "2025-03-17T09:32:57Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc6tuqP1",
          "commit": {
            "abbreviatedOid": "1c3bede"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "superseded by PR #316 ",
          "createdAt": "2025-06-10T18:34:25Z",
          "updatedAt": "2025-06-10T18:34:25Z",
          "comments": []
        }
      ]
    },
    {
      "number": 300,
      "id": "PR_kwDOJbVClc6OOrfg",
      "title": "Fix document build pipeline",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/300",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-03-11T20:05:11Z",
      "updatedAt": "2025-03-11T20:24:08Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "e679be4d377892ce9100f4b469e81cdaffc3d58f",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "fix-opening-and-ending-tag-mismatch-likely-from-262",
      "headRefOid": "bdba4e35c07be79ee5d417234a312e4f168be615",
      "closedAt": "2025-03-11T20:24:07Z",
      "mergedAt": "2025-03-11T20:24:07Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "c841e52176f76ff836a52616686aa0b7c0f3f2aa"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc6fgNh-",
          "commit": {
            "abbreviatedOid": "bdba4e3"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-11T20:15:16Z",
          "updatedAt": "2025-03-11T20:15:16Z",
          "comments": []
        }
      ]
    },
    {
      "number": 303,
      "id": "PR_kwDOJbVClc6PlQ1A",
      "title": "ack Aaron Parecki",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/303",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/295#issuecomment-2739407808 @aaronpk ",
      "createdAt": "2025-03-21T08:53:20Z",
      "updatedAt": "2025-04-26T12:26:57Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "c841e52176f76ff836a52616686aa0b7c0f3f2aa",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "ack-aaron",
      "headRefOid": "4f22ab9c37bfbc6da4c59a5a366aed6bcc0f2206",
      "closedAt": "2025-04-26T12:26:56Z",
      "mergedAt": "2025-04-26T12:26:56Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "43cf9e62b232c70b53bc1f415b14f02746bd082d"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Open for over a month. One approval. No objections. Did I really just type that? Yes, yes I did. ",
          "createdAt": "2025-04-26T12:26:15Z",
          "updatedAt": "2025-04-26T12:26:15Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc6hP7yW",
          "commit": {
            "abbreviatedOid": "4f22ab9"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-21T09:43:36Z",
          "updatedAt": "2025-03-21T09:43:36Z",
          "comments": []
        }
      ]
    },
    {
      "number": 304,
      "id": "PR_kwDOJbVClc6Plpm0",
      "title": "Clarify that private JWT claims MAY be used",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/304",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "See my comment in #301 for the reasons for this PR.\r\n\r\nAlso removes the subsection \"New JWT Claims\" as it is not really helpful. ",
      "createdAt": "2025-03-21T09:40:20Z",
      "updatedAt": "2025-04-26T12:32:18Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "c841e52176f76ff836a52616686aa0b7c0f3f2aa",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "danielfett/fix-301-private-claims",
      "headRefOid": "1e1d48e324cce62c9e5c35dac1b3f438881caa83",
      "closedAt": "2025-04-26T12:32:18Z",
      "mergedAt": "2025-04-26T12:32:18Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "513c0a1032153dd66131b5e518712da6d3d66694"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Open for much longer than it should have been. Really should have more than one approval. But no objections. I don't know if it actually fixes #301 or not but this probably should have been merged weeks ago. ",
          "createdAt": "2025-04-26T12:32:13Z",
          "updatedAt": "2025-04-26T12:32:13Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc6jkmt7",
          "commit": {
            "abbreviatedOid": "1e1d48e"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-04-04T23:42:18Z",
          "updatedAt": "2025-04-04T23:42:18Z",
          "comments": []
        }
      ]
    },
    {
      "number": 306,
      "id": "PR_kwDOJbVClc6RXn1S",
      "title": "Update PID example",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/306",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-04-04T08:25:13Z",
      "updatedAt": "2025-05-27T18:05:24Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "513c0a1032153dd66131b5e518712da6d3d66694",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "danielfett/update-pid-example",
      "headRefOid": "76e3d0d278da6083c6e14d0538752fa47f64d389",
      "closedAt": "2025-05-27T18:05:24Z",
      "mergedAt": "2025-05-27T18:05:24Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "fa0895e7466ff5727b4360a6be88c80a48bc100a"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Was there a reason that changes to the markdown similar to https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/564/files#diff-40bc3800dd9a7d4411799637caf0b01f82a01242d57264a2e4beb408c3835704 were omitted from this one? ",
          "createdAt": "2025-04-04T15:40:11Z",
          "updatedAt": "2025-04-04T15:40:11Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> Was there a reason that changes to the markdown similar to https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/564/files#diff-40bc3800dd9a7d4411799637caf0b01f82a01242d57264a2e4beb408c3835704 were omitted from this one?\r\n\r\nThat was a real question and I don't think an unreasonable one. ",
          "createdAt": "2025-04-26T12:33:30Z",
          "updatedAt": "2025-04-26T12:33:30Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> > Was there a reason that changes to the markdown similar to https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/564/files#diff-40bc3800dd9a7d4411799637caf0b01f82a01242d57264a2e4beb408c3835704 were omitted from this one?\r\n> \r\n> That was a real question and I don't think an unreasonable one.\r\n\r\n#309 has been created to track this important question going forward. \r\n ",
          "createdAt": "2025-04-28T12:03:48Z",
          "updatedAt": "2025-04-28T12:03:48Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I have no idea why the build fails after the latest commit....",
          "createdAt": "2025-05-27T15:00:14Z",
          "updatedAt": "2025-05-27T15:00:14Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> I have no idea why the build fails after the latest commit....\r\n\r\nThe fragile temporality of github magic. ",
          "createdAt": "2025-05-27T15:33:39Z",
          "updatedAt": "2025-05-27T15:33:39Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc6m1lON",
          "commit": {
            "abbreviatedOid": "b315bef"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-04-28T12:04:24Z",
          "updatedAt": "2025-04-28T12:04:24Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc6rLPFK",
          "commit": {
            "abbreviatedOid": "76e3d0d"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-05-27T16:53:53Z",
          "updatedAt": "2025-05-27T16:53:53Z",
          "comments": []
        }
      ]
    },
    {
      "number": 312,
      "id": "PR_kwDOJbVClc6X1oTF",
      "title": "Fix section numbering in a few SD-JWT references",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/312",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-05-27T19:26:04Z",
      "updatedAt": "2025-05-27T20:07:31Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "fa0895e7466ff5727b4360a6be88c80a48bc100a",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "sd-jwt-sec-numbers",
      "headRefOid": "423f0d2e5cb213f8259feef8e8a70ac4e88b83e0",
      "closedAt": "2025-05-27T20:07:30Z",
      "mergedAt": "2025-05-27T20:07:30Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "5332ed948f0f42a06767ead43e5e039fd0dd24b6"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc6rNTBi",
          "commit": {
            "abbreviatedOid": "423f0d2"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "Thanks! Looks complete and correct to me.",
          "createdAt": "2025-05-27T19:43:38Z",
          "updatedAt": "2025-05-27T19:43:38Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc6rNhmz",
          "commit": {
            "abbreviatedOid": "423f0d2"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks",
          "createdAt": "2025-05-27T20:06:29Z",
          "updatedAt": "2025-05-27T20:06:29Z",
          "comments": []
        }
      ]
    },
    {
      "number": 313,
      "id": "PR_kwDOJbVClc6X_bkH",
      "title": "dash 10",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/313",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-05-28T16:02:03Z",
      "updatedAt": "2025-05-28T17:45:22Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "5332ed948f0f42a06767ead43e5e039fd0dd24b6",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "dash-ten",
      "headRefOid": "f51039512ccd6e57d8d6e8dbb870111fe1cec832",
      "closedAt": "2025-05-28T17:45:22Z",
      "mergedAt": "2025-05-28T17:45:22Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "8f42b4e131d7af4e0c0a7dcdc3fb87bce8afb2a5"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 316,
      "id": "PR_kwDOJbVClc6Z6BCf",
      "title": "SD-JWT VC Issuer Signature Profiles/Mechanisms",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/316",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This is inspired by numerous discussions over the past many months, including (but not limited to) those with @alenhorvat and @awoie about better modularization of signature profiles in SD-JWT VC. \r\n\r\nHighlights of this change:\r\n\r\n- Renames 'Issuer-signed JWT Verification Key Validation' to 'Issuer Signature Mechanisms' and reworks some text accordingly. \r\n- Provides a web-based metadata resolution mechanism and an inline x509 mechanism. \r\n- A DID-based mechanism is not explicitly provided but still possible via profile/extension. \r\n- Is more explicit that the employed Issuer Signature Mechanism has to be one that is permitted for the Issuer according to policy.\r\n- Is more clear that one permitted Issuer Signature Mechanism is sufficient. \r\n\r\n\r\nEffectively supersedes PR #299 \r\n\r\nTouches on and/or fixes Issues https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/253 and https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/281",
      "createdAt": "2025-06-10T17:55:26Z",
      "updatedAt": "2025-06-18T15:54:17Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "8f42b4e131d7af4e0c0a7dcdc3fb87bce8afb2a5",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "modular-signature-somethings",
      "headRefOid": "afff5f03df089d19793ece830819a8939cdc7fae",
      "closedAt": "2025-06-18T02:16:08Z",
      "mergedAt": "2025-06-18T02:16:08Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "0ec7c8e63186dcdcb1c221aa896df092119cfff9"
      },
      "comments": [
        {
          "author": "peacekeeper",
          "authorAssociation": "NONE",
          "body": "This should be reverted, given that it's been super clear that there was no WG consensus to remove support for DIDs.\r\n\r\nWe have been through this exercise before where the editors dropped DID support and then had to revert that change.",
          "createdAt": "2025-06-18T15:54:17Z",
          "updatedAt": "2025-06-18T15:54:17Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc6tudU0",
          "commit": {
            "abbreviatedOid": "f1dbaf9"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Great PR, I like how the extension is now clearly defined while allowing room for signature profiles in ETSI.",
          "createdAt": "2025-06-10T18:13:36Z",
          "updatedAt": "2025-06-10T18:13:36Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc6twBCz",
          "commit": {
            "abbreviatedOid": "f1dbaf9"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-06-10T21:10:48Z",
          "updatedAt": "2025-06-10T21:10:48Z",
          "comments": [
            {
              "originalPosition": 167,
              "body": "```suggestion\r\n* Rename 'Issuer-signed JWT Verification Key Validation' to 'Issuer Signature Mechanisms' and rework some text accordingly. Provide a web-based metadata resolution mechanism and an inline x509 mechanism. A DID-based mechanism is not explicitly provided herein but still possible via profile/extension. Be explicit that the employed Issuer Signature Mechanism has to be one that is permitted for the Issuer according to policy. Be more clear that one permitted Issuer Signature Mechanism is sufficient.\r\n```",
              "createdAt": "2025-06-10T21:10:48Z",
              "updatedAt": "2025-06-10T21:10:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6u9HIF",
          "commit": {
            "abbreviatedOid": "afff5f0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-06-17T11:25:06Z",
          "updatedAt": "2025-06-17T11:25:06Z",
          "comments": []
        }
      ]
    },
    {
      "number": 318,
      "id": "PR_kwDOJbVClc6bu_5w",
      "title": "Fix `[...]#integrity` claim values in examples ",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/318",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Subresource Integrity uses regular base64 encoding and some were the wrong length",
      "createdAt": "2025-06-23T21:03:32Z",
      "updatedAt": "2025-06-24T19:11:09Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "0ec7c8e63186dcdcb1c221aa896df092119cfff9",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "pound-integrity",
      "headRefOid": "016861b3a4471602f0166ca79de5c90cced2f69f",
      "closedAt": "2025-06-24T19:11:08Z",
      "mergedAt": "2025-06-24T19:11:08Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "fed5f40832492f567d3a1019a1eaf5907670ad47"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc6wH159",
          "commit": {
            "abbreviatedOid": "016861b"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-06-24T18:09:33Z",
          "updatedAt": "2025-06-24T18:09:33Z",
          "comments": []
        }
      ]
    },
    {
      "number": 322,
      "id": "PR_kwDOJbVClc6dzUca",
      "title": "-11",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/322",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "These go to eleven. ",
      "createdAt": "2025-07-07T17:38:29Z",
      "updatedAt": "2025-07-09T16:53:37Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "fed5f40832492f567d3a1019a1eaf5907670ad47",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "this-one-goes-to-eleven",
      "headRefOid": "fc46b0900f027da8a0d5a6e8f9d985628d0a1098",
      "closedAt": "2025-07-09T16:53:37Z",
      "mergedAt": "2025-07-09T16:53:37Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "abb73ba42080f62ea349402e3ac52becb09d0f2b"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 324,
      "id": "PR_kwDOJbVClc6eG0RF",
      "title": "Fixes 317",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/324",
      "state": "MERGED",
      "author": "babisRoutis",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #317 ",
      "createdAt": "2025-07-09T11:23:36Z",
      "updatedAt": "2025-07-19T16:02:18Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "abb73ba42080f62ea349402e3ac52becb09d0f2b",
      "headRepository": "babisRoutis/draft-terbu-sd-jwt-vc",
      "headRefName": "fix/317",
      "headRefOid": "3c8e7d6aca095f0a28ae3eff90490018fb4022dc",
      "closedAt": "2025-07-18T20:20:43Z",
      "mergedAt": "2025-07-18T20:20:43Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "8a3ebfb517fd56e1dd87a4b076a6c77cfa5a5310"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> Thanks @babisRoutis, you might want to also add yourself and @charsleysa Stefan Charsley to the acknowledgements.\r\n\r\nnever mind that, I snuck it into a merge conflict resolution ",
          "createdAt": "2025-07-09T16:59:09Z",
          "updatedAt": "2025-07-09T16:59:09Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc6y83va",
          "commit": {
            "abbreviatedOid": "e3353c0"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks @babisRoutis, you might want to also add yourself and @charsleysa Stefan Charsley to the acknowledgements. \r\n",
          "createdAt": "2025-07-09T16:52:46Z",
          "updatedAt": "2025-07-09T16:52:46Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc6y86sz",
          "commit": {
            "abbreviatedOid": "c134940"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-07-09T16:57:22Z",
          "updatedAt": "2025-07-09T16:57:23Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "```suggestion\r\nStefan Charsley,\r\n```",
              "createdAt": "2025-07-09T16:57:22Z",
              "updatedAt": "2025-07-09T16:57:23Z"
            }
          ]
        }
      ]
    },
    {
      "number": 328,
      "id": "PR_kwDOJbVClc6g446_",
      "title": "mnr editorial changes",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/328",
      "state": "MERGED",
      "author": "adeinega",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-07-28T05:54:04Z",
      "updatedAt": "2025-07-29T19:50:20Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "8a3ebfb517fd56e1dd87a4b076a6c77cfa5a5310",
      "headRepository": "adeinega/oauth-sd-jwt-vc",
      "headRefName": "patch-1",
      "headRefOid": "eb18c700c8456622a5259b523347c9c901df2c41",
      "closedAt": "2025-07-29T18:36:08Z",
      "mergedAt": "2025-07-29T18:36:08Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "f13bc95305781e1fbd1041944e36899dd01c9fd2"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "thanks @adeinega, you should add yourself to the [acknowledgements](https://github.com/oauth-wg/oauth-sd-jwt-vc/blob/main/draft-ietf-oauth-sd-jwt-vc.md#acknowledgements-acknowledgements) (alphabetic by first name) ",
          "createdAt": "2025-07-28T18:51:55Z",
          "updatedAt": "2025-07-28T18:51:55Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc62cc-H",
          "commit": {
            "abbreviatedOid": "8f445b2"
          },
          "author": "adeinega",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-07-28T07:35:34Z",
          "updatedAt": "2025-07-28T07:35:34Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "I believe the same goes for Holders.",
              "createdAt": "2025-07-28T07:35:34Z",
              "updatedAt": "2025-07-28T07:35:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc62o9FO",
          "commit": {
            "abbreviatedOid": "b6af7d8"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-07-28T18:47:47Z",
          "updatedAt": "2025-07-28T18:47:48Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "i suppose so but the ability to do so and the implications of it are kinda different ",
              "createdAt": "2025-07-28T18:47:47Z",
              "updatedAt": "2025-07-28T18:47:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc62pBm3",
          "commit": {
            "abbreviatedOid": "b6af7d8"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-07-28T18:52:13Z",
          "updatedAt": "2025-07-28T18:52:13Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc626JGN",
          "commit": {
            "abbreviatedOid": "eb18c70"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-07-29T18:21:34Z",
          "updatedAt": "2025-07-29T18:21:34Z",
          "comments": []
        }
      ]
    },
    {
      "number": 330,
      "id": "PR_kwDOJbVClc6hOUyR",
      "title": "iss is not always required so let's not say it is (to fix #327)",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/330",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-07-29T17:56:34Z",
      "updatedAt": "2025-07-29T18:32:34Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "8a3ebfb517fd56e1dd87a4b076a6c77cfa5a5310",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "saying-less-makes-it-harder-to-be-wrong",
      "headRefOid": "ab72228fc1cb4c212c9e424459c194b89d5d2c7e",
      "closedAt": "2025-07-29T18:32:34Z",
      "mergedAt": "2025-07-29T18:32:34Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "dd0601c1c41bd7e55a31c52bb1c914e27aa4d471"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc626H8M",
          "commit": {
            "abbreviatedOid": "ab72228"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "makes sense",
          "createdAt": "2025-07-29T18:19:47Z",
          "updatedAt": "2025-07-29T18:19:47Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc626Ijh",
          "commit": {
            "abbreviatedOid": "ab72228"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-07-29T18:20:41Z",
          "updatedAt": "2025-07-29T18:20:41Z",
          "comments": []
        }
      ]
    },
    {
      "number": 335,
      "id": "PR_kwDOJbVClc6lvPzR",
      "title": "fix: update logo and background structure",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/335",
      "state": "CLOSED",
      "author": "cre8",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #305\n\n- adds information for background image\n- using the reference to apple guidelines, allowing a more granual approach (different images for multiple dimensions, etc)\n- also aligning existing logo approach so both cases are using the same approach\n\nSigned-off-by: Mirko Mollik <mirko.mollik@eudi.sprind.org>",
      "createdAt": "2025-08-28T06:35:04Z",
      "updatedAt": "2025-10-02T19:49:46Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "fc9a8d261dc0ca6ecf6c28cd16018a7b30dc9403",
      "headRepository": "cre8/oauth-sd-jwt-vc",
      "headRefName": "fix/305",
      "headRefOid": "db5bc75361dc61e46d3ef916aded5575bb50921d",
      "closedAt": "2025-10-02T19:49:46Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "would it be possible to do just the minimum viable/necessary things here? ",
          "createdAt": "2025-09-29T21:15:48Z",
          "updatedAt": "2025-09-29T21:15:48Z"
        },
        {
          "author": "cre8",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> would it be possible to do just the minimum viable/necessary things here? \n\nWhat do you mean with this, just to align with the existing definition of logo?\n\nI used the referenced approach from apple that got mentioned in the issue and that got \"ready for pr\"\n\n",
          "createdAt": "2025-09-30T05:46:14Z",
          "updatedAt": "2025-09-30T05:46:14Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> > would it be possible to do just the minimum viable/necessary things here?\r\n> \r\n> What do you mean with this, just to align with the existing definition of logo?\r\n\r\nI don't know. But there's a lot more here than I was expecting. I know @danielfett \"approved\" it but then said \"we have no practical experience with this rendering stuff\" and added a significant number of comments.  I had a significant number of additional comments and didn't even complete a review. \r\n\r\n> \r\n> I used the referenced approach from apple that got mentioned in the issue and that got \"ready for pr\"\r\n\r\nI'm struggling to reconcile it, to be honest. \r\n\r\n",
          "createdAt": "2025-09-30T16:04:31Z",
          "updatedAt": "2025-10-01T11:47:09Z"
        },
        {
          "author": "cre8",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree that this PR is adding a lot of features, but for a 1.0 release it's fine to go with #358 \r\n\r\nThe only approach where I saw this multi image approach was for app icons\r\n\r\nSo shall this be closed then @bc-pi @danielfett ?",
          "createdAt": "2025-10-02T18:43:40Z",
          "updatedAt": "2025-10-02T18:43:40Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Go enjoy your wedding @cre8! ",
          "createdAt": "2025-10-02T19:48:48Z",
          "updatedAt": "2025-10-02T19:48:48Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "thank you for the work that went into this @cre8 but yes I think we are going to favor https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/358 for the time being ",
          "createdAt": "2025-10-02T19:49:46Z",
          "updatedAt": "2025-10-02T19:49:46Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc7DZC6g",
          "commit": {
            "abbreviatedOid": "db5bc75"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "Thanks for the PR, Mirko!\r\n\r\nI think the new parts make sense to me, but as discussed on the editors call, we have no practical experience with this rendering stuff.",
          "createdAt": "2025-09-29T06:37:10Z",
          "updatedAt": "2025-09-29T07:02:35Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "```suggestion\r\n```\r\nSuggest to remove max_age, as it can be communicated via HTTP headers.",
              "createdAt": "2025-09-29T06:37:10Z",
              "updatedAt": "2025-09-29T07:02:35Z"
            },
            {
              "originalPosition": 65,
              "body": "```suggestion\r\n   c. Cache per HTTP headers.\r\n```\r\nAs above.",
              "createdAt": "2025-09-29T06:37:34Z",
              "updatedAt": "2025-09-29T07:02:35Z"
            },
            {
              "originalPosition": 51,
              "body": "```suggestion\r\n##### Wallet Behavior {#logo-wallet-behavior}\r\n```",
              "createdAt": "2025-09-29T06:37:52Z",
              "updatedAt": "2025-09-29T07:02:35Z"
            },
            {
              "originalPosition": 53,
              "body": "```suggestion\r\nWhen rendering a credential that includes a `logo`, a Wallet SHOULD follow these steps unless they conflict with user interface or user experience requirements, operating system restrictions, or other limits of the application:\r\n```",
              "createdAt": "2025-09-29T06:39:38Z",
              "updatedAt": "2025-09-29T07:02:35Z"
            },
            {
              "originalPosition": 77,
              "body": "```suggestion\r\n```\r\n\r\nThis should go into the existing privacy considerations.",
              "createdAt": "2025-09-29T06:40:39Z",
              "updatedAt": "2025-09-29T07:02:35Z"
            },
            {
              "originalPosition": 88,
              "body": "```suggestion\r\n```",
              "createdAt": "2025-09-29T06:41:07Z",
              "updatedAt": "2025-09-29T07:02:35Z"
            },
            {
              "originalPosition": 145,
              "body": "```suggestion\r\n```",
              "createdAt": "2025-09-29T06:53:57Z",
              "updatedAt": "2025-09-29T07:02:35Z"
            },
            {
              "originalPosition": 161,
              "body": "```suggestion\r\n   c. Cache via HTTP headers.\r\n```",
              "createdAt": "2025-09-29T06:54:07Z",
              "updatedAt": "2025-09-29T07:02:35Z"
            },
            {
              "originalPosition": 169,
              "body": "```suggestion\r\n```",
              "createdAt": "2025-09-29T06:54:29Z",
              "updatedAt": "2025-09-29T07:02:35Z"
            },
            {
              "originalPosition": 108,
              "body": "```suggestion\r\n        \"uri\": \"https://cdn.example.org/brand/logo.svg\"\r\n```\r\nThis was not in the correct format. Since the #integrity part is optional and its use is demonstrated in many other places already, we don't need it here.",
              "createdAt": "2025-09-29T06:59:34Z",
              "updatedAt": "2025-09-29T07:02:35Z"
            },
            {
              "originalPosition": 117,
              "body": "```suggestion\r\n        \"uri\": \"https://cdn.example.org/brand/logo-dark@3x.png\"\r\n```",
              "createdAt": "2025-09-29T06:59:50Z",
              "updatedAt": "2025-09-29T07:02:35Z"
            },
            {
              "originalPosition": 183,
              "body": "```suggestion\r\n        \"uri\": \"https://cdn.example.org/brand/logo@2x.png\"\r\n```",
              "createdAt": "2025-09-29T07:00:41Z",
              "updatedAt": "2025-09-29T07:02:35Z"
            },
            {
              "originalPosition": 198,
              "body": "```suggestion\r\n            \"uri\": \"https://cdn.example.org/vc/bg-dark@3x.png\"\r\n```",
              "createdAt": "2025-09-29T07:00:54Z",
              "updatedAt": "2025-09-29T07:02:35Z"
            },
            {
              "originalPosition": 205,
              "body": "```suggestion\r\n            \"uri\": \"https://cdn.example.org/vc/bg.svg\"\r\n```",
              "createdAt": "2025-09-29T07:01:02Z",
              "updatedAt": "2025-09-29T07:02:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc7DZVqm",
          "commit": {
            "abbreviatedOid": "db5bc75"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-29T07:03:15Z",
          "updatedAt": "2025-09-29T07:03:39Z",
          "comments": [
            {
              "originalPosition": 71,
              "body": "```suggestion\r\n   b. If contrast is insufficient, wallets MAY switch to a different\r\n```",
              "createdAt": "2025-09-29T07:03:15Z",
              "updatedAt": "2025-09-29T07:03:39Z"
            },
            {
              "originalPosition": 168,
              "body": "```suggestion\r\n   a. Ensure contrast; if not achievable, do not render the image.\r\n```",
              "createdAt": "2025-09-29T07:03:28Z",
              "updatedAt": "2025-09-29T07:03:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc7DdyFc",
          "commit": {
            "abbreviatedOid": "db5bc75"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-29T11:57:07Z",
          "updatedAt": "2025-09-29T11:57:07Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "why are some things duplicated inside the objects in variants and some not? ",
              "createdAt": "2025-09-29T11:57:07Z",
              "updatedAt": "2025-09-29T11:57:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc7Dd2Bk",
          "commit": {
            "abbreviatedOid": "db5bc75"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-29T12:00:12Z",
          "updatedAt": "2025-09-29T12:00:12Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "shouldn't this come from http's content-type? i guess that's where one might infer it from the resource but why repeat it here? ",
              "createdAt": "2025-09-29T12:00:12Z",
              "updatedAt": "2025-09-29T12:00:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc7Dd3W3",
          "commit": {
            "abbreviatedOid": "db5bc75"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-29T12:01:19Z",
          "updatedAt": "2025-09-29T12:01:19Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "maybe a larger question but why is the SRI thing needed in this context? ",
              "createdAt": "2025-09-29T12:01:19Z",
              "updatedAt": "2025-09-29T12:01:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc7Dd5Oi",
          "commit": {
            "abbreviatedOid": "db5bc75"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-29T12:02:56Z",
          "updatedAt": "2025-09-29T12:02:56Z",
          "comments": [
            {
              "originalPosition": 44,
              "body": "can't help but wonder wtf pixel density multiplier is... ",
              "createdAt": "2025-09-29T12:02:56Z",
              "updatedAt": "2025-09-29T12:02:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc7Dd9Fx",
          "commit": {
            "abbreviatedOid": "db5bc75"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-29T12:06:16Z",
          "updatedAt": "2025-09-29T12:06:17Z",
          "comments": [
            {
              "originalPosition": 141,
              "body": "wanting to make https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/335/files#r2387686645 again and then worried about duplication ",
              "createdAt": "2025-09-29T12:06:17Z",
              "updatedAt": "2025-09-29T12:06:17Z"
            }
          ]
        }
      ]
    },
    {
      "number": 336,
      "id": "PR_kwDOJbVClc6lvc9x",
      "title": "Set vct:integrity to the list of attribute to not selectively disclosed",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/336",
      "state": "MERGED",
      "author": "cre8",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #258\n\nWhen reading the sentence of the chapter:\n\n> The following registered JWT claims are used within the SD-JWT component of the SD-JWT VC and MUST NOT be included in the Disclosures, i.e., cannot be selectively disclosed:\n\nI had two thoughts:\n- these claims can not be disclosed -> hidden\n- these claims are always disclosed -> visible\n\nI suggest to clarify this here by something like saying\n\n> cannot be selectifly disclosed and are always visible\n\nOr is this clear becaue there is no option to hide an attribute (just visible to the holder, but that can never be disclosed like an embedded secret)\n\nSigned-off-by: Mirko Mollik <mirko.mollik@eudi.sprind.org>",
      "createdAt": "2025-08-28T06:58:33Z",
      "updatedAt": "2025-09-04T05:58:02Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "7338dcf9416d07dd5c1ae64fcc4d21da7ffe2fbb",
      "headRepository": "cre8/oauth-sd-jwt-vc",
      "headRefName": "fix/258",
      "headRefOid": "49eb21a7ce51dac0a88c7e7a8e163f6573590976",
      "closedAt": "2025-09-02T18:40:43Z",
      "mergedAt": "2025-09-02T18:40:43Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "84daa15d208c14ffdbaa0bae6feb70b3201538f3"
      },
      "comments": [
        {
          "author": "babisRoutis",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hi @cre8 \r\n\r\n> The following registered JWT claims are used within the SD-JWT component of the SD-JWT VC and MUST NOT be included in the Disclosures, i.e., cannot be selectively disclosed:\r\n\r\nIMHO, the text is pretty clear. \r\nThose attributes are never being selectively disclosable, which means that holder cannot choose to \"hide\" them, even if he wants to. So using your terminology, those attributes are always \"visible\"\r\n\r\nJudging from the title of the PR, I was expecting to find an additional entry (to those never selectively disclosable attributes) about `vct#integrity`\r\n",
          "createdAt": "2025-08-29T08:18:29Z",
          "updatedAt": "2025-08-29T08:18:29Z"
        },
        {
          "author": "cre8",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hi @babisRoutis \r\n\r\nthanks for the information.\r\n\r\n> Judging from the title of the PR, I was expecting to find an additional entry (to those never selectively disclosable attributes) about vct#integrity\r\n\r\nI added it in the 3.2.2.2 Registered JWT Claims where it mentions \r\n\r\n> The following registered JWT claims are used within the SD-JWT component of the SD-JWT VC and MUST NOT be included in the Disclosures, i.e., cannot be selectively disclosed:\r\n\r\nI found no other chapter where these values are listed again as non selectively disclosable\r\n",
          "createdAt": "2025-08-29T08:49:08Z",
          "updatedAt": "2025-08-29T08:49:08Z"
        },
        {
          "author": "babisRoutis",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Hi @babisRoutis\r\n> \r\n> thanks for the information.\r\n> \r\n> > Judging from the title of the PR, I was expecting to find an additional entry (to those never selectively disclosable attributes) about vct#integrity\r\n> \r\n> I added it in the 3.2.2.2 Registered JWT Claims where it mentions\r\n> \r\n> > The following registered JWT claims are used within the SD-JWT component of the SD-JWT VC and MUST NOT be included in the Disclosures, i.e., cannot be selectively disclosed:\r\n> \r\n> I found no other chapter where these values are listed again as non selectively disclosable\r\n\r\nHi @cre8 \r\nSomehow overlooked the first change. Apologies for my invalid comment.\r\nIt is fine.",
          "createdAt": "2025-08-29T09:13:13Z",
          "updatedAt": "2025-08-29T09:13:13Z"
        },
        {
          "author": "cre8",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> vct is REQUIRED so having requirements about when it's not set doesn't make sense (to me anyway)\r\n\r\nI updated it. But the integrity check should still apply even when the vct payload is not fetched via a URL, but e.g. via a database, correct?",
          "createdAt": "2025-08-29T13:24:56Z",
          "updatedAt": "2025-08-29T13:24:56Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> > vct is REQUIRED so having requirements about when it's not set doesn't make sense (to me anyway)\r\n> \r\n> I updated it. But the integrity check should still apply even when the vct payload is not fetched via a URL, but e.g. via a database, correct?\r\n\r\nI think so yes. But maybe I don't understand. My point was only that it's unnecessary to specify requirements for a situation that's already prohibited. ",
          "createdAt": "2025-08-29T22:12:52Z",
          "updatedAt": "2025-08-29T22:12:52Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc682ozg",
          "commit": {
            "abbreviatedOid": "fb2d722"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "vct is REQUIRED so having requirements about when it's not set doesn't make sense (to me anyway) ",
          "createdAt": "2025-08-29T11:45:09Z",
          "updatedAt": "2025-08-29T11:48:13Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "`vct` is REQUIRED in this context per line 250 above so `if the \"vct\" claim is not set` is never the case. \r\n```suggestion\r\n    * OPTIONAL hash of the Type Metadata document to guarantee integrity as defined in Section (#document-integrity).\r\n```",
              "createdAt": "2025-08-29T11:45:09Z",
              "updatedAt": "2025-08-29T11:55:41Z"
            },
            {
              "originalPosition": 14,
              "body": "but `vct` claim is required ... ?\r\n```suggestion\r\n`vct#integrity` MUST be an \"integrity metadata\" string as defined in Section (#document-integrity).\r\n```",
              "createdAt": "2025-08-29T11:46:09Z",
              "updatedAt": "2025-08-29T11:48:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc683u1j",
          "commit": {
            "abbreviatedOid": "fb2d722"
          },
          "author": "cre8",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-08-29T13:23:26Z",
          "updatedAt": "2025-08-29T13:23:26Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "It's also required when it's not a URL, but a URI that got fetched via e.g. a database, correct?",
              "createdAt": "2025-08-29T13:23:26Z",
              "updatedAt": "2025-08-29T13:23:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc688P6G",
          "commit": {
            "abbreviatedOid": "7f70cc8"
          },
          "author": "adeinega",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-08-29T19:42:07Z",
          "updatedAt": "2025-08-29T19:42:07Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\n    * OPTIONAL. The hash of the Type Metadata document to guarantee integrity as defined in Section (#document-integrity).\r\n```\r\n\r\nI apologize for being so picky.\r\n\r\nI also noticed that the spec uses _Type Metadata document_ and _Type Metadata Document_ at the same time.",
              "createdAt": "2025-08-29T19:42:07Z",
              "updatedAt": "2025-08-29T19:42:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc68-WCl",
          "commit": {
            "abbreviatedOid": "7f70cc8"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-08-29T22:15:29Z",
          "updatedAt": "2025-08-29T22:15:30Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Building on @adeinega's suggesting and using a different word than guarantee, which is strong word, stronger than I think is what we want to say here. \r\n```suggestion\r\n    * OPTIONAL. The hash of the Type Metadata document to provide integrity as defined in Section (#document-integrity).\r\n```",
              "createdAt": "2025-08-29T22:15:29Z",
              "updatedAt": "2025-08-29T22:15:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc69AeGe",
          "commit": {
            "abbreviatedOid": "7f70cc8"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-08-30T12:00:08Z",
          "updatedAt": "2025-08-30T12:00:08Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "> I also noticed that the spec uses _Type Metadata document_ and _Type Metadata Document_ at the same time.\r\n\r\nLooks like there's one use of \"Document\" - maybe do a PR to make that big D a little one? ",
              "createdAt": "2025-08-30T12:00:08Z",
              "updatedAt": "2025-08-30T12:00:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc69A7fQ",
          "commit": {
            "abbreviatedOid": "fb2d722"
          },
          "author": "cre8",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-08-30T17:44:18Z",
          "updatedAt": "2025-08-30T17:44:18Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "PR https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/341 is open",
              "createdAt": "2025-08-30T17:44:18Z",
              "updatedAt": "2025-08-30T17:44:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc69BadB",
          "commit": {
            "abbreviatedOid": "7f70cc8"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-08-30T22:43:45Z",
          "updatedAt": "2025-08-30T22:43:46Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I'd kinda meant that as a suggestion for @adeinega but thank you @cre8! ",
              "createdAt": "2025-08-30T22:43:45Z",
              "updatedAt": "2025-08-30T22:43:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc69Ba2W",
          "commit": {
            "abbreviatedOid": "915eb2a"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-08-30T22:56:47Z",
          "updatedAt": "2025-09-02T18:19:25Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc69GKKi",
          "commit": {
            "abbreviatedOid": "915eb2a"
          },
          "author": "babisRoutis",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-09-01T07:51:37Z",
          "updatedAt": "2025-09-02T18:19:26Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc69MFPu",
          "commit": {
            "abbreviatedOid": "7f70cc8"
          },
          "author": "adeinega",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-01T15:32:14Z",
          "updatedAt": "2025-09-01T15:32:14Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "One another minor (editorial) suggestion you might want to take care off, there is some inconsistency in how references to internal sections are provided.\r\n\r\n> * `vct`\r\n>     * REQUIRED. The type of the Verifiable Credential, e.g.,\r\n> `https://credentials.example.com/identity_credential`, as defined in (#type-claim).\r\n> * `vct#integrity`\r\n>     * OPTIONAL. The hash of the Type Metadata document to provide integrity as defined in Section (#document-integrity).\r\n\r\nThere are two ways, \"as defined in\" and \"as defined in Section\", the spec uses other ways to do the same to in other places.",
              "createdAt": "2025-09-01T15:32:14Z",
              "updatedAt": "2025-09-01T15:32:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc69Z3hr",
          "commit": {
            "abbreviatedOid": "7f70cc8"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-02T18:28:20Z",
          "updatedAt": "2025-09-02T18:28:21Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Good point @adeinega and note that the \"as defined in Section (#somewhere)\" results in the word Section showing up twice.  \r\n<img width=\"547\" height=\"181\" alt=\"Screenshot 2025-09-02 at 12 26 18\u202fPM\" src=\"https://github.com/user-attachments/assets/8699ae26-baa7-4d00-8623-c3d5c78b1981\" />\r\n",
              "createdAt": "2025-09-02T18:28:20Z",
              "updatedAt": "2025-09-02T18:28:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc69Z334",
          "commit": {
            "abbreviatedOid": "915eb2a"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-02T18:28:51Z",
          "updatedAt": "2025-09-02T18:28:52Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\n    * OPTIONAL. The hash of the Type Metadata document to provide integrity as defined in (#document-integrity).\r\n```",
              "createdAt": "2025-09-02T18:28:51Z",
              "updatedAt": "2025-09-02T18:28:52Z"
            }
          ]
        }
      ]
    },
    {
      "number": 337,
      "id": "PR_kwDOJbVClc6lxAX5",
      "title": "fix: add extend for claim metadata",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/337",
      "state": "MERGED",
      "author": "cre8",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #311\n\nSigned-off-by: Mirko Mollik <mirko.mollik@eudi.sprind.org>",
      "createdAt": "2025-08-28T09:21:45Z",
      "updatedAt": "2025-09-11T22:14:01Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "8d131ff2df64edfe1b64a00b7d9ad54848bf7a17",
      "headRepository": "cre8/oauth-sd-jwt-vc",
      "headRefName": "fix/311",
      "headRefOid": "3ff9331241a51cf0c2d02027932a096c85b4b4b0",
      "closedAt": "2025-09-11T19:22:55Z",
      "mergedAt": "2025-09-11T19:22:55Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "1aeb7bb7ba691df12691936c17717b16ad0ea04e"
      },
      "comments": [
        {
          "author": "cre8",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> \"refine\" really doesn't work for me\r\n\r\nI agree. The extend approach solves the problem of definition duplication. But it should give the freedom to override an attribute completely. The only limitation is that you cannot delete a claim in case it was defined in a VCT \"parent\", correct? When my credential has the attributes `A,B,C` and I only want `B,C`, extending does not help me and I need define the whole metadata.",
          "createdAt": "2025-09-04T05:57:03Z",
          "updatedAt": "2025-09-04T05:57:03Z"
        },
        {
          "author": "babisRoutis",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> > \"refine\" really doesn't work for me\r\n> \r\n> I agree. The extend approach solves the problem of definition duplication. But it should give the freedom to override an attribute completely. The only limitation is that you cannot delete a claim in case it was defined in a VCT \"parent\", correct? When my credential has the attributes `A,B,C` and I only want `B,C`, extending does not help me and I need define the whole metadata.\r\n\r\nI believe that's correct. New attributes can be added to the  base attributes. Base attributes cannot be removed.\r\n\r\nPersonally, I still believe that there should be a rule for overriding a single base claim with regards to `sd` property, not allowing to change the value of `sd` unless it is equal to `allowed`. \r\n\r\nReason for this is that `sd` inherently affects the DCQL.\r\n\r\nFor instance, assume a verifier that wants to query a wallet, in the basis of a well-known (base definition),  for a set of attributes. This verifier doesn't have to include to the DCQL  the attributes having `sd` equal to `never`.\r\n\r\nIf an issuer overrides such a claim and sets the `sd` equal to `always` then it will brake the verifier's expectation.\r\n\r\nMy point is that the use of a base definitions (especially in an ecosystem with multiple issuers/verifiers) is a contract with the verifiers that probably shouldn't be broken. \r\n",
          "createdAt": "2025-09-04T11:40:40Z",
          "updatedAt": "2025-09-04T13:53:47Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> > > \"refine\" really doesn't work for me\r\n> > \r\n> > \r\n> > I agree. The extend approach solves the problem of definition duplication. But it should give the freedom to override an attribute completely. The only limitation is that you cannot delete a claim in case it was defined in a VCT \"parent\", correct? When my credential has the attributes `A,B,C` and I only want `B,C`, extending does not help me and I need define the whole metadata.\r\n> \r\n> I believe that's correct. New attributes can be added to the base attributes. Base attributes cannot be removed.\r\n> \r\n> Personally, I still believe that there should be a rule for overriding a single base claim with regards to `sd` property, not allowing to change the value of `sd` unless it is equal to `allowed`.\r\n> \r\n> Reason for this is that `sd` inherently affects the DCQL.\r\n> \r\n> For instance, assume a verifier that wants to query a wallet, in the basis of a well-known (base definition), for a set of attributes. This verifier doesn't have to include to the DCQL the attributes having `sd` equal to `never`.\r\n> \r\n> If an issuer overrides such a claim and sets the `sd` equal to `always` then it will brake the verifier's expectation.\r\n> \r\n> My point is that the use of a base definitions (especially in an ecosystem with multiple issuers/verifiers) is a contract with the verifiers that probably shouldn't be broken.\r\n\r\n@babisRoutis, I am not myself convinced but if you feel strongly about it, please create an issue to continue the discussion elsewhere and allow this to be incorporated.",
          "createdAt": "2025-09-11T19:19:42Z",
          "updatedAt": "2025-09-11T19:19:42Z"
        },
        {
          "author": "babisRoutis",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> @babisRoutis, I am not myself convinced but if you feel strongly about it, please create an issue to continue the discussion elsewhere and allow this to be incorporated.\r\n\r\nHi @bc-pi\r\n\r\nI thought that I could comment on this PR  given that actually  had opened the  #311 (which this PR tackles)  \r\n\r\nThere is #323 which is related to the use of `allow` by the issuers, if anybody wants to drop a comment there.\r\n\r\nIn any case, thank you for sharing your thoughts on this.\r\n\r\n\r\n",
          "createdAt": "2025-09-11T21:09:32Z",
          "updatedAt": "2025-09-11T21:09:32Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> > @babisRoutis, I am not myself convinced but if you feel strongly about it, please create an issue to continue the discussion elsewhere and allow this to be incorporated.\r\n> \r\n> Hi @bc-pi\r\n> \r\n> I thought that I could comment on this PR given that actually had opened the #311 (which this PR tackles)\r\n> \r\n> There is #323 which is related to the use of `allow` by the issuers, if anybody wants to drop a comment there.\r\n> \r\n> In any case, thank you for sharing your thoughts on this.\r\n\r\nI'm sorry @babisRoutis, I wasn't suggesting you couldn't comment on the PR. I was trying to make some progress in the context of the PR and a desire to publish a new draft revision soon but also acknowledge that you still had outstanding concerns. \r\n",
          "createdAt": "2025-09-11T22:14:01Z",
          "updatedAt": "2025-09-11T22:14:01Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc682koQ",
          "commit": {
            "abbreviatedOid": "2f2b73b"
          },
          "author": "babisRoutis",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-08-29T11:37:55Z",
          "updatedAt": "2025-08-29T11:37:55Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "The property `lang` is required for each `display` element of the a claim. Can you please add it?",
              "createdAt": "2025-08-29T11:37:55Z",
              "updatedAt": "2025-08-29T11:37:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc682o-R",
          "commit": {
            "abbreviatedOid": "2f2b73b"
          },
          "author": "babisRoutis",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-08-29T11:45:27Z",
          "updatedAt": "2025-08-29T11:45:28Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "With regards to \"overwriting\" \r\n\r\nI have the impression that an issuer that \"extends\" a base definition, should not just be able to freely redefine a claim, at least the `sd` property.\r\n\r\nTo my understanding an issuer should (or even must) refine a base claim having as `sd` property equal to `allowed` in order to allow holder and verifier to know his choice to make the claim either `always` or `never` selectively disclosable.\r\n\r\nOn the other hand, I think that it doesn't make sense to change an `sd` from `always` to `never` or vice versa.\r\n\r\nSo please consider to replace \"overwrite\" with \"refine\" and mention the above rule for `sd` if it makes sense",
              "createdAt": "2025-08-29T11:45:28Z",
              "updatedAt": "2025-08-29T11:47:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc683tQ2",
          "commit": {
            "abbreviatedOid": "2f2b73b"
          },
          "author": "cre8",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-08-29T13:21:16Z",
          "updatedAt": "2025-08-29T13:21:17Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "done",
              "createdAt": "2025-08-29T13:21:17Z",
              "updatedAt": "2025-08-29T13:21:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc683uDH",
          "commit": {
            "abbreviatedOid": "2f2b73b"
          },
          "author": "cre8",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-08-29T13:22:22Z",
          "updatedAt": "2025-08-29T13:22:22Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "done",
              "createdAt": "2025-08-29T13:22:22Z",
              "updatedAt": "2025-08-29T13:22:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6839Sz",
          "commit": {
            "abbreviatedOid": "2f2b73b"
          },
          "author": "babisRoutis",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-08-29T13:41:58Z",
          "updatedAt": "2025-08-29T13:41:59Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "A `lang` is needed to the `name` claim of the \"merged\" definition.",
              "createdAt": "2025-08-29T13:41:58Z",
              "updatedAt": "2025-08-29T13:41:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc684FHO",
          "commit": {
            "abbreviatedOid": "46284d4"
          },
          "author": "babisRoutis",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-08-29T13:52:02Z",
          "updatedAt": "2025-08-29T13:52:03Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "I was hoping of a more strict restriction about a claim refinement.\r\n\r\nThe child definition can \r\n- change the display (actually overwriting the base definition) and \r\n- refine `sd` only if it is equal to `allowed` \r\n\r\nPS: I would appreciate a comment from other reviewers, if the restriction on `sd` makes sense. ",
              "createdAt": "2025-08-29T13:52:03Z",
              "updatedAt": "2025-08-29T13:52:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc68-eh0",
          "commit": {
            "abbreviatedOid": "2f2b73b"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-08-29T22:28:41Z",
          "updatedAt": "2025-08-29T22:28:41Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "IMO I don't know what \"refine\" means or should mean in this context and I don't think it's worth trying to figure out or define. I'd think a complete overwrite in the case of a same `path` is the sensible approach. If that's perceived as too flexible or concerning, which I don't see, then ignoring same `path` or rejecting metadata documents with them would be better than defining some kind of merge rules. ",
              "createdAt": "2025-08-29T22:28:41Z",
              "updatedAt": "2025-08-29T22:28:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc68-f3M",
          "commit": {
            "abbreviatedOid": "46284d4"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-08-29T22:30:21Z",
          "updatedAt": "2025-08-29T22:30:21Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/337#discussion_r2311468685 my intuition is to put back overwriting ",
              "createdAt": "2025-08-29T22:30:21Z",
              "updatedAt": "2025-08-29T22:30:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc68-gqi",
          "commit": {
            "abbreviatedOid": "46284d4"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "\"refine\" really doesn't work for me ",
          "createdAt": "2025-08-29T22:31:22Z",
          "updatedAt": "2025-08-29T22:31:22Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc69ZvRR",
          "commit": {
            "abbreviatedOid": "46284d4"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-02T18:15:46Z",
          "updatedAt": "2025-09-02T18:15:47Z",
          "comments": [
            {
              "originalPosition": 73,
              "body": "\"add\"? didn't it already exsit? is't it more of a \"clarify\"  or \"better define\" or similar? ",
              "createdAt": "2025-09-02T18:15:47Z",
              "updatedAt": "2025-09-02T18:15:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc69wY5r",
          "commit": {
            "abbreviatedOid": "2f2b73b"
          },
          "author": "cre8",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-04T06:08:07Z",
          "updatedAt": "2025-09-04T06:08:07Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "fixed",
              "createdAt": "2025-09-04T06:08:07Z",
              "updatedAt": "2025-09-04T06:08:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6_hyE6",
          "commit": {
            "abbreviatedOid": "9eae862"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-11T19:15:29Z",
          "updatedAt": "2025-09-11T19:15:29Z",
          "comments": [
            {
              "originalPosition": 73,
              "body": "fyi and fwiw @cre8 ",
              "createdAt": "2025-09-11T19:15:29Z",
              "updatedAt": "2025-09-11T19:15:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6_h1EW",
          "commit": {
            "abbreviatedOid": "9eae862"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-09-11T19:20:03Z",
          "updatedAt": "2025-09-11T19:20:03Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc6_h1mE",
          "commit": {
            "abbreviatedOid": "9eae862"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-11T19:20:55Z",
          "updatedAt": "2025-09-11T19:20:55Z",
          "comments": [
            {
              "originalPosition": 73,
              "body": "```suggestion\r\nMirko Mollik,\r\n```",
              "createdAt": "2025-09-11T19:20:55Z",
              "updatedAt": "2025-09-11T19:20:55Z"
            }
          ]
        }
      ]
    },
    {
      "number": 338,
      "id": "PR_kwDOJbVClc6lxROo",
      "title": "fix: add security consideration for issuer authorization.",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/338",
      "state": "MERGED",
      "author": "cre8",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #302\n\nSigned-off-by: Mirko Mollik <mirko.mollik@eudi.sprind.org>",
      "createdAt": "2025-08-28T09:44:11Z",
      "updatedAt": "2025-09-04T05:57:24Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "f13bc95305781e1fbd1041944e36899dd01c9fd2",
      "headRepository": "cre8/oauth-sd-jwt-vc",
      "headRefName": "fix/302",
      "headRefOid": "37de109823fd68a85f533f79fca067780ba601d0",
      "closedAt": "2025-09-02T19:10:36Z",
      "mergedAt": "2025-09-02T19:10:36Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "65584a8337c604b98919639ac5bf7195e7d79c73"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc682swX",
          "commit": {
            "abbreviatedOid": "37de109"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-08-29T11:52:00Z",
          "updatedAt": "2025-08-29T11:52:00Z",
          "comments": []
        }
      ]
    },
    {
      "number": 339,
      "id": "PR_kwDOJbVClc6l40ZR",
      "title": "Status List Token has to be a JWT",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/339",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "State that when the `status` claim is present and using the `status_list` mechanism, the associated Status List Token has to be a JWT",
      "createdAt": "2025-08-28T22:25:19Z",
      "updatedAt": "2025-09-02T18:06:36Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "e1bdaa419307a303f96d9229e21ac8e7a6a9fc65",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "333-jwt",
      "headRefOid": "8d4a5a20b568733798f6ecb12b4d6eee8f2a407c",
      "closedAt": "2025-09-02T18:06:36Z",
      "mergedAt": "2025-09-02T18:06:36Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "7338dcf9416d07dd5c1ae64fcc4d21da7ffe2fbb"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc68y45W",
          "commit": {
            "abbreviatedOid": "8d4a5a2"
          },
          "author": "babisRoutis",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-08-29T05:53:13Z",
          "updatedAt": "2025-09-02T18:04:57Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc682G6X",
          "commit": {
            "abbreviatedOid": "8d4a5a2"
          },
          "author": "jogu",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-08-29T10:50:05Z",
          "updatedAt": "2025-09-02T18:04:57Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc69A7nD",
          "commit": {
            "abbreviatedOid": "8d4a5a2"
          },
          "author": "cre8",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-08-30T17:45:29Z",
          "updatedAt": "2025-09-02T18:04:57Z",
          "comments": []
        }
      ]
    },
    {
      "number": 340,
      "id": "PR_kwDOJbVClc6l848C",
      "title": "fix: add privacy concerns for cnf handling",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/340",
      "state": "MERGED",
      "author": "cre8",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "closes #315\n\nSigned-off-by: Mirko Mollik <mirko.mollik@eudi.sprind.org>",
      "createdAt": "2025-08-29T09:08:20Z",
      "updatedAt": "2025-09-11T19:12:12Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "65584a8337c604b98919639ac5bf7195e7d79c73",
      "headRepository": "cre8/oauth-sd-jwt-vc",
      "headRefName": "fix/315",
      "headRefOid": "f73a8cc2d3f9b7539eca6fb1eec4ef5d6a8be385",
      "closedAt": "2025-09-11T19:12:12Z",
      "mergedAt": "2025-09-11T19:12:12Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "8d131ff2df64edfe1b64a00b7d9ad54848bf7a17"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "in https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/315#issuecomment-3235196835 we'd agreed to \"add text advising against supporting cnf methods that involve retrieving a key from a (potentially issuer-controlled) remote source.\" which is somewhat more than cnf.jwk.x5u as there's a cnf.jku https://datatracker.ietf.org/doc/html/rfc7800#section-3.5 and some put a URL in the cnf.kid https://datatracker.ietf.org/doc/html/rfc7800#section-3.4 and there's a possibility that other cnf methods are added. ",
          "createdAt": "2025-08-29T12:15:54Z",
          "updatedAt": "2025-08-29T12:15:54Z"
        },
        {
          "author": "cre8",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> in [#315 (comment)](https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/315#issuecomment-3235196835) we'd agreed to \"add text advising against supporting cnf methods that involve retrieving a key from a (potentially issuer-controlled) remote source.\" which is somewhat more than cnf.jwk.x5u as there's a cnf.jku https://datatracker.ietf.org/doc/html/rfc7800#section-3.5 and some put a URL in the cnf.kid https://datatracker.ietf.org/doc/html/rfc7800#section-3.4 and there's a possibility that other cnf methods are added.\r\n\r\nso should it be more generic or do we even want to have an \"allowlist\" so developers know what is safe to use?",
          "createdAt": "2025-08-29T13:26:37Z",
          "updatedAt": "2025-08-29T13:26:37Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> > in [#315 (comment)](https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/315#issuecomment-3235196835) we'd agreed to \"add text advising against supporting cnf methods that involve retrieving a key from a (potentially issuer-controlled) remote source.\" which is somewhat more than cnf.jwk.x5u as there's a cnf.jku https://datatracker.ietf.org/doc/html/rfc7800#section-3.5 and some put a URL in the cnf.kid https://datatracker.ietf.org/doc/html/rfc7800#section-3.4 and there's a possibility that other cnf methods are added.\r\n> \r\n> so should it be more generic or do we even want to have an \"allowlist\" so developers know what is safe to use?\r\n\r\nJust a bit more generic or even just an additional bit about there being other potential remote retrieval things. And a suggestion/requirement not to use them - basically saying don't issue things with that kind of cnf and don't follow such references as verifier or even holder. ",
          "createdAt": "2025-08-29T14:21:34Z",
          "updatedAt": "2025-08-29T22:01:17Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc683AIl",
          "commit": {
            "abbreviatedOid": "01db10a"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-08-29T12:19:41Z",
          "updatedAt": "2025-08-29T12:19:41Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "I am of the opinion that a strict reading of RFC 7517 does not imply this behavior so think a different word would be better here.\r\n```suggestion\r\nAnother related concern arises from the use of the `x5u` parameter in JWKs, as specified in section 4.6 [@!RFC7517]. Suppose a malicious Issuer uses different JWKs with distinct `x5u` values per (group of) user(s), particularly in the `cnf` claim. The public key of a Holder may be stored in a certificate at a location controlled by the Issuer, and the `x5u` parameter of the JWK in the `cnf` claim set accordingly. Since `x5u` can co-exist with other JWK members, this may not be noticed by the Holder. If the Verifier uncritically follows RFC 7517, it will retrieve the certificate and verify it matches the rest of the JWK members. This mechanism can make the attack described in Section 11.3 more efficient, as resolving the certificate via `x5u` may allow the Issuer to track credential usage or correlate Holders.\r\n```",
              "createdAt": "2025-08-29T12:19:41Z",
              "updatedAt": "2025-08-29T12:19:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6-VtJm",
          "commit": {
            "abbreviatedOid": "509af84"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "thank you @cre8 ",
          "createdAt": "2025-09-06T17:11:06Z",
          "updatedAt": "2025-09-06T17:11:06Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc6-WLsD",
          "commit": {
            "abbreviatedOid": "509af84"
          },
          "author": "adeinega",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-06T17:54:23Z",
          "updatedAt": "2025-09-06T17:54:23Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "I suggest using `SHOULD`, not `should` in \"key material should be supported.\"\r\n\r\nJust like https://datatracker.ietf.org/doc/html/rfc8725#section-3.10 does it.",
              "createdAt": "2025-09-06T17:54:23Z",
              "updatedAt": "2025-09-06T17:54:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6-WPL5",
          "commit": {
            "abbreviatedOid": "509af84"
          },
          "author": "adeinega",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-06T17:58:01Z",
          "updatedAt": "2025-09-06T17:58:01Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "In addition to that, rephrase or omit \"Issuers are advised not to issue SD-JWT VCs with such cnf methods\".",
              "createdAt": "2025-09-06T17:58:01Z",
              "updatedAt": "2025-09-06T17:58:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6-WRga",
          "commit": {
            "abbreviatedOid": "509af84"
          },
          "author": "adeinega",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-06T18:00:21Z",
          "updatedAt": "2025-09-06T18:00:22Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "The spec uses Holder and Verifiers (starting letters in an upper case) too.",
              "createdAt": "2025-09-06T18:00:22Z",
              "updatedAt": "2025-09-06T18:00:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6-Zn0s",
          "commit": {
            "abbreviatedOid": "509af84"
          },
          "author": "cre8",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-07T10:52:45Z",
          "updatedAt": "2025-09-07T10:52:45Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "@adeinega updates your first and third point. But what about the advise? I think it's good to give advises in the privacy consideration method. Because when we really want to block it, it has to be part of the handling chapters, not the privacy consideration chapter.",
              "createdAt": "2025-09-07T10:52:45Z",
              "updatedAt": "2025-09-07T10:52:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6-aGI5",
          "commit": {
            "abbreviatedOid": "509af84"
          },
          "author": "adeinega",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-07T16:17:34Z",
          "updatedAt": "2025-09-07T16:17:35Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "@cre8, my (personal) preference would be to explicitly block `x5u`, `jku`, and other feature methods for retrieving key material from a remote source in the cnf claim. The right place for that probably isn't going to be the privacy considerations section like you said.\r\n\r\nWhy is that?\r\n\r\nThis is a safeguard from anyone trying to use these methods for rotating key material, and of course, that eliminates a ton of privacy concerns.\r\n\r\nOtherwise, there\u2019s enough room left for misuse, abuse and debates.",
              "createdAt": "2025-09-07T16:17:35Z",
              "updatedAt": "2025-09-07T16:17:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6-b0XE",
          "commit": {
            "abbreviatedOid": "509af84"
          },
          "author": "cre8",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-08T04:58:18Z",
          "updatedAt": "2025-09-08T04:58:18Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Sounds valid to me, but as mentioned above it would be better in the sd-jwt kb-jwt chapter that we can not change. So we either forbid it in the privacy concern chapter or adding a new kb-jwt chapter that is \"hardening\" the approach.\r\n@bc-pi what's your opinion?",
              "createdAt": "2025-09-08T04:58:18Z",
              "updatedAt": "2025-09-08T04:58:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6_hrZs",
          "commit": {
            "abbreviatedOid": "509af84"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-11T19:06:37Z",
          "updatedAt": "2025-09-11T19:06:37Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "I would also be quite happy to explicitly prohibit `xxu` style things current and future. But I think that might be a bit too far for the scope of this and https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/315. There are, for example, folks that really really seem to want to be able to do some kind of DID thing in cnf. There might be some unhappiness, if that were outright prohibited. Yet I'd like to get something into the draft and @cre8's words seem to hit the right balance for the present moment. @adeinega, if you feel strongly about being stricter, please create a new issue so we can discuss separately.  ",
              "createdAt": "2025-09-11T19:06:37Z",
              "updatedAt": "2025-09-11T19:11:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6_hsqQ",
          "commit": {
            "abbreviatedOid": "734f41c"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-11T19:08:12Z",
          "updatedAt": "2025-09-11T19:08:13Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "```suggestion\r\n* Add privacy concerns regarding the use of `x5u` parameter in JWKs and similar remote retrieval mechanisms\r\n```",
              "createdAt": "2025-09-11T19:08:12Z",
              "updatedAt": "2025-09-11T19:08:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6_htLE",
          "commit": {
            "abbreviatedOid": "71dbb15"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-11T19:08:54Z",
          "updatedAt": "2025-09-11T19:08:55Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "```suggestion\r\nand should monitor suspicious behavior such as frequent rotation of those identifiers.\r\n```",
              "createdAt": "2025-09-11T19:08:54Z",
              "updatedAt": "2025-09-11T19:09:32Z"
            }
          ]
        }
      ]
    },
    {
      "number": 341,
      "id": "PR_kwDOJbVClc6mHbSJ",
      "title": "fix: changing Document to document",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/341",
      "state": "MERGED",
      "author": "cre8",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Based on https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/336/files/fb2d722de03c4752e259e3cd6a629d1f172eb810#r2311916658\n\nSigned-off-by: Mirko Mollik <mirko.mollik@eudi.sprind.org>",
      "createdAt": "2025-08-30T17:43:47Z",
      "updatedAt": "2025-08-30T22:44:12Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "16562caebbef0b92a6273c7f0bcb40ac5ce7f633",
      "headRepository": "cre8/oauth-sd-jwt-vc",
      "headRefName": "small-d",
      "headRefOid": "e437b84e9ac641ac7355c01eb11f597bcabf2296",
      "closedAt": "2025-08-30T22:44:12Z",
      "mergedAt": "2025-08-30T22:44:12Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "e1bdaa419307a303f96d9229e21ac8e7a6a9fc65"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc69BaYp",
          "commit": {
            "abbreviatedOid": "e437b84"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-08-30T22:42:12Z",
          "updatedAt": "2025-08-30T22:42:12Z",
          "comments": []
        }
      ]
    },
    {
      "number": 344,
      "id": "PR_kwDOJbVClc6oGsLv",
      "title": "`vct` datatype is now just a string",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/344",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "to fix issue #343",
      "createdAt": "2025-09-11T19:32:24Z",
      "updatedAt": "2025-09-11T19:33:45Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "1aeb7bb7ba691df12691936c17717b16ad0ea04e",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "343colon",
      "headRefOid": "49be5fc9470b5abac2f86262479a8fe095dbc5d7",
      "closedAt": "2025-09-11T19:33:45Z",
      "mergedAt": "2025-09-11T19:33:45Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "8d0390e5b54bf2f4aae4f660ce61bfe94b352035"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 345,
      "id": "PR_kwDOJbVClc6oUgub",
      "title": "Remove JSON schema from Type Metadata",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/345",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "for #342 and hopefully others like #332 #310 (only somewhat related) #238 and #237 too",
      "createdAt": "2025-09-12T20:25:59Z",
      "updatedAt": "2025-09-23T19:23:40Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "fc9a8d261dc0ca6ecf6c28cd16018a7b30dc9403",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "Remove-JSON-schema-from-Type-Metadata",
      "headRefOid": "642a11cb3f2ccf4bf899f07548822221c5a4d6e6",
      "closedAt": "2025-09-23T19:23:40Z",
      "mergedAt": "2025-09-23T19:23:40Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "587520ce2ceac3575b71f96538cb7305e2dfef44"
      },
      "comments": [
        {
          "author": "babisRoutis",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Dear @bc-pi \r\n\r\nI noticed that you have associated the present PR with #310. \r\n\r\nThe later was about adding `mandatory` qualifier to a claim with the meaning of an always issued attribute regardless of its `sd` value.\r\n\r\nCan you please clarify how the absence of  `mandatory` to the PR  should be interpreted?\r\n- Outside the scope of the PR? \r\n- Missed the addition? \r\n- No real value to adding `mandatory`?\r\n\r\nPerhaps, it would be more clear to de-associate this PR from #310, given that `mandatory` is not strictly related to the use of JSON Schema.\r\n\r\n\r\n",
          "createdAt": "2025-09-15T08:04:56Z",
          "updatedAt": "2025-09-15T08:04:56Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> Dear @bc-pi\r\n> \r\n> I noticed that you have associated the present PR with #310.\r\n> \r\n> The later was about adding `mandatory` qualifier to a claim with the meaning of an always issued attribute regardless of its `sd` value.\r\n> \r\n> Can you please clarify how the absence of `mandatory` to the PR should be interpreted?\r\n> \r\n>    * Outside the scope of the PR?\r\n> \r\n>    * Missed the addition?\r\n> \r\n>    * No real value to adding `mandatory`?\r\n> \r\n> \r\n> Perhaps, it would be more clear to de-associate this PR from #310, given that `mandatory` is not strictly related to the use of JSON Schema.\r\n\r\nI did mention #310 in the description because I perceive some overlap on the general topic but didn't associate that one with the \"Successfully merging this pull request may close these issues\" list. So it will (or should) remain open even if/when this is merged. \"Outside the scope of the PR\" is how the absence of `mandatory` here should be interpreted, I think. ",
          "createdAt": "2025-09-15T20:02:15Z",
          "updatedAt": "2025-09-15T20:17:06Z"
        },
        {
          "author": "babisRoutis",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hi @bc-pi \r\n\r\nTo the [datatracker](https://datatracker.ietf.org/doc/draft-ietf-oauth-sd-jwt-vc/11/)  there is a link to draft 11. Does this mean that the removal of JSON Schema should target draft 12 or is there going to be an update to draft 11 when this PR gets merged?\r\n\r\nMainly I am asking for the changes to the document history introduced by present PR.",
          "createdAt": "2025-09-16T07:01:16Z",
          "updatedAt": "2025-09-16T07:01:16Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> Hi @bc-pi\r\n> \r\n> To the [datatracker](https://datatracker.ietf.org/doc/draft-ietf-oauth-sd-jwt-vc/11/) there is a link to draft 11. Does this mean that the removal of JSON Schema should target draft 12 or is there going to be an update to draft 11 when this PR gets merged?\r\n> \r\n> Mainly I am asking for the changes to the document history introduced by present PR.\r\n\r\nYes, the document history entry should be moved to -12. I was hopeful about seeing this simplification/improvement go into -11 but folks weren't fully on board yet with it and there was some pressure to get -11 out with its other changes in the meantime. ",
          "createdAt": "2025-09-16T12:09:15Z",
          "updatedAt": "2025-09-16T12:09:15Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Some discussion with @awoie and @danielfett sussed out a desire to have #350 addressed as part of this. Words towards that end were added with [7658995](https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/345/commits/765899525482c00ddabc3afce4d615df43d30ac1) ",
          "createdAt": "2025-09-16T20:09:20Z",
          "updatedAt": "2025-09-16T20:09:20Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc6_2cdE",
          "commit": {
            "abbreviatedOid": "9aaf827"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-12T20:26:17Z",
          "updatedAt": "2025-09-12T20:26:17Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "```suggestion\r\n  \"extends#integrity\":\"sha256-ilOUJsTultOwLfz7QUcFALaRa3BP/jelX1ds04kB9yU=\"\r\n```",
              "createdAt": "2025-09-12T20:26:17Z",
              "updatedAt": "2025-09-12T20:26:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc6_2iu-",
          "commit": {
            "abbreviatedOid": "cb5a2b3"
          },
          "author": "adeinega",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-09-12T20:36:54Z",
          "updatedAt": "2025-09-16T12:05:40Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc7AYG8Y",
          "commit": {
            "abbreviatedOid": "cb5a2b3"
          },
          "author": "babisRoutis",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Removal of JSON Schema does solve the problem of having to deal with two schemas or having a single schema mostly for presentation. At the  same time, though, it increases the reliance to text specifications (like credential rule-books), which are not processable neither from wallets nor from verifier.\r\n\r\nAnyway, the PR looks good and on the positive side removes the complexity of defining and processing JSON Schema.\r\n\r\n",
          "createdAt": "2025-09-16T06:06:28Z",
          "updatedAt": "2025-09-16T12:05:40Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc7AcEGp",
          "commit": {
            "abbreviatedOid": "9dcb6de"
          },
          "author": "babisRoutis",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2025-09-16T09:08:04Z",
          "updatedAt": "2025-09-16T09:08:23Z",
          "comments": [
            {
              "originalPosition": 217,
              "body": "Probably this entry should go for 12, given that d11 was [released](https://github.com/oauth-wg/oauth-sd-jwt-vc/releases/tag/draft-ietf-oauth-sd-jwt-vc-11)",
              "createdAt": "2025-09-16T09:08:05Z",
              "updatedAt": "2025-09-16T09:08:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc7AgNDU",
          "commit": {
            "abbreviatedOid": "9dcb6de"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-16T12:12:25Z",
          "updatedAt": "2025-09-16T12:12:25Z",
          "comments": [
            {
              "originalPosition": 217,
              "body": "a5b48b3727642defd2a70dda829253f4922fec78 does that ",
              "createdAt": "2025-09-16T12:12:25Z",
              "updatedAt": "2025-09-16T12:12:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc7AguMq",
          "commit": {
            "abbreviatedOid": "a5b48b3"
          },
          "author": "babisRoutis",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-09-16T12:40:12Z",
          "updatedAt": "2025-09-16T12:40:12Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc7Aojcm",
          "commit": {
            "abbreviatedOid": "cb7f34e"
          },
          "author": "adeinega",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-16T22:11:03Z",
          "updatedAt": "2025-09-16T22:11:04Z",
          "comments": [
            {
              "originalPosition": 42,
              "body": "You might still want to have an equivalent of extensions that must to be understood just like [the crit header parameter does in JWS](https://datatracker.ietf.org/doc/html/rfc7515#section-4.1.11).",
              "createdAt": "2025-09-16T22:11:04Z",
              "updatedAt": "2025-09-16T22:11:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc7ApXIY",
          "commit": {
            "abbreviatedOid": "cb7f34e"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-17T00:17:21Z",
          "updatedAt": "2025-09-17T00:17:21Z",
          "comments": [
            {
              "originalPosition": 42,
              "body": "My intuition is that something like that isn't needed for metadata. I'm not aware of a similar construct in any of the metadata content in the OAuth/OIDC realm nor that occasion that it'd have been useful has come to light. ",
              "createdAt": "2025-09-17T00:17:21Z",
              "updatedAt": "2025-09-17T00:17:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc7CQhBa",
          "commit": {
            "abbreviatedOid": "642a11c"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-09-23T18:08:25Z",
          "updatedAt": "2025-09-23T18:08:25Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc7CQiPh",
          "commit": {
            "abbreviatedOid": "642a11c"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-09-23T18:09:57Z",
          "updatedAt": "2025-09-23T18:09:57Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc7CQqyU",
          "commit": {
            "abbreviatedOid": "cb7f34e"
          },
          "author": "adeinega",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-23T18:22:20Z",
          "updatedAt": "2025-09-23T18:22:20Z",
          "comments": [
            {
              "originalPosition": 42,
              "body": "@bc-pi, I think I failed to explain that well. I concur with your intuition.\r\n\r\nThe idea isn\u2019t to provide a list of extensions that consumers must know to properly handle metadata, but rather a list of those extensions that consumers must know to properly validate SD JWTs (it just receives them through the metadata).\r\n\r\nIf you're looking for widespread adoption, it might be great to provide such mechanism.",
              "createdAt": "2025-09-23T18:22:20Z",
              "updatedAt": "2025-09-23T18:22:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc7CRQsq",
          "commit": {
            "abbreviatedOid": "cb7f34e"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-23T19:18:38Z",
          "updatedAt": "2025-09-23T19:18:38Z",
          "comments": [
            {
              "originalPosition": 42,
              "body": "> @bc-pi, I think I failed to explain that well. I concur with your intuition.\r\n> \r\n> The idea isn\u2019t to provide a list of extensions that consumers must know to properly handle metadata, but rather a list of those extensions that consumers must know to properly validate SD JWTs (it just receives them through the metadata).\r\n\r\nAh, I see. Thanks for clarifying. I think that is outside the scope of this PR. And IMHO not necessary and arguably not a proper place. \r\n\r\n> If you're looking for widespread adoption, \r\n\r\nThat's the goal, yes. \r\n\r\n> it might be great to provide such mechanism.\r\n\r\nI disagree. But will create an issue for further discussion so this conversation can be resolved and get this incorporated. \r\n",
              "createdAt": "2025-09-23T19:18:38Z",
              "updatedAt": "2025-09-23T19:18:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc7CRSvG",
          "commit": {
            "abbreviatedOid": "cb7f34e"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-23T19:21:43Z",
          "updatedAt": "2025-09-23T19:21:43Z",
          "comments": [
            {
              "originalPosition": 42,
              "body": "> ... will create an issue for further discussion ...\r\n\r\n#354 is that \r\n",
              "createdAt": "2025-09-23T19:21:43Z",
              "updatedAt": "2025-09-23T19:21:43Z"
            }
          ]
        }
      ]
    },
    {
      "number": 348,
      "id": "PR_kwDOJbVClc6o2T-l",
      "title": "now 12 https://mailarchive.ietf.org/arch/msg/oauth/-blEIowkxM-IG1oTxp1UyS406_w/",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/348",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "now 12 https://mailarchive.ietf.org/arch/msg/oauth/-blEIowkxM-IG1oTxp1UyS406_w/",
      "createdAt": "2025-09-16T12:04:36Z",
      "updatedAt": "2025-09-16T12:05:10Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "8d0390e5b54bf2f4aae4f660ce61bfe94b352035",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "next-12",
      "headRefOid": "ebcf794ac0151b8e83991c9723f2e6c18d8f04be",
      "closedAt": "2025-09-16T12:05:10Z",
      "mergedAt": "2025-09-16T12:05:10Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "afbea267f0d079ae6ad70c1aeb8d245bc7cd8c26"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 351,
      "id": "PR_kwDOJbVClc6o6xLt",
      "title": "Discussed on editors call: Remove requirement to ignore unknown claims",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/351",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-09-16T18:23:57Z",
      "updatedAt": "2025-09-17T00:17:49Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "8e4c95d61a057bf8e469415da42d68415024c21a",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "danielfett/ignore-ignore",
      "headRefOid": "10ace19f7227caf55861dfa5dcb11047f34c8ed2",
      "closedAt": "2025-09-17T00:17:49Z",
      "mergedAt": "2025-09-17T00:17:49Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "fc9a8d261dc0ca6ecf6c28cd16018a7b30dc9403"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc7AmGCE",
          "commit": {
            "abbreviatedOid": "c84dd1d"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-09-16T18:31:25Z",
          "updatedAt": "2025-09-16T18:31:25Z",
          "comments": []
        }
      ]
    },
    {
      "number": 353,
      "id": "PR_kwDOJbVClc6qIE5k",
      "title": "Rename lang to locale (because tradition)",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/353",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Fixes #223 ",
      "createdAt": "2025-09-23T18:44:22Z",
      "updatedAt": "2025-10-02T11:58:16Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "587520ce2ceac3575b71f96538cb7305e2dfef44",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "danielfett/dead-or-alive",
      "headRefOid": "80498665f3d9133f77a30b554a85b37247aad911",
      "closedAt": "2025-10-02T11:58:16Z",
      "mergedAt": "2025-10-02T11:58:16Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "1dd44baf51c99b905c8d1b690a851636cabd5969"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc7CRXGk",
          "commit": {
            "abbreviatedOid": "785b141"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-23T19:27:40Z",
          "updatedAt": "2025-09-23T19:27:41Z",
          "comments": [
            {
              "originalPosition": 160,
              "body": "scope which specs are part of the tradition \r\n\r\n```suggestion\r\n* Change `lang` to `locale`. While `lang` is more accurate, `locale` is what has traditionally been used in OpenID Connect and later related specs.\r\n```",
              "createdAt": "2025-09-23T19:27:41Z",
              "updatedAt": "2025-09-23T19:36:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc7CRkVC",
          "commit": {
            "abbreviatedOid": "785b141"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I'm equally happy to celebrate this tradition as I am to not celebrate it. But do think the history bullet should scope which specs are part of the tradition as per https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/353#discussion_r2373259268 ",
          "createdAt": "2025-09-23T19:48:10Z",
          "updatedAt": "2025-09-23T19:48:32Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc7DzIk3",
          "commit": {
            "abbreviatedOid": "8049866"
          },
          "author": "OR13",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-09-30T13:49:29Z",
          "updatedAt": "2025-09-30T13:49:29Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc7D2DHS",
          "commit": {
            "abbreviatedOid": "8049866"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "For the greater good of interop.",
          "createdAt": "2025-09-30T15:58:43Z",
          "updatedAt": "2025-09-30T15:58:43Z",
          "comments": []
        }
      ]
    },
    {
      "number": 356,
      "id": "PR_kwDOJbVClc6rwV7a",
      "title": "Fix vct in metadata",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/356",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "List `vct` as one of the required values in type metadata and ensure that the use of the document integrity claims is clear\r\n\r\nFixes #241 ",
      "createdAt": "2025-10-02T12:10:42Z",
      "updatedAt": "2025-10-02T17:08:33Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "937be08b4f5ae8d137b897972d0218cc3dab202e",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "danielfett/fix-vct-in-metadata",
      "headRefOid": "446eabd7dcbf4e7e2320b1fdf2e326428e7fe7a7",
      "closedAt": "2025-10-02T17:08:33Z",
      "mergedAt": "2025-10-02T17:08:33Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "eb4d731a5d01499d61cea474f79075864bdac229"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc7EavRr",
          "commit": {
            "abbreviatedOid": "a03ecc6"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-10-02T16:04:05Z",
          "updatedAt": "2025-10-02T16:04:05Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Is this \"The value MUST be identical to the `vct` claim used in the SD-JWT VC payload\" problematic with metadata inheritance?    ",
              "createdAt": "2025-10-02T16:04:05Z",
              "updatedAt": "2025-10-02T16:04:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc7Eax6o",
          "commit": {
            "abbreviatedOid": "a03ecc6"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-10-02T16:07:44Z",
          "updatedAt": "2025-10-02T16:07:44Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Aaaahhh, yes, it is.\r\n\r\n```suggestion\r\n```",
              "createdAt": "2025-10-02T16:07:44Z",
              "updatedAt": "2025-10-02T16:07:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc7EayZ8",
          "commit": {
            "abbreviatedOid": "a03ecc6"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-10-02T16:08:26Z",
          "updatedAt": "2025-10-02T16:08:26Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "I know this isn't new but I'm hoping you can explain to me the justification/utility of #integrity suffixed things (which aren't claims except for vct#integrity). On a call sometime would be fine. Like the one we aren't having right now due to a different call running long. ",
              "createdAt": "2025-10-02T16:08:26Z",
              "updatedAt": "2025-10-02T16:08:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc7EbPtc",
          "commit": {
            "abbreviatedOid": "a03ecc6"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-10-02T16:46:20Z",
          "updatedAt": "2025-10-02T16:46:20Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "Screenshotting this for use in some presentation or something in the future. ",
              "createdAt": "2025-10-02T16:46:20Z",
              "updatedAt": "2025-10-02T16:46:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc7EbdS_",
          "commit": {
            "abbreviatedOid": "4aeceb3"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-10-02T16:57:13Z",
          "updatedAt": "2025-10-02T16:57:13Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "```suggestion\r\nMetadata (either in the SD-JWT VC itself or in an `extends` property in a Type\r\n```",
              "createdAt": "2025-10-02T16:57:13Z",
              "updatedAt": "2025-10-02T16:57:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc7EberY",
          "commit": {
            "abbreviatedOid": "4aeceb3"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-10-02T16:58:15Z",
          "updatedAt": "2025-10-02T16:58:15Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "```suggestion\r\nThe following sections define methods to retrieve Type Metadata.\r\n```",
              "createdAt": "2025-10-02T16:58:15Z",
              "updatedAt": "2025-10-02T16:58:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc7EbfWn",
          "commit": {
            "abbreviatedOid": "4aeceb3"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-10-02T16:58:42Z",
          "updatedAt": "2025-10-02T16:58:42Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc7EbhXH",
          "commit": {
            "abbreviatedOid": "70c4de9"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-10-02T17:00:11Z",
          "updatedAt": "2025-10-02T17:00:11Z",
          "comments": []
        }
      ]
    },
    {
      "number": 357,
      "id": "PR_kwDOJbVClc6rwnNm",
      "title": "Introduce the `mandatory` claim from VCI",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/357",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Fixes https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/310\r\n\r\nYes, `mandatory` is a terrible choice in this context, but it is already in use in VCI with the same meaning.\r\n\r\nNote that mandatory is optional, but I would personally recommend to use it.",
      "createdAt": "2025-10-02T12:36:20Z",
      "updatedAt": "2025-10-02T16:48:13Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "1dd44baf51c99b905c8d1b690a851636cabd5969",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "danielfett/optional-mandatory",
      "headRefOid": "b2177745bcc7ac00b69d988764a1e5066665a499",
      "closedAt": "2025-10-02T16:48:12Z",
      "mergedAt": "2025-10-02T16:48:12Z",
      "mergedBy": "awoie",
      "mergeCommit": {
        "oid": "32779dda4333e85379e85c7be321fa3916c00e69"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> Fixes #310\r\n> \r\n> Yes, `mandatory` is a terrible choice in this context, but it is already in use in VCI with the same meaning.\r\n\r\nAgree and agree. \r\n\r\n> \r\n> Note that mandatory is optional, but I would personally recommend to use it.\r\n\r\nI cannot tell if you are trolling here but I celebrate it nonetheless. \r\n\r\n",
          "createdAt": "2025-10-02T15:59:45Z",
          "updatedAt": "2025-10-02T15:59:45Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Thank you, by the way, for doing this. I can now close the tab I've had open for a week+ to https://openid.net/specs/openid-4-verifiable-credential-issuance-1_0.html#appendix-B.2-2.2 ",
          "createdAt": "2025-10-02T16:26:20Z",
          "updatedAt": "2025-10-02T16:26:20Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc7EapgW",
          "commit": {
            "abbreviatedOid": "b217774"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-10-02T15:57:36Z",
          "updatedAt": "2025-10-02T15:57:36Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "A+ wording here, love it. :) ",
              "createdAt": "2025-10-02T15:57:36Z",
              "updatedAt": "2025-10-02T15:57:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc7EasUu",
          "commit": {
            "abbreviatedOid": "b217774"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-10-02T16:00:15Z",
          "updatedAt": "2025-10-02T16:00:15Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc7EbQgB",
          "commit": {
            "abbreviatedOid": "b217774"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-10-02T16:47:30Z",
          "updatedAt": "2025-10-02T16:47:30Z",
          "comments": []
        }
      ]
    },
    {
      "number": 358,
      "id": "PR_kwDOJbVClc6ryqlK",
      "title": "Simple background image aligned with OpenID4VCI",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/358",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Solves #352 \r\n\r\nSolves #305 \r\n\r\nThis is a replacement for PR #335 that introduces fewer additional mechanisms and details.",
      "createdAt": "2025-10-02T15:28:26Z",
      "updatedAt": "2025-10-02T16:54:34Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "1dd44baf51c99b905c8d1b690a851636cabd5969",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "danielfett/background-check",
      "headRefOid": "74ce6b04195b1baad39757f2fd826b1bd3736656",
      "closedAt": "2025-10-02T16:54:34Z",
      "mergedAt": "2025-10-02T16:54:34Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "937be08b4f5ae8d137b897972d0218cc3dab202e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc7EbShf",
          "commit": {
            "abbreviatedOid": "4e90905"
          },
          "author": "awoie",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-10-02T16:49:53Z",
          "updatedAt": "2025-10-02T16:49:53Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJbVClc7EbWwM",
          "commit": {
            "abbreviatedOid": "4e90905"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-10-02T16:52:49Z",
          "updatedAt": "2025-10-02T16:52:49Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "```suggestion\r\n            \"uri#integrity\": \"sha256-5sBT7mMLylHLWrrS/qQ8aHpRAxoraWVmWX6eUVMlrrA=\"\r\n```",
              "createdAt": "2025-10-02T16:52:49Z",
              "updatedAt": "2025-10-02T16:52:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc7EbW-m",
          "commit": {
            "abbreviatedOid": "4e90905"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-10-02T16:53:00Z",
          "updatedAt": "2025-10-02T16:53:00Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "```suggestion\r\n            \"uri#integrity\": \"sha256-9cLlJNXN+TsMk+PmKjZ5t0WRL5ca/xGgX3c1ULmXfh=\"\r\n```",
              "createdAt": "2025-10-02T16:53:00Z",
              "updatedAt": "2025-10-02T16:53:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJbVClc7EbYoy",
          "commit": {
            "abbreviatedOid": "74ce6b0"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-10-02T16:54:01Z",
          "updatedAt": "2025-10-02T16:54:01Z",
          "comments": []
        }
      ]
    },
    {
      "number": 359,
      "id": "PR_kwDOJbVClc6rzyRL",
      "title": "Proposal for recommendation for sd and how extended types use it",
      "url": "https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/359",
      "state": "OPEN",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Fixes #323 \r\n\r\nAlso adds rules when extending types (both for `sd` and for `mandatory`).",
      "createdAt": "2025-10-02T17:17:37Z",
      "updatedAt": "2025-10-02T19:57:10Z",
      "baseRepository": "oauth-wg/oauth-sd-jwt-vc",
      "baseRefName": "main",
      "baseRefOid": "eb4d731a5d01499d61cea474f79075864bdac229",
      "headRepository": "oauth-wg/oauth-sd-jwt-vc",
      "headRefName": "danielfett/proposal-for-sd",
      "headRefOid": "d5355af618f3ddec15f070fb652e8224bdb47701",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I realize this pull request is \"still a work in progress\" but I am not sure that making any more progress on it would be time well spent. ",
          "createdAt": "2025-10-02T19:56:35Z",
          "updatedAt": "2025-10-02T19:57:10Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJbVClc7Eb6Le",
          "commit": {
            "abbreviatedOid": "a477a62"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-10-02T17:20:53Z",
          "updatedAt": "2025-10-02T17:20:53Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "```suggestion\r\n`allowed` in the extended type (or where `sd` was omitted), changing it to either `always` or `never`.\r\nHowever, it MUST NOT change a claim that is marked as `always` or `never` in the extended\r\n```",
              "createdAt": "2025-10-02T17:20:53Z",
              "updatedAt": "2025-10-02T17:20:54Z"
            }
          ]
        }
      ]
    }
  ]
}